
C:\Users\DELL\AppData\Local\Temp\arduino-sketch-176EDEC05BF0F26AEAB3DDE9BEB10C5E/CV3phase.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
../../../../crt1/gcrt1.S:65
       0:	0c 94 19 01 	jmp	0x232	; 0x232 <__dtors_end>
../../../../crt1/gcrt1.S:67
       4:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
../../../../crt1/gcrt1.S:68
       8:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
../../../../crt1/gcrt1.S:69
       c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
../../../../crt1/gcrt1.S:70
      10:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
../../../../crt1/gcrt1.S:71
      14:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
../../../../crt1/gcrt1.S:72
      18:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
../../../../crt1/gcrt1.S:73
      1c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
../../../../crt1/gcrt1.S:74
      20:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
../../../../crt1/gcrt1.S:75
      24:	0c 94 f6 0b 	jmp	0x17ec	; 0x17ec <__vector_9>
../../../../crt1/gcrt1.S:76
      28:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
../../../../crt1/gcrt1.S:77
      2c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
../../../../crt1/gcrt1.S:78
      30:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
../../../../crt1/gcrt1.S:79
      34:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
../../../../crt1/gcrt1.S:80
      38:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
../../../../crt1/gcrt1.S:81
      3c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
../../../../crt1/gcrt1.S:82
      40:	0c 94 b8 15 	jmp	0x2b70	; 0x2b70 <__vector_16>
../../../../crt1/gcrt1.S:83
      44:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
../../../../crt1/gcrt1.S:84
      48:	0c 94 21 13 	jmp	0x2642	; 0x2642 <__vector_18>
../../../../crt1/gcrt1.S:85
      4c:	0c 94 53 13 	jmp	0x26a6	; 0x26a6 <__vector_19>
../../../../crt1/gcrt1.S:86
      50:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
../../../../crt1/gcrt1.S:87
      54:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
../../../../crt1/gcrt1.S:88
      58:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
../../../../crt1/gcrt1.S:89
      5c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
../../../../crt1/gcrt1.S:90
      60:	0c 94 bc 10 	jmp	0x2178	; 0x2178 <__vector_24>
../../../../crt1/gcrt1.S:91
      64:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
../../../../crt1/gcrt1.S:92
      68:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
../../../../crt1/gcrt1.S:93
      6c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
../../../../crt1/gcrt1.S:94
      70:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
../../../../crt1/gcrt1.S:95
      74:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
../../../../crt1/gcrt1.S:96
      78:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
../../../../crt1/gcrt1.S:97
      7c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
../../../../crt1/gcrt1.S:98
      80:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
../../../../crt1/gcrt1.S:99
      84:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
../../../../crt1/gcrt1.S:100
      88:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
../../../../crt1/gcrt1.S:101
      8c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
../../../../crt1/gcrt1.S:102
      90:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
../../../../crt1/gcrt1.S:103
      94:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
../../../../crt1/gcrt1.S:104
      98:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
../../../../crt1/gcrt1.S:105
      9c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
../../../../crt1/gcrt1.S:106
      a0:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
../../../../crt1/gcrt1.S:107
      a4:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
../../../../crt1/gcrt1.S:108
      a8:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
../../../../crt1/gcrt1.S:109
      ac:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
../../../../crt1/gcrt1.S:110
      b0:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>

000000b4 <__trampolines_end>:
__trampolines_start():
      b4:	7f 82       	std	Y+7, r7	; 0x07
      b6:	85 88       	ldd	r8, Z+21	; 0x15
      b8:	8b 8f       	std	Y+27, r24	; 0x1b
      ba:	92 95       	swap	r25
      bc:	98 9b       	sbis	0x13, 0	; 19
      be:	9e a1       	ldd	r25, Y+38	; 0x26
      c0:	a4 a7       	std	Z+44, r26	; 0x2c
      c2:	aa ad       	ldd	r26, Y+58	; 0x3a
      c4:	b0 b2       	in	r11, 0x10	; 16
      c6:	b5 b8       	out	0x05, r11	; 5
      c8:	bb be       	out	0x3b, r11	; 59
      ca:	c0 c3       	rjmp	.+1920   	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
      cc:	c6 c8       	rjmp	.-3700   	; 0xfffff25a <__eeprom_end+0xff7ef25a>
      ce:	cb cd       	rjmp	.-1130   	; 0xfffffc66 <__eeprom_end+0xff7efc66>
      d0:	d0 d2       	rcall	.+1440   	; 0x672 <TGTangGiamToc()+0x100>
      d2:	d4 d7       	rcall	.+4008   	; 0x107c <ChangeVR()+0x1e>
      d4:	d9 db       	rcall	.-2126   	; 0xfffff888 <__eeprom_end+0xff7ef888>
      d6:	dd df       	rcall	.-70     	; 0x92 <__SREG__+0x53>
      d8:	e1 e3       	ldi	r30, 0x31	; 49
      da:	e5 e7       	ldi	r30, 0x75	; 117
      dc:	e9 ea       	ldi	r30, 0xA9	; 169
      de:	ec ee       	ldi	r30, 0xEC	; 236
      e0:	ef f0       	brie	.+58     	; 0x11c <__trampolines_end+0x68>
      e2:	f2 f3       	brmi	.-4      	; 0xe0 <__trampolines_end+0x2c>
      e4:	f4 f5       	brge	.+124    	; 0x162 <__trampolines_end+0xae>
      e6:	f7 f8       	bld	r15, 7
      e8:	f9 f9       	.word	0xf9f9	; ????
      ea:	fa fb       	.word	0xfbfa	; ????
      ec:	fc fc       	.word	0xfcfc	; ????
      ee:	fd fd       	.word	0xfdfd	; ????
      f0:	fd fe       	.word	0xfefd	; ????
      f2:	fe fe       	.word	0xfefe	; ????
      f4:	fe fe       	.word	0xfefe	; ????
      f6:	fe fe       	.word	0xfefe	; ????
      f8:	fd fd       	.word	0xfdfd	; ????
      fa:	fd fc       	.word	0xfcfd	; ????
      fc:	fc fb       	.word	0xfbfc	; ????
      fe:	fa f9       	.word	0xf9fa	; ????
     100:	f9 f8       	.word	0xf8f9	; ????
     102:	f7 f5       	brid	.+124    	; 0x180 <__trampolines_end+0xcc>
     104:	f4 f3       	brlt	.-4      	; 0x102 <__trampolines_end+0x4e>
     106:	f2 f0       	brmi	.+60     	; 0x144 <__trampolines_end+0x90>
     108:	ef ee       	ldi	r30, 0xEF	; 239
     10a:	ec ea       	ldi	r30, 0xAC	; 172
     10c:	e9 e7       	ldi	r30, 0x79	; 121
     10e:	e5 e3       	ldi	r30, 0x35	; 53
     110:	e1 df       	rcall	.-62     	; 0xd4 <__trampolines_end+0x20>
     112:	dd db       	rcall	.-2118   	; 0xfffff8ce <__eeprom_end+0xff7ef8ce>
     114:	d9 d7       	rcall	.+4018   	; 0x10c8 <ChangeVR()+0x6a>
     116:	d4 d2       	rcall	.+1448   	; 0x6c0 <TGTangGiamToc()+0x14e>
     118:	d0 cd       	rjmp	.-1120   	; 0xfffffcba <__eeprom_end+0xff7efcba>
     11a:	cb c8       	rjmp	.-3690   	; 0xfffff2b2 <__eeprom_end+0xff7ef2b2>
     11c:	c6 c3       	rjmp	.+1932   	; 0x8aa <__DATA_REGION_LENGTH__+0xaa>
     11e:	c0 be       	out	0x30, r12	; 48
     120:	bb b8       	out	0x0b, r11	; 11
     122:	b5 b2       	in	r11, 0x15	; 21
     124:	b0 ad       	ldd	r27, Z+56	; 0x38
     126:	aa a7       	std	Y+42, r26	; 0x2a
     128:	a4 a1       	ldd	r26, Z+36	; 0x24
     12a:	9e 9b       	sbis	0x13, 6	; 19
     12c:	98 95       	break
     12e:	92 8f       	std	Z+26, r25	; 0x1a
     130:	8b 88       	ldd	r8, Y+19	; 0x13
     132:	85 82       	std	Z+5, r8	; 0x05
     134:	7f 7c       	andi	r23, 0xCF	; 207
     136:	79 76       	andi	r23, 0x69	; 105
     138:	73 6f       	ori	r23, 0xF3	; 243
     13a:	6c 69       	ori	r22, 0x9C	; 156
     13c:	66 63       	ori	r22, 0x36	; 54
     13e:	60 5d       	subi	r22, 0xD0	; 208
     140:	5a 57       	subi	r21, 0x7A	; 122
     142:	54 51       	subi	r21, 0x14	; 20
     144:	4e 4c       	sbci	r20, 0xCE	; 206
     146:	49 46       	sbci	r20, 0x69	; 105
     148:	43 40       	sbci	r20, 0x03	; 3
     14a:	3e 3b       	cpi	r19, 0xBE	; 190
     14c:	38 36       	cpi	r19, 0x68	; 104
     14e:	33 31       	cpi	r19, 0x13	; 19
     150:	2e 2c       	mov	r2, r14
     152:	2a 27       	eor	r18, r26
     154:	25 23       	and	r18, r21
     156:	21 1f       	adc	r18, r17
     158:	1d 1b       	sub	r17, r29
     15a:	19 17       	cp	r17, r25
     15c:	15 14       	cp	r1, r5
     15e:	12 10       	cpse	r1, r2
     160:	0f 0e       	add	r0, r31
     162:	0c 0b       	sbc	r16, r28
     164:	0a 09       	sbc	r16, r10
     166:	07 06       	cpc	r0, r23
     168:	05 05       	cpc	r16, r5
     16a:	04 03       	mulsu	r16, r20
     16c:	02 02       	muls	r16, r18
     16e:	01 01       	movw	r0, r2
     170:	01 00       	.word	0x0001	; ????
     172:	00 00       	nop
     174:	00 00       	nop
     176:	00 00       	nop
     178:	01 01       	movw	r0, r2
     17a:	01 02       	muls	r16, r17
     17c:	02 03       	mulsu	r16, r18
     17e:	04 05       	cpc	r16, r4
     180:	05 06       	cpc	r0, r21
     182:	07 09       	sbc	r16, r7
     184:	0a 0b       	sbc	r16, r26
     186:	0c 0e       	add	r0, r28
     188:	0f 10       	cpse	r0, r15
     18a:	12 14       	cp	r1, r2
     18c:	15 17       	cp	r17, r21
     18e:	19 1b       	sub	r17, r25
     190:	1d 1f       	adc	r17, r29
     192:	21 23       	and	r18, r17
     194:	25 27       	eor	r18, r21
     196:	2a 2c       	mov	r2, r10
     198:	2e 31       	cpi	r18, 0x1E	; 30
     19a:	33 36       	cpi	r19, 0x63	; 99
     19c:	38 3b       	cpi	r19, 0xB8	; 184
     19e:	3e 40       	sbci	r19, 0x0E	; 14
     1a0:	43 46       	sbci	r20, 0x63	; 99
     1a2:	49 4c       	sbci	r20, 0xC9	; 201
     1a4:	4e 51       	subi	r20, 0x1E	; 30
     1a6:	54 57       	subi	r21, 0x74	; 116
     1a8:	5a 5d       	subi	r21, 0xDA	; 218
     1aa:	60 63       	ori	r22, 0x30	; 48
     1ac:	66 69       	ori	r22, 0x96	; 150
     1ae:	6c 6f       	ori	r22, 0xFC	; 252
     1b0:	73 76       	andi	r23, 0x63	; 99
     1b2:	79 7c       	andi	r23, 0xC9	; 201

000001b4 <digital_pin_to_timer_PGM>:
     1b4:	0a 0d 0e 09 00 03 02 00 00 04 05 08 00 00 00 00     ................
	...

000001cf <digital_pin_to_bit_mask_PGM>:
     1cf:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     1df:	04 08 10 20 40 80 40 01 02 04 08                    ... @.@....

000001ea <digital_pin_to_port_PGM>:
     1ea:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     1fa:	03 03 03 03 02 02 03 05 05 05 05                    ...........

00000205 <port_to_input_PGM>:
     205:	00 00 00 00 23 00 26 00 29 00 2c 00                 ....#.&.).,.

00000211 <port_to_output_PGM>:
     211:	00 00 00 00 25 00 28 00 2b 00 2e 00                 ....%.(.+...

0000021d <port_to_mode_PGM>:
     21d:	00 00 00 00 24 00 27 00 2a 00 2d 00 00              ....$.'.*.-..

0000022a <__ctors_start>:
__ctors_start():
     22a:	6a 0c       	add	r6, r10
     22c:	48 0f       	add	r20, r24
     22e:	83 13       	cpse	r24, r19

00000230 <__ctors_end>:
__dtors_start():
     230:	9d 0f       	add	r25, r29

00000232 <__dtors_end>:
__dtors_end():
../../../../crt1/gcrt1.S:230
     232:	11 24       	eor	r1, r1
../../../../crt1/gcrt1.S:231
     234:	1f be       	out	0x3f, r1	; 63
../../../../crt1/gcrt1.S:232
     236:	cf ef       	ldi	r28, 0xFF	; 255
../../../../crt1/gcrt1.S:241
     238:	d8 e0       	ldi	r29, 0x08	; 8
../../../../crt1/gcrt1.S:242
     23a:	de bf       	out	0x3e, r29	; 62
../../../../crt1/gcrt1.S:244
     23c:	cd bf       	out	0x3d, r28	; 61

0000023e <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
     23e:	12 e0       	ldi	r17, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
     240:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
     242:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
     244:	e0 e8       	ldi	r30, 0x80	; 128
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
     246:	f7 e3       	ldi	r31, 0x37	; 55
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
     248:	02 c0       	rjmp	.+4      	; 0x24e <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
     24a:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
     24c:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
     24e:	ac 37       	cpi	r26, 0x7C	; 124
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
     250:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
     252:	d9 f7       	brne	.-10     	; 0x24a <__do_copy_data+0xc>

00000254 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     254:	23 e0       	ldi	r18, 0x03	; 3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     256:	ac e7       	ldi	r26, 0x7C	; 124
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     258:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     25a:	01 c0       	rjmp	.+2      	; 0x25e <.do_clear_bss_start>

0000025c <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     25c:	1d 92       	st	X+, r1

0000025e <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     25e:	a8 3e       	cpi	r26, 0xE8	; 232
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     260:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     262:	e1 f7       	brne	.-8      	; 0x25c <.do_clear_bss_loop>

00000264 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     264:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     266:	c8 e1       	ldi	r28, 0x18	; 24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     268:	d1 e0       	ldi	r29, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     26a:	04 c0       	rjmp	.+8      	; 0x274 <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     26c:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     26e:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     270:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     274:	c5 31       	cpi	r28, 0x15	; 21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     276:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     278:	c9 f7       	brne	.-14     	; 0x26c <__do_global_ctors+0x8>
../../../../crt1/gcrt1.S:314
     27a:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <main>
../../../../crt1/gcrt1.S:315
     27e:	0c 94 b3 1b 	jmp	0x3766	; 0x3766 <__do_global_dtors>

00000282 <__bad_interrupt>:
__vector_38():
../../../../crt1/gcrt1.S:209
     282:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000286 <Back()>:
_Z4Backv():
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:565
    lcd.clear();
    sttButton = 0;
  }
}
//Kiem tra thoat chuong trinh   0 là vào, 1 là ra.
char Back() {
     286:	0f 93       	push	r16
     288:	1f 93       	push	r17
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:566
  if (digitalRead(enter) == 0) {
     28a:	8d e0       	ldi	r24, 0x0D	; 13
     28c:	0e 94 88 17 	call	0x2f10	; 0x2f10 <digitalRead>
     290:	89 2b       	or	r24, r25
     292:	81 f5       	brne	.+96     	; 0x2f4 <Back()+0x6e>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:567
    delay(100);
     294:	64 e6       	ldi	r22, 0x64	; 100
     296:	70 e0       	ldi	r23, 0x00	; 0
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	0e 94 33 16 	call	0x2c66	; 0x2c66 <delay>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:568
    if (digitalRead(enter) == 0) {
     2a0:	8d e0       	ldi	r24, 0x0D	; 13
     2a2:	0e 94 88 17 	call	0x2f10	; 0x2f10 <digitalRead>
     2a6:	89 2b       	or	r24, r25
     2a8:	29 f5       	brne	.+74     	; 0x2f4 <Back()+0x6e>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:569
      timeBack = millis();
     2aa:	0e 94 02 16 	call	0x2c04	; 0x2c04 <millis>
     2ae:	60 93 81 02 	sts	0x0281, r22	; 0x800281 <timeBack>
     2b2:	70 93 82 02 	sts	0x0282, r23	; 0x800282 <timeBack+0x1>
     2b6:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <timeBack+0x2>
     2ba:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <timeBack+0x3>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:570
      while (digitalRead(enter) == 0)
     2be:	8d e0       	ldi	r24, 0x0D	; 13
     2c0:	0e 94 88 17 	call	0x2f10	; 0x2f10 <digitalRead>
     2c4:	89 2b       	or	r24, r25
     2c6:	d9 f3       	breq	.-10     	; 0x2be <Back()+0x38>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:572
        ;
      if ((unsigned long)millis() - timeBack > 100) {
     2c8:	0e 94 02 16 	call	0x2c04	; 0x2c04 <millis>
     2cc:	00 91 81 02 	lds	r16, 0x0281	; 0x800281 <timeBack>
     2d0:	10 91 82 02 	lds	r17, 0x0282	; 0x800282 <timeBack+0x1>
     2d4:	20 91 83 02 	lds	r18, 0x0283	; 0x800283 <timeBack+0x2>
     2d8:	30 91 84 02 	lds	r19, 0x0284	; 0x800284 <timeBack+0x3>
     2dc:	60 1b       	sub	r22, r16
     2de:	71 0b       	sbc	r23, r17
     2e0:	82 0b       	sbc	r24, r18
     2e2:	93 0b       	sbc	r25, r19
     2e4:	65 36       	cpi	r22, 0x65	; 101
     2e6:	71 05       	cpc	r23, r1
     2e8:	81 05       	cpc	r24, r1
     2ea:	91 05       	cpc	r25, r1
     2ec:	18 f0       	brcs	.+6      	; 0x2f4 <Back()+0x6e>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:573
        sttButton = 1;
     2ee:	81 e0       	ldi	r24, 0x01	; 1
     2f0:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <sttButton>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:578
      }
    }
  }
  return sttButton;
}
     2f4:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <sttButton>
     2f8:	1f 91       	pop	r17
     2fa:	0f 91       	pop	r16
     2fc:	08 95       	ret

000002fe <displayMain()>:
_Z11displayMainv():
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:135
        SetTanSo();
        break;
      }
  }
}
void displayMain() {
     2fe:	0f 93       	push	r16
     300:	1f 93       	push	r17
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:136
  if (vitri > 0 && vitri < 4) {
     302:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <vitri>
     306:	81 50       	subi	r24, 0x01	; 1
     308:	83 30       	cpi	r24, 0x03	; 3
     30a:	08 f0       	brcs	.+2      	; 0x30e <displayMain()+0x10>
     30c:	4d c0       	rjmp	.+154    	; 0x3a8 <displayMain()+0xaa>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:137
    if (((unsigned long)millis() - timeMillis) > 200) {
     30e:	0e 94 02 16 	call	0x2c04	; 0x2c04 <millis>
     312:	00 91 92 02 	lds	r16, 0x0292	; 0x800292 <timeMillis>
     316:	10 91 93 02 	lds	r17, 0x0293	; 0x800293 <timeMillis+0x1>
     31a:	20 91 94 02 	lds	r18, 0x0294	; 0x800294 <timeMillis+0x2>
     31e:	30 91 95 02 	lds	r19, 0x0295	; 0x800295 <timeMillis+0x3>
     322:	60 1b       	sub	r22, r16
     324:	71 0b       	sbc	r23, r17
     326:	82 0b       	sbc	r24, r18
     328:	93 0b       	sbc	r25, r19
     32a:	69 3c       	cpi	r22, 0xC9	; 201
     32c:	71 05       	cpc	r23, r1
     32e:	81 05       	cpc	r24, r1
     330:	91 05       	cpc	r25, r1
     332:	d0 f1       	brcs	.+116    	; 0x3a8 <displayMain()+0xaa>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:138
      lcd.setCursor(5, 0);
     334:	40 e0       	ldi	r20, 0x00	; 0
     336:	65 e0       	ldi	r22, 0x05	; 5
     338:	81 eb       	ldi	r24, 0xB1	; 177
     33a:	92 e0       	ldi	r25, 0x02	; 2
     33c:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:139
      lcd.print("Slect Mode");
     340:	6c e1       	ldi	r22, 0x1C	; 28
     342:	71 e0       	ldi	r23, 0x01	; 1
     344:	81 eb       	ldi	r24, 0xB1	; 177
     346:	92 e0       	ldi	r25, 0x02	; 2
     348:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <Print::print(char const*)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:140
      lcd.setCursor(0, 1);
     34c:	41 e0       	ldi	r20, 0x01	; 1
     34e:	60 e0       	ldi	r22, 0x00	; 0
     350:	81 eb       	ldi	r24, 0xB1	; 177
     352:	92 e0       	ldi	r25, 0x02	; 2
     354:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:141
      lcd.print("1: Display Control");
     358:	67 e2       	ldi	r22, 0x27	; 39
     35a:	71 e0       	ldi	r23, 0x01	; 1
     35c:	81 eb       	ldi	r24, 0xB1	; 177
     35e:	92 e0       	ldi	r25, 0x02	; 2
     360:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <Print::print(char const*)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:142
      lcd.setCursor(0, 2);
     364:	42 e0       	ldi	r20, 0x02	; 2
     366:	60 e0       	ldi	r22, 0x00	; 0
     368:	81 eb       	ldi	r24, 0xB1	; 177
     36a:	92 e0       	ldi	r25, 0x02	; 2
     36c:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:143
      lcd.print("2: Control VR");
     370:	6a e3       	ldi	r22, 0x3A	; 58
     372:	71 e0       	ldi	r23, 0x01	; 1
     374:	81 eb       	ldi	r24, 0xB1	; 177
     376:	92 e0       	ldi	r25, 0x02	; 2
     378:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <Print::print(char const*)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:144
      lcd.setCursor(0, 3);
     37c:	43 e0       	ldi	r20, 0x03	; 3
     37e:	60 e0       	ldi	r22, 0x00	; 0
     380:	81 eb       	ldi	r24, 0xB1	; 177
     382:	92 e0       	ldi	r25, 0x02	; 2
     384:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:145
      lcd.print("3: Time Change");
     388:	6b e6       	ldi	r22, 0x6B	; 107
     38a:	71 e0       	ldi	r23, 0x01	; 1
     38c:	81 eb       	ldi	r24, 0xB1	; 177
     38e:	92 e0       	ldi	r25, 0x02	; 2
     390:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <Print::print(char const*)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:146
      timeMillis = millis();
     394:	0e 94 02 16 	call	0x2c04	; 0x2c04 <millis>
     398:	60 93 92 02 	sts	0x0292, r22	; 0x800292 <timeMillis>
     39c:	70 93 93 02 	sts	0x0293, r23	; 0x800293 <timeMillis+0x1>
     3a0:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <timeMillis+0x2>
     3a4:	90 93 95 02 	sts	0x0295, r25	; 0x800295 <timeMillis+0x3>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:149
    }
  }
  if (vitri > 3) {
     3a8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <vitri>
     3ac:	84 30       	cpi	r24, 0x04	; 4
     3ae:	08 f4       	brcc	.+2      	; 0x3b2 <displayMain()+0xb4>
     3b0:	41 c0       	rjmp	.+130    	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:150
    if (((unsigned long)millis() - timeMillis) > 200) {
     3b2:	0e 94 02 16 	call	0x2c04	; 0x2c04 <millis>
     3b6:	00 91 92 02 	lds	r16, 0x0292	; 0x800292 <timeMillis>
     3ba:	10 91 93 02 	lds	r17, 0x0293	; 0x800293 <timeMillis+0x1>
     3be:	20 91 94 02 	lds	r18, 0x0294	; 0x800294 <timeMillis+0x2>
     3c2:	30 91 95 02 	lds	r19, 0x0295	; 0x800295 <timeMillis+0x3>
     3c6:	60 1b       	sub	r22, r16
     3c8:	71 0b       	sbc	r23, r17
     3ca:	82 0b       	sbc	r24, r18
     3cc:	93 0b       	sbc	r25, r19
     3ce:	69 3c       	cpi	r22, 0xC9	; 201
     3d0:	71 05       	cpc	r23, r1
     3d2:	81 05       	cpc	r24, r1
     3d4:	91 05       	cpc	r25, r1
     3d6:	70 f1       	brcs	.+92     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:151
      lcd.setCursor(5, 0);
     3d8:	40 e0       	ldi	r20, 0x00	; 0
     3da:	65 e0       	ldi	r22, 0x05	; 5
     3dc:	81 eb       	ldi	r24, 0xB1	; 177
     3de:	92 e0       	ldi	r25, 0x02	; 2
     3e0:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:152
      lcd.print("Slect Mode");
     3e4:	6c e1       	ldi	r22, 0x1C	; 28
     3e6:	71 e0       	ldi	r23, 0x01	; 1
     3e8:	81 eb       	ldi	r24, 0xB1	; 177
     3ea:	92 e0       	ldi	r25, 0x02	; 2
     3ec:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <Print::print(char const*)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:153
      lcd.setCursor(0, 1);
     3f0:	41 e0       	ldi	r20, 0x01	; 1
     3f2:	60 e0       	ldi	r22, 0x00	; 0
     3f4:	81 eb       	ldi	r24, 0xB1	; 177
     3f6:	92 e0       	ldi	r25, 0x02	; 2
     3f8:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:154
      lcd.print("4: Motor Driver");
     3fc:	68 e4       	ldi	r22, 0x48	; 72
     3fe:	71 e0       	ldi	r23, 0x01	; 1
     400:	81 eb       	ldi	r24, 0xB1	; 177
     402:	92 e0       	ldi	r25, 0x02	; 2
     404:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <Print::print(char const*)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:155
      lcd.setCursor(0, 2);
     408:	42 e0       	ldi	r20, 0x02	; 2
     40a:	60 e0       	ldi	r22, 0x00	; 0
     40c:	81 eb       	ldi	r24, 0xB1	; 177
     40e:	92 e0       	ldi	r25, 0x02	; 2
     410:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:156
      lcd.print("5: Set Freq");
     414:	68 e5       	ldi	r22, 0x58	; 88
     416:	71 e0       	ldi	r23, 0x01	; 1
     418:	81 eb       	ldi	r24, 0xB1	; 177
     41a:	92 e0       	ldi	r25, 0x02	; 2
     41c:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <Print::print(char const*)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:157
      timeMillis = millis();
     420:	0e 94 02 16 	call	0x2c04	; 0x2c04 <millis>
     424:	60 93 92 02 	sts	0x0292, r22	; 0x800292 <timeMillis>
     428:	70 93 93 02 	sts	0x0293, r23	; 0x800293 <timeMillis+0x1>
     42c:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <timeMillis+0x2>
     430:	90 93 95 02 	sts	0x0295, r25	; 0x800295 <timeMillis+0x3>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:161
    }
  }

  if (digitalRead(up) == 0) {
     434:	88 e0       	ldi	r24, 0x08	; 8
     436:	0e 94 88 17 	call	0x2f10	; 0x2f10 <digitalRead>
     43a:	89 2b       	or	r24, r25
     43c:	99 f5       	brne	.+102    	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:162
    delay(100);
     43e:	64 e6       	ldi	r22, 0x64	; 100
     440:	70 e0       	ldi	r23, 0x00	; 0
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	0e 94 33 16 	call	0x2c66	; 0x2c66 <delay>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:163
    timeBack = millis();
     44a:	0e 94 02 16 	call	0x2c04	; 0x2c04 <millis>
     44e:	60 93 81 02 	sts	0x0281, r22	; 0x800281 <timeBack>
     452:	70 93 82 02 	sts	0x0282, r23	; 0x800282 <timeBack+0x1>
     456:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <timeBack+0x2>
     45a:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <timeBack+0x3>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:164
    while (digitalRead(up) == 0)
     45e:	88 e0       	ldi	r24, 0x08	; 8
     460:	0e 94 88 17 	call	0x2f10	; 0x2f10 <digitalRead>
     464:	89 2b       	or	r24, r25
     466:	d9 f3       	breq	.-10     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:166
      ;
    if ((unsigned long)millis() - timeBack > 100) {
     468:	0e 94 02 16 	call	0x2c04	; 0x2c04 <millis>
     46c:	00 91 81 02 	lds	r16, 0x0281	; 0x800281 <timeBack>
     470:	10 91 82 02 	lds	r17, 0x0282	; 0x800282 <timeBack+0x1>
     474:	20 91 83 02 	lds	r18, 0x0283	; 0x800283 <timeBack+0x2>
     478:	30 91 84 02 	lds	r19, 0x0284	; 0x800284 <timeBack+0x3>
     47c:	60 1b       	sub	r22, r16
     47e:	71 0b       	sbc	r23, r17
     480:	82 0b       	sbc	r24, r18
     482:	93 0b       	sbc	r25, r19
     484:	65 36       	cpi	r22, 0x65	; 101
     486:	71 05       	cpc	r23, r1
     488:	81 05       	cpc	r24, r1
     48a:	91 05       	cpc	r25, r1
     48c:	58 f0       	brcs	.+22     	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:167
      vitri--;
     48e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <vitri>
     492:	81 50       	subi	r24, 0x01	; 1
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:168
      if (vitri < 1) {
     494:	09 f4       	brne	.+2      	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
     496:	51 c0       	rjmp	.+162    	; 0x53a <__EEPROM_REGION_LENGTH__+0x13a>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:169
        vitri = 1;
     498:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <vitri>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:171
      }
      lcd.clear();
     49c:	81 eb       	ldi	r24, 0xB1	; 177
     49e:	92 e0       	ldi	r25, 0x02	; 2
     4a0:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <LiquidCrystal_I2C::clear()>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:174
    }
  }
  if (digitalRead(down) == 0) {
     4a4:	8c e0       	ldi	r24, 0x0C	; 12
     4a6:	0e 94 88 17 	call	0x2f10	; 0x2f10 <digitalRead>
     4aa:	89 2b       	or	r24, r25
     4ac:	69 f5       	brne	.+90     	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:175
    timeBack = millis();
     4ae:	0e 94 02 16 	call	0x2c04	; 0x2c04 <millis>
     4b2:	60 93 81 02 	sts	0x0281, r22	; 0x800281 <timeBack>
     4b6:	70 93 82 02 	sts	0x0282, r23	; 0x800282 <timeBack+0x1>
     4ba:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <timeBack+0x2>
     4be:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <timeBack+0x3>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:176
    while (digitalRead(down) == 0)
     4c2:	8c e0       	ldi	r24, 0x0C	; 12
     4c4:	0e 94 88 17 	call	0x2f10	; 0x2f10 <digitalRead>
     4c8:	89 2b       	or	r24, r25
     4ca:	d9 f3       	breq	.-10     	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:178
      ;
    if ((unsigned long)millis() - timeBack > 100) {
     4cc:	0e 94 02 16 	call	0x2c04	; 0x2c04 <millis>
     4d0:	00 91 81 02 	lds	r16, 0x0281	; 0x800281 <timeBack>
     4d4:	10 91 82 02 	lds	r17, 0x0282	; 0x800282 <timeBack+0x1>
     4d8:	20 91 83 02 	lds	r18, 0x0283	; 0x800283 <timeBack+0x2>
     4dc:	30 91 84 02 	lds	r19, 0x0284	; 0x800284 <timeBack+0x3>
     4e0:	60 1b       	sub	r22, r16
     4e2:	71 0b       	sbc	r23, r17
     4e4:	82 0b       	sbc	r24, r18
     4e6:	93 0b       	sbc	r25, r19
     4e8:	65 36       	cpi	r22, 0x65	; 101
     4ea:	71 05       	cpc	r23, r1
     4ec:	81 05       	cpc	r24, r1
     4ee:	91 05       	cpc	r25, r1
     4f0:	58 f0       	brcs	.+22     	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:179
      vitri++;
     4f2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <vitri>
     4f6:	8f 5f       	subi	r24, 0xFF	; 255
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:180
      if (vitri > 5) {
     4f8:	86 30       	cpi	r24, 0x06	; 6
     4fa:	08 f5       	brcc	.+66     	; 0x53e <__EEPROM_REGION_LENGTH__+0x13e>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:181
        vitri = 5;
     4fc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <vitri>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:183
      }
      lcd.clear();
     500:	81 eb       	ldi	r24, 0xB1	; 177
     502:	92 e0       	ldi	r25, 0x02	; 2
     504:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <LiquidCrystal_I2C::clear()>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:187
    }
  }

  switch (vitri) {
     508:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <vitri>
     50c:	83 30       	cpi	r24, 0x03	; 3
     50e:	61 f1       	breq	.+88     	; 0x568 <__EEPROM_REGION_LENGTH__+0x168>
     510:	c0 f4       	brcc	.+48     	; 0x542 <__EEPROM_REGION_LENGTH__+0x142>
     512:	81 30       	cpi	r24, 0x01	; 1
     514:	e1 f0       	breq	.+56     	; 0x54e <__EEPROM_REGION_LENGTH__+0x14e>
     516:	82 30       	cpi	r24, 0x02	; 2
     518:	c1 f0       	breq	.+48     	; 0x54a <__EEPROM_REGION_LENGTH__+0x14a>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:221
        lcd.print("*");
        break;
      }
  }

  if (Back() == 1) {
     51a:	0e 94 43 01 	call	0x286	; 0x286 <Back()>
     51e:	81 30       	cpi	r24, 0x01	; 1
     520:	29 f5       	brne	.+74     	; 0x56c <__EEPROM_REGION_LENGTH__+0x16c>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:222
    mode = vitri;
     522:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <vitri>
     526:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <mode>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:223
    sttButton = 0;
     52a:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <sttButton>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:224
    lcd.clear();
     52e:	81 eb       	ldi	r24, 0xB1	; 177
     530:	92 e0       	ldi	r25, 0x02	; 2
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:226
  }
}
     532:	1f 91       	pop	r17
     534:	0f 91       	pop	r16
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:224
  }

  if (Back() == 1) {
    mode = vitri;
    sttButton = 0;
    lcd.clear();
     536:	0c 94 18 0d 	jmp	0x1a30	; 0x1a30 <LiquidCrystal_I2C::clear()>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:169
    while (digitalRead(up) == 0)
      ;
    if ((unsigned long)millis() - timeBack > 100) {
      vitri--;
      if (vitri < 1) {
        vitri = 1;
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	ad cf       	rjmp	.-166    	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:181
    while (digitalRead(down) == 0)
      ;
    if ((unsigned long)millis() - timeBack > 100) {
      vitri++;
      if (vitri > 5) {
        vitri = 5;
     53e:	85 e0       	ldi	r24, 0x05	; 5
     540:	dd cf       	rjmp	.-70     	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:187
      }
      lcd.clear();
    }
  }

  switch (vitri) {
     542:	84 30       	cpi	r24, 0x04	; 4
     544:	21 f0       	breq	.+8      	; 0x54e <__EEPROM_REGION_LENGTH__+0x14e>
     546:	85 30       	cpi	r24, 0x05	; 5
     548:	41 f7       	brne	.-48     	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:197
        lcd.print("*");
        break;
      }
    case 2:
      {
        lcd.setCursor(19, 2);
     54a:	42 e0       	ldi	r20, 0x02	; 2
     54c:	01 c0       	rjmp	.+2      	; 0x550 <__EEPROM_REGION_LENGTH__+0x150>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:191

  switch (vitri) {
    case 1:
      {

        lcd.setCursor(19, 1);
     54e:	41 e0       	ldi	r20, 0x01	; 1
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:203
        lcd.print("*");
        break;
      }
    case 3:
      {
        lcd.setCursor(19, 3);
     550:	63 e1       	ldi	r22, 0x13	; 19
     552:	81 eb       	ldi	r24, 0xB1	; 177
     554:	92 e0       	ldi	r25, 0x02	; 2
     556:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:204
        lcd.print("*");
     55a:	64 e6       	ldi	r22, 0x64	; 100
     55c:	71 e0       	ldi	r23, 0x01	; 1
     55e:	81 eb       	ldi	r24, 0xB1	; 177
     560:	92 e0       	ldi	r25, 0x02	; 2
     562:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <Print::print(char const*)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:205
        break;
     566:	d9 cf       	rjmp	.-78     	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:203
        lcd.print("*");
        break;
      }
    case 3:
      {
        lcd.setCursor(19, 3);
     568:	43 e0       	ldi	r20, 0x03	; 3
     56a:	f2 cf       	rjmp	.-28     	; 0x550 <__EEPROM_REGION_LENGTH__+0x150>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:226
  if (Back() == 1) {
    mode = vitri;
    sttButton = 0;
    lcd.clear();
  }
}
     56c:	1f 91       	pop	r17
     56e:	0f 91       	pop	r16
     570:	08 95       	ret

00000572 <TGTangGiamToc()>:
_Z13TGTangGiamTocv():
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:448
      sttButton = 0;
    }
  }
}
//Mode 2: set thoi gian tang giam toc
void TGTangGiamToc() {
     572:	cf 92       	push	r12
     574:	df 92       	push	r13
     576:	ef 92       	push	r14
     578:	ff 92       	push	r15
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:449
  if (((unsigned long)millis() - timeMillis) > 200) {
     57a:	0e 94 02 16 	call	0x2c04	; 0x2c04 <millis>
     57e:	c0 90 92 02 	lds	r12, 0x0292	; 0x800292 <timeMillis>
     582:	d0 90 93 02 	lds	r13, 0x0293	; 0x800293 <timeMillis+0x1>
     586:	e0 90 94 02 	lds	r14, 0x0294	; 0x800294 <timeMillis+0x2>
     58a:	f0 90 95 02 	lds	r15, 0x0295	; 0x800295 <timeMillis+0x3>
     58e:	6c 19       	sub	r22, r12
     590:	7d 09       	sbc	r23, r13
     592:	8e 09       	sbc	r24, r14
     594:	9f 09       	sbc	r25, r15
     596:	69 3c       	cpi	r22, 0xC9	; 201
     598:	71 05       	cpc	r23, r1
     59a:	81 05       	cpc	r24, r1
     59c:	91 05       	cpc	r25, r1
     59e:	08 f4       	brcc	.+2      	; 0x5a2 <TGTangGiamToc()+0x30>
     5a0:	42 c0       	rjmp	.+132    	; 0x626 <TGTangGiamToc()+0xb4>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:450
    lcd.setCursor(1, 0);
     5a2:	40 e0       	ldi	r20, 0x00	; 0
     5a4:	61 e0       	ldi	r22, 0x01	; 1
     5a6:	81 eb       	ldi	r24, 0xB1	; 177
     5a8:	92 e0       	ldi	r25, 0x02	; 2
     5aa:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:451
    lcd.print("Mode 3: Time Change");
     5ae:	66 e6       	ldi	r22, 0x66	; 102
     5b0:	71 e0       	ldi	r23, 0x01	; 1
     5b2:	81 eb       	ldi	r24, 0xB1	; 177
     5b4:	92 e0       	ldi	r25, 0x02	; 2
     5b6:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <Print::print(char const*)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:452
    lcd.setCursor(1, 2);
     5ba:	42 e0       	ldi	r20, 0x02	; 2
     5bc:	61 e0       	ldi	r22, 0x01	; 1
     5be:	81 eb       	ldi	r24, 0xB1	; 177
     5c0:	92 e0       	ldi	r25, 0x02	; 2
     5c2:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:453
    lcd.print("Time:");
     5c6:	6a e7       	ldi	r22, 0x7A	; 122
     5c8:	71 e0       	ldi	r23, 0x01	; 1
     5ca:	81 eb       	ldi	r24, 0xB1	; 177
     5cc:	92 e0       	ldi	r25, 0x02	; 2
     5ce:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <Print::print(char const*)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:454
    lcd.setCursor(7, 2);
     5d2:	42 e0       	ldi	r20, 0x02	; 2
     5d4:	67 e0       	ldi	r22, 0x07	; 7
     5d6:	81 eb       	ldi	r24, 0xB1	; 177
     5d8:	92 e0       	ldi	r25, 0x02	; 2
     5da:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:455
    lcd.print(timeTGT);
     5de:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <timeTGT>
     5e2:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <timeTGT+0x1>
     5e6:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <timeTGT+0x2>
     5ea:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <timeTGT+0x3>
     5ee:	22 e0       	ldi	r18, 0x02	; 2
     5f0:	30 e0       	ldi	r19, 0x00	; 0
     5f2:	81 eb       	ldi	r24, 0xB1	; 177
     5f4:	92 e0       	ldi	r25, 0x02	; 2
     5f6:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <Print::print(double, int)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:456
    lcd.setCursor(13, 2);
     5fa:	42 e0       	ldi	r20, 0x02	; 2
     5fc:	6d e0       	ldi	r22, 0x0D	; 13
     5fe:	81 eb       	ldi	r24, 0xB1	; 177
     600:	92 e0       	ldi	r25, 0x02	; 2
     602:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:457
    lcd.print("s");
     606:	60 e8       	ldi	r22, 0x80	; 128
     608:	71 e0       	ldi	r23, 0x01	; 1
     60a:	81 eb       	ldi	r24, 0xB1	; 177
     60c:	92 e0       	ldi	r25, 0x02	; 2
     60e:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <Print::print(char const*)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:459

    timeMillis = millis();
     612:	0e 94 02 16 	call	0x2c04	; 0x2c04 <millis>
     616:	60 93 92 02 	sts	0x0292, r22	; 0x800292 <timeMillis>
     61a:	70 93 93 02 	sts	0x0293, r23	; 0x800293 <timeMillis+0x1>
     61e:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <timeMillis+0x2>
     622:	90 93 95 02 	sts	0x0295, r25	; 0x800295 <timeMillis+0x3>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:461
  }
  if (digitalRead(up) == 0) {
     626:	88 e0       	ldi	r24, 0x08	; 8
     628:	0e 94 88 17 	call	0x2f10	; 0x2f10 <digitalRead>
     62c:	89 2b       	or	r24, r25
     62e:	61 f5       	brne	.+88     	; 0x688 <TGTangGiamToc()+0x116>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:462
    delay(500);
     630:	64 ef       	ldi	r22, 0xF4	; 244
     632:	71 e0       	ldi	r23, 0x01	; 1
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	0e 94 33 16 	call	0x2c66	; 0x2c66 <delay>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:463
    if (digitalRead(up) == 0) {
     63c:	88 e0       	ldi	r24, 0x08	; 8
     63e:	0e 94 88 17 	call	0x2f10	; 0x2f10 <digitalRead>
     642:	89 2b       	or	r24, r25
     644:	09 f5       	brne	.+66     	; 0x688 <TGTangGiamToc()+0x116>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:464
      timeTGT += 0.1;
     646:	2d ec       	ldi	r18, 0xCD	; 205
     648:	3c ec       	ldi	r19, 0xCC	; 204
     64a:	4c ec       	ldi	r20, 0xCC	; 204
     64c:	5d e3       	ldi	r21, 0x3D	; 61
     64e:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <timeTGT>
     652:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <timeTGT+0x1>
     656:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <timeTGT+0x2>
     65a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <timeTGT+0x3>
     65e:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__addsf3>
     662:	6b 01       	movw	r12, r22
     664:	7c 01       	movw	r14, r24
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:465
      if (timeTGT > 20) {
     666:	20 e0       	ldi	r18, 0x00	; 0
     668:	30 e0       	ldi	r19, 0x00	; 0
     66a:	40 ea       	ldi	r20, 0xA0	; 160
     66c:	51 e4       	ldi	r21, 0x41	; 65
     66e:	0e 94 7e 19 	call	0x32fc	; 0x32fc <__gesf2>
     672:	18 16       	cp	r1, r24
     674:	0c f4       	brge	.+2      	; 0x678 <TGTangGiamToc()+0x106>
     676:	49 c0       	rjmp	.+146    	; 0x70a <TGTangGiamToc()+0x198>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:464
    timeMillis = millis();
  }
  if (digitalRead(up) == 0) {
    delay(500);
    if (digitalRead(up) == 0) {
      timeTGT += 0.1;
     678:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <timeTGT>
     67c:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <timeTGT+0x1>
     680:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <timeTGT+0x2>
     684:	f0 92 09 01 	sts	0x0109, r15	; 0x800109 <timeTGT+0x3>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:471
        timeTGT = 20;
      }
      //     lcd.clear();
    }
  }
  if (digitalRead(down) == 0) {
     688:	8c e0       	ldi	r24, 0x0C	; 12
     68a:	0e 94 88 17 	call	0x2f10	; 0x2f10 <digitalRead>
     68e:	89 2b       	or	r24, r25
     690:	59 f5       	brne	.+86     	; 0x6e8 <TGTangGiamToc()+0x176>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:472
    delay(500);
     692:	64 ef       	ldi	r22, 0xF4	; 244
     694:	71 e0       	ldi	r23, 0x01	; 1
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	0e 94 33 16 	call	0x2c66	; 0x2c66 <delay>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:473
    if (digitalRead(down) == 0) {
     69e:	8c e0       	ldi	r24, 0x0C	; 12
     6a0:	0e 94 88 17 	call	0x2f10	; 0x2f10 <digitalRead>
     6a4:	89 2b       	or	r24, r25
     6a6:	01 f5       	brne	.+64     	; 0x6e8 <TGTangGiamToc()+0x176>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:474
      timeTGT -= 0.1;
     6a8:	2d ec       	ldi	r18, 0xCD	; 205
     6aa:	3c ec       	ldi	r19, 0xCC	; 204
     6ac:	4c ec       	ldi	r20, 0xCC	; 204
     6ae:	5d e3       	ldi	r21, 0x3D	; 61
     6b0:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <timeTGT>
     6b4:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <timeTGT+0x1>
     6b8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <timeTGT+0x2>
     6bc:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <timeTGT+0x3>
     6c0:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <__subsf3>
     6c4:	6b 01       	movw	r12, r22
     6c6:	7c 01       	movw	r14, r24
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:475
      if (timeTGT < 1) {
     6c8:	20 e0       	ldi	r18, 0x00	; 0
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	40 e8       	ldi	r20, 0x80	; 128
     6ce:	5f e3       	ldi	r21, 0x3F	; 63
     6d0:	0e 94 1f 18 	call	0x303e	; 0x303e <__cmpsf2>
     6d4:	87 fd       	sbrc	r24, 7
     6d6:	26 c0       	rjmp	.+76     	; 0x724 <TGTangGiamToc()+0x1b2>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:474
    }
  }
  if (digitalRead(down) == 0) {
    delay(500);
    if (digitalRead(down) == 0) {
      timeTGT -= 0.1;
     6d8:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <timeTGT>
     6dc:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <timeTGT+0x1>
     6e0:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <timeTGT+0x2>
     6e4:	f0 92 09 01 	sts	0x0109, r15	; 0x800109 <timeTGT+0x3>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:481
        timeTGT = 1;
      }
      //    lcd.clear();
    }
  }
  if (Back() == 1) {
     6e8:	0e 94 43 01 	call	0x286	; 0x286 <Back()>
     6ec:	81 30       	cpi	r24, 0x01	; 1
     6ee:	41 f4       	brne	.+16     	; 0x700 <TGTangGiamToc()+0x18e>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:482
    mode = 0;
     6f0:	10 92 8f 02 	sts	0x028F, r1	; 0x80028f <mode>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:483
    lcd.clear();
     6f4:	81 eb       	ldi	r24, 0xB1	; 177
     6f6:	92 e0       	ldi	r25, 0x02	; 2
     6f8:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <LiquidCrystal_I2C::clear()>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:484
    sttButton = 0;
     6fc:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <sttButton>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:486
  }
}
     700:	ff 90       	pop	r15
     702:	ef 90       	pop	r14
     704:	df 90       	pop	r13
     706:	cf 90       	pop	r12
     708:	08 95       	ret
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:466
  if (digitalRead(up) == 0) {
    delay(500);
    if (digitalRead(up) == 0) {
      timeTGT += 0.1;
      if (timeTGT > 20) {
        timeTGT = 20;
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	a0 ea       	ldi	r26, 0xA0	; 160
     710:	b1 e4       	ldi	r27, 0x41	; 65
     712:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <timeTGT>
     716:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <timeTGT+0x1>
     71a:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <timeTGT+0x2>
     71e:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <timeTGT+0x3>
     722:	b2 cf       	rjmp	.-156    	; 0x688 <TGTangGiamToc()+0x116>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:476
  if (digitalRead(down) == 0) {
    delay(500);
    if (digitalRead(down) == 0) {
      timeTGT -= 0.1;
      if (timeTGT < 1) {
        timeTGT = 1;
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	a0 e8       	ldi	r26, 0x80	; 128
     72a:	bf e3       	ldi	r27, 0x3F	; 63
     72c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <timeTGT>
     730:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <timeTGT+0x1>
     734:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <timeTGT+0x2>
     738:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <timeTGT+0x3>
     73c:	d5 cf       	rjmp	.-86     	; 0x6e8 <TGTangGiamToc()+0x176>

0000073e <ThuanNghich()>:
_Z11ThuanNghichv():
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:488
    lcd.clear();
    sttButton = 0;
  }
}
//Mode 3: set chieu quay thuan nghich cua dong co
void ThuanNghich() {
     73e:	0f 93       	push	r16
     740:	1f 93       	push	r17
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:489
  if (((unsigned long)millis() - timeMillis) > 100) {
     742:	0e 94 02 16 	call	0x2c04	; 0x2c04 <millis>
     746:	00 91 92 02 	lds	r16, 0x0292	; 0x800292 <timeMillis>
     74a:	10 91 93 02 	lds	r17, 0x0293	; 0x800293 <timeMillis+0x1>
     74e:	20 91 94 02 	lds	r18, 0x0294	; 0x800294 <timeMillis+0x2>
     752:	30 91 95 02 	lds	r19, 0x0295	; 0x800295 <timeMillis+0x3>
     756:	60 1b       	sub	r22, r16
     758:	71 0b       	sbc	r23, r17
     75a:	82 0b       	sbc	r24, r18
     75c:	93 0b       	sbc	r25, r19
     75e:	65 36       	cpi	r22, 0x65	; 101
     760:	71 05       	cpc	r23, r1
     762:	81 05       	cpc	r24, r1
     764:	91 05       	cpc	r25, r1
     766:	b0 f1       	brcs	.+108    	; 0x7d4 <ThuanNghich()+0x96>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:490
    lcd.setCursor(0, 0);
     768:	40 e0       	ldi	r20, 0x00	; 0
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	81 eb       	ldi	r24, 0xB1	; 177
     76e:	92 e0       	ldi	r25, 0x02	; 2
     770:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:491
    lcd.print("Mode 4: MOTOR DRIVER");
     774:	62 e8       	ldi	r22, 0x82	; 130
     776:	71 e0       	ldi	r23, 0x01	; 1
     778:	81 eb       	ldi	r24, 0xB1	; 177
     77a:	92 e0       	ldi	r25, 0x02	; 2
     77c:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <Print::print(char const*)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:492
    lcd.setCursor(1, 2);
     780:	42 e0       	ldi	r20, 0x02	; 2
     782:	61 e0       	ldi	r22, 0x01	; 1
     784:	81 eb       	ldi	r24, 0xB1	; 177
     786:	92 e0       	ldi	r25, 0x02	; 2
     788:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:493
    lcd.print("Chieu quay:");
     78c:	67 e9       	ldi	r22, 0x97	; 151
     78e:	71 e0       	ldi	r23, 0x01	; 1
     790:	81 eb       	ldi	r24, 0xB1	; 177
     792:	92 e0       	ldi	r25, 0x02	; 2
     794:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <Print::print(char const*)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:494
    lcd.setCursor(13, 2);
     798:	42 e0       	ldi	r20, 0x02	; 2
     79a:	6d e0       	ldi	r22, 0x0D	; 13
     79c:	81 eb       	ldi	r24, 0xB1	; 177
     79e:	92 e0       	ldi	r25, 0x02	; 2
     7a0:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:495
    if (bitThuanNghich == 0) {
     7a4:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <bitThuanNghich>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:496
      lcd.print("Thuan");
     7a8:	63 ea       	ldi	r22, 0xA3	; 163
     7aa:	71 e0       	ldi	r23, 0x01	; 1
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:495
    lcd.setCursor(0, 0);
    lcd.print("Mode 4: MOTOR DRIVER");
    lcd.setCursor(1, 2);
    lcd.print("Chieu quay:");
    lcd.setCursor(13, 2);
    if (bitThuanNghich == 0) {
     7ac:	88 23       	and	r24, r24
     7ae:	21 f0       	breq	.+8      	; 0x7b8 <ThuanNghich()+0x7a>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:497
      lcd.print("Thuan");
    } else if (bitThuanNghich == 1) {
     7b0:	81 30       	cpi	r24, 0x01	; 1
     7b2:	31 f4       	brne	.+12     	; 0x7c0 <ThuanNghich()+0x82>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:498
      lcd.print("Nghich");
     7b4:	69 ea       	ldi	r22, 0xA9	; 169
     7b6:	71 e0       	ldi	r23, 0x01	; 1
     7b8:	81 eb       	ldi	r24, 0xB1	; 177
     7ba:	92 e0       	ldi	r25, 0x02	; 2
     7bc:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <Print::print(char const*)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:500
    }
    timeMillis = millis();
     7c0:	0e 94 02 16 	call	0x2c04	; 0x2c04 <millis>
     7c4:	60 93 92 02 	sts	0x0292, r22	; 0x800292 <timeMillis>
     7c8:	70 93 93 02 	sts	0x0293, r23	; 0x800293 <timeMillis+0x1>
     7cc:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <timeMillis+0x2>
     7d0:	90 93 95 02 	sts	0x0295, r25	; 0x800295 <timeMillis+0x3>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:503
  }

  if ((digitalRead(up) == 0) && (bitChayDung == 0))  //nut up duoc nhan va dong co dung  => set quay thuan
     7d4:	88 e0       	ldi	r24, 0x08	; 8
     7d6:	0e 94 88 17 	call	0x2f10	; 0x2f10 <digitalRead>
     7da:	89 2b       	or	r24, r25
     7dc:	61 f5       	brne	.+88     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:503 (discriminator 1)
     7de:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <bitChayDung>
     7e2:	81 11       	cpse	r24, r1
     7e4:	28 c0       	rjmp	.+80     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:505
  {
    timeBack = millis();
     7e6:	0e 94 02 16 	call	0x2c04	; 0x2c04 <millis>
     7ea:	60 93 81 02 	sts	0x0281, r22	; 0x800281 <timeBack>
     7ee:	70 93 82 02 	sts	0x0282, r23	; 0x800282 <timeBack+0x1>
     7f2:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <timeBack+0x2>
     7f6:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <timeBack+0x3>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:506
    while (digitalRead(up) == 0)
     7fa:	88 e0       	ldi	r24, 0x08	; 8
     7fc:	0e 94 88 17 	call	0x2f10	; 0x2f10 <digitalRead>
     800:	89 2b       	or	r24, r25
     802:	d9 f3       	breq	.-10     	; 0x7fa <ThuanNghich()+0xbc>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:508
      ;
    if ((unsigned long)millis() - timeBack > 200) {
     804:	0e 94 02 16 	call	0x2c04	; 0x2c04 <millis>
     808:	00 91 81 02 	lds	r16, 0x0281	; 0x800281 <timeBack>
     80c:	10 91 82 02 	lds	r17, 0x0282	; 0x800282 <timeBack+0x1>
     810:	20 91 83 02 	lds	r18, 0x0283	; 0x800283 <timeBack+0x2>
     814:	30 91 84 02 	lds	r19, 0x0284	; 0x800284 <timeBack+0x3>
     818:	60 1b       	sub	r22, r16
     81a:	71 0b       	sbc	r23, r17
     81c:	82 0b       	sbc	r24, r18
     81e:	93 0b       	sbc	r25, r19
     820:	69 3c       	cpi	r22, 0xC9	; 201
     822:	71 05       	cpc	r23, r1
     824:	81 05       	cpc	r24, r1
     826:	91 05       	cpc	r25, r1
     828:	30 f0       	brcs	.+12     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:509
      bitThuanNghich = 0;
     82a:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <bitThuanNghich>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:510
      lcd.clear();
     82e:	81 eb       	ldi	r24, 0xB1	; 177
     830:	92 e0       	ldi	r25, 0x02	; 2
     832:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <LiquidCrystal_I2C::clear()>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:513
    }
  }
  if ((digitalRead(down) == 0) && (bitChayDung == 0))  // nut down duoc nhan va dong co dung => set quay nghich
     836:	8c e0       	ldi	r24, 0x0C	; 12
     838:	0e 94 88 17 	call	0x2f10	; 0x2f10 <digitalRead>
     83c:	89 2b       	or	r24, r25
     83e:	69 f5       	brne	.+90     	; 0x89a <__DATA_REGION_LENGTH__+0x9a>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:513 (discriminator 1)
     840:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <bitChayDung>
     844:	81 11       	cpse	r24, r1
     846:	29 c0       	rjmp	.+82     	; 0x89a <__DATA_REGION_LENGTH__+0x9a>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:515
  {
    timeBack = millis();
     848:	0e 94 02 16 	call	0x2c04	; 0x2c04 <millis>
     84c:	60 93 81 02 	sts	0x0281, r22	; 0x800281 <timeBack>
     850:	70 93 82 02 	sts	0x0282, r23	; 0x800282 <timeBack+0x1>
     854:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <timeBack+0x2>
     858:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <timeBack+0x3>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:516
    while (digitalRead(down) == 0)
     85c:	8c e0       	ldi	r24, 0x0C	; 12
     85e:	0e 94 88 17 	call	0x2f10	; 0x2f10 <digitalRead>
     862:	89 2b       	or	r24, r25
     864:	d9 f3       	breq	.-10     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:518
      ;
    if ((unsigned long)millis() - timeBack > 200) {
     866:	0e 94 02 16 	call	0x2c04	; 0x2c04 <millis>
     86a:	00 91 81 02 	lds	r16, 0x0281	; 0x800281 <timeBack>
     86e:	10 91 82 02 	lds	r17, 0x0282	; 0x800282 <timeBack+0x1>
     872:	20 91 83 02 	lds	r18, 0x0283	; 0x800283 <timeBack+0x2>
     876:	30 91 84 02 	lds	r19, 0x0284	; 0x800284 <timeBack+0x3>
     87a:	60 1b       	sub	r22, r16
     87c:	71 0b       	sbc	r23, r17
     87e:	82 0b       	sbc	r24, r18
     880:	93 0b       	sbc	r25, r19
     882:	69 3c       	cpi	r22, 0xC9	; 201
     884:	71 05       	cpc	r23, r1
     886:	81 05       	cpc	r24, r1
     888:	91 05       	cpc	r25, r1
     88a:	38 f0       	brcs	.+14     	; 0x89a <__DATA_REGION_LENGTH__+0x9a>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:519
      bitThuanNghich = 1;
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <bitThuanNghich>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:520
      lcd.clear();
     892:	81 eb       	ldi	r24, 0xB1	; 177
     894:	92 e0       	ldi	r25, 0x02	; 2
     896:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <LiquidCrystal_I2C::clear()>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:523
    }
  }
  if (Back() == 1) {
     89a:	0e 94 43 01 	call	0x286	; 0x286 <Back()>
     89e:	81 30       	cpi	r24, 0x01	; 1
     8a0:	41 f4       	brne	.+16     	; 0x8b2 <__DATA_REGION_LENGTH__+0xb2>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:524
    mode = 0;
     8a2:	10 92 8f 02 	sts	0x028F, r1	; 0x80028f <mode>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:525
    lcd.clear();
     8a6:	81 eb       	ldi	r24, 0xB1	; 177
     8a8:	92 e0       	ldi	r25, 0x02	; 2
     8aa:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <LiquidCrystal_I2C::clear()>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:526
    sttButton = 0;
     8ae:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <sttButton>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:528
  }
}
     8b2:	1f 91       	pop	r17
     8b4:	0f 91       	pop	r16
     8b6:	08 95       	ret

000008b8 <SetTanSo()>:
_Z8SetTanSov():
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:530
//Mode 4: set tan so bang nut bam
void SetTanSo() {
     8b8:	cf 92       	push	r12
     8ba:	df 92       	push	r13
     8bc:	ef 92       	push	r14
     8be:	ff 92       	push	r15
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:531
  if (((unsigned long)millis() - timeMillis) > 100) {
     8c0:	0e 94 02 16 	call	0x2c04	; 0x2c04 <millis>
     8c4:	c0 90 92 02 	lds	r12, 0x0292	; 0x800292 <timeMillis>
     8c8:	d0 90 93 02 	lds	r13, 0x0293	; 0x800293 <timeMillis+0x1>
     8cc:	e0 90 94 02 	lds	r14, 0x0294	; 0x800294 <timeMillis+0x2>
     8d0:	f0 90 95 02 	lds	r15, 0x0295	; 0x800295 <timeMillis+0x3>
     8d4:	6c 19       	sub	r22, r12
     8d6:	7d 09       	sbc	r23, r13
     8d8:	8e 09       	sbc	r24, r14
     8da:	9f 09       	sbc	r25, r15
     8dc:	65 36       	cpi	r22, 0x65	; 101
     8de:	71 05       	cpc	r23, r1
     8e0:	81 05       	cpc	r24, r1
     8e2:	91 05       	cpc	r25, r1
     8e4:	b0 f1       	brcs	.+108    	; 0x952 <__stack+0x53>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:532
    lcd.setCursor(1, 0);
     8e6:	40 e0       	ldi	r20, 0x00	; 0
     8e8:	61 e0       	ldi	r22, 0x01	; 1
     8ea:	81 eb       	ldi	r24, 0xB1	; 177
     8ec:	92 e0       	ldi	r25, 0x02	; 2
     8ee:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:533
    lcd.print("Mode 5: Set Tan So");
     8f2:	60 eb       	ldi	r22, 0xB0	; 176
     8f4:	71 e0       	ldi	r23, 0x01	; 1
     8f6:	81 eb       	ldi	r24, 0xB1	; 177
     8f8:	92 e0       	ldi	r25, 0x02	; 2
     8fa:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <Print::print(char const*)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:534
    lcd.setCursor(2, 2);
     8fe:	42 e0       	ldi	r20, 0x02	; 2
     900:	62 e0       	ldi	r22, 0x02	; 2
     902:	81 eb       	ldi	r24, 0xB1	; 177
     904:	92 e0       	ldi	r25, 0x02	; 2
     906:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:535
    lcd.print("Set F:");
     90a:	63 ec       	ldi	r22, 0xC3	; 195
     90c:	71 e0       	ldi	r23, 0x01	; 1
     90e:	81 eb       	ldi	r24, 0xB1	; 177
     910:	92 e0       	ldi	r25, 0x02	; 2
     912:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <Print::print(char const*)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:536
    lcd.setCursor(9, 2);
     916:	42 e0       	ldi	r20, 0x02	; 2
     918:	69 e0       	ldi	r22, 0x09	; 9
     91a:	81 eb       	ldi	r24, 0xB1	; 177
     91c:	92 e0       	ldi	r25, 0x02	; 2
     91e:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:537
    lcd.print(f_set);
     922:	40 91 0b 01 	lds	r20, 0x010B	; 0x80010b <f_set>
     926:	50 91 0c 01 	lds	r21, 0x010C	; 0x80010c <f_set+0x1>
     92a:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <f_set+0x2>
     92e:	70 91 0e 01 	lds	r23, 0x010E	; 0x80010e <f_set+0x3>
     932:	22 e0       	ldi	r18, 0x02	; 2
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	81 eb       	ldi	r24, 0xB1	; 177
     938:	92 e0       	ldi	r25, 0x02	; 2
     93a:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <Print::print(double, int)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:538
    timeMillis = millis();
     93e:	0e 94 02 16 	call	0x2c04	; 0x2c04 <millis>
     942:	60 93 92 02 	sts	0x0292, r22	; 0x800292 <timeMillis>
     946:	70 93 93 02 	sts	0x0293, r23	; 0x800293 <timeMillis+0x1>
     94a:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <timeMillis+0x2>
     94e:	90 93 95 02 	sts	0x0295, r25	; 0x800295 <timeMillis+0x3>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:540
  }
  if (digitalRead(up) == 0) {
     952:	88 e0       	ldi	r24, 0x08	; 8
     954:	0e 94 88 17 	call	0x2f10	; 0x2f10 <digitalRead>
     958:	89 2b       	or	r24, r25
     95a:	61 f5       	brne	.+88     	; 0x9b4 <__stack+0xb5>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:541
    delay(500);
     95c:	64 ef       	ldi	r22, 0xF4	; 244
     95e:	71 e0       	ldi	r23, 0x01	; 1
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	0e 94 33 16 	call	0x2c66	; 0x2c66 <delay>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:542
    if (digitalRead(up) == 0) {
     968:	88 e0       	ldi	r24, 0x08	; 8
     96a:	0e 94 88 17 	call	0x2f10	; 0x2f10 <digitalRead>
     96e:	89 2b       	or	r24, r25
     970:	09 f5       	brne	.+66     	; 0x9b4 <__stack+0xb5>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:543
      f_set += 0.1;
     972:	2d ec       	ldi	r18, 0xCD	; 205
     974:	3c ec       	ldi	r19, 0xCC	; 204
     976:	4c ec       	ldi	r20, 0xCC	; 204
     978:	5d e3       	ldi	r21, 0x3D	; 61
     97a:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <f_set>
     97e:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <f_set+0x1>
     982:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <f_set+0x2>
     986:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <f_set+0x3>
     98a:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__addsf3>
     98e:	6b 01       	movw	r12, r22
     990:	7c 01       	movw	r14, r24
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:544
      if (f_set > 99.9) {
     992:	2d ec       	ldi	r18, 0xCD	; 205
     994:	3c ec       	ldi	r19, 0xCC	; 204
     996:	47 ec       	ldi	r20, 0xC7	; 199
     998:	52 e4       	ldi	r21, 0x42	; 66
     99a:	0e 94 7e 19 	call	0x32fc	; 0x32fc <__gesf2>
     99e:	18 16       	cp	r1, r24
     9a0:	0c f4       	brge	.+2      	; 0x9a4 <__stack+0xa5>
     9a2:	49 c0       	rjmp	.+146    	; 0xa36 <__stack+0x137>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:543
    timeMillis = millis();
  }
  if (digitalRead(up) == 0) {
    delay(500);
    if (digitalRead(up) == 0) {
      f_set += 0.1;
     9a4:	c0 92 0b 01 	sts	0x010B, r12	; 0x80010b <f_set>
     9a8:	d0 92 0c 01 	sts	0x010C, r13	; 0x80010c <f_set+0x1>
     9ac:	e0 92 0d 01 	sts	0x010D, r14	; 0x80010d <f_set+0x2>
     9b0:	f0 92 0e 01 	sts	0x010E, r15	; 0x80010e <f_set+0x3>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:549
      if (f_set > 99.9) {
        f_set = 99.9;
      }
    }
  }
  if (digitalRead(down) == 0) {
     9b4:	8c e0       	ldi	r24, 0x0C	; 12
     9b6:	0e 94 88 17 	call	0x2f10	; 0x2f10 <digitalRead>
     9ba:	89 2b       	or	r24, r25
     9bc:	59 f5       	brne	.+86     	; 0xa14 <__stack+0x115>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:550
    delay(500);
     9be:	64 ef       	ldi	r22, 0xF4	; 244
     9c0:	71 e0       	ldi	r23, 0x01	; 1
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	0e 94 33 16 	call	0x2c66	; 0x2c66 <delay>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:551
    if (digitalRead(down) == 0) {
     9ca:	8c e0       	ldi	r24, 0x0C	; 12
     9cc:	0e 94 88 17 	call	0x2f10	; 0x2f10 <digitalRead>
     9d0:	89 2b       	or	r24, r25
     9d2:	01 f5       	brne	.+64     	; 0xa14 <__stack+0x115>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:552
      f_set -= 0.1;
     9d4:	2d ec       	ldi	r18, 0xCD	; 205
     9d6:	3c ec       	ldi	r19, 0xCC	; 204
     9d8:	4c ec       	ldi	r20, 0xCC	; 204
     9da:	5d e3       	ldi	r21, 0x3D	; 61
     9dc:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <f_set>
     9e0:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <f_set+0x1>
     9e4:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <f_set+0x2>
     9e8:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <f_set+0x3>
     9ec:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <__subsf3>
     9f0:	6b 01       	movw	r12, r22
     9f2:	7c 01       	movw	r14, r24
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:553
      if (f_set < 30) {
     9f4:	20 e0       	ldi	r18, 0x00	; 0
     9f6:	30 e0       	ldi	r19, 0x00	; 0
     9f8:	40 ef       	ldi	r20, 0xF0	; 240
     9fa:	51 e4       	ldi	r21, 0x41	; 65
     9fc:	0e 94 1f 18 	call	0x303e	; 0x303e <__cmpsf2>
     a00:	87 fd       	sbrc	r24, 7
     a02:	26 c0       	rjmp	.+76     	; 0xa50 <__stack+0x151>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:552
    }
  }
  if (digitalRead(down) == 0) {
    delay(500);
    if (digitalRead(down) == 0) {
      f_set -= 0.1;
     a04:	c0 92 0b 01 	sts	0x010B, r12	; 0x80010b <f_set>
     a08:	d0 92 0c 01 	sts	0x010C, r13	; 0x80010c <f_set+0x1>
     a0c:	e0 92 0d 01 	sts	0x010D, r14	; 0x80010d <f_set+0x2>
     a10:	f0 92 0e 01 	sts	0x010E, r15	; 0x80010e <f_set+0x3>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:558
      if (f_set < 30) {
        f_set = 30;
      }
    }
  }
  if (Back() == 1) {
     a14:	0e 94 43 01 	call	0x286	; 0x286 <Back()>
     a18:	81 30       	cpi	r24, 0x01	; 1
     a1a:	41 f4       	brne	.+16     	; 0xa2c <__stack+0x12d>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:559
    mode = 0;
     a1c:	10 92 8f 02 	sts	0x028F, r1	; 0x80028f <mode>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:560
    lcd.clear();
     a20:	81 eb       	ldi	r24, 0xB1	; 177
     a22:	92 e0       	ldi	r25, 0x02	; 2
     a24:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <LiquidCrystal_I2C::clear()>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:561
    sttButton = 0;
     a28:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <sttButton>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:563
  }
}
     a2c:	ff 90       	pop	r15
     a2e:	ef 90       	pop	r14
     a30:	df 90       	pop	r13
     a32:	cf 90       	pop	r12
     a34:	08 95       	ret
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:545
  if (digitalRead(up) == 0) {
    delay(500);
    if (digitalRead(up) == 0) {
      f_set += 0.1;
      if (f_set > 99.9) {
        f_set = 99.9;
     a36:	8d ec       	ldi	r24, 0xCD	; 205
     a38:	9c ec       	ldi	r25, 0xCC	; 204
     a3a:	a7 ec       	ldi	r26, 0xC7	; 199
     a3c:	b2 e4       	ldi	r27, 0x42	; 66
     a3e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <f_set>
     a42:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <f_set+0x1>
     a46:	a0 93 0d 01 	sts	0x010D, r26	; 0x80010d <f_set+0x2>
     a4a:	b0 93 0e 01 	sts	0x010E, r27	; 0x80010e <f_set+0x3>
     a4e:	b2 cf       	rjmp	.-156    	; 0x9b4 <__stack+0xb5>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:554
  if (digitalRead(down) == 0) {
    delay(500);
    if (digitalRead(down) == 0) {
      f_set -= 0.1;
      if (f_set < 30) {
        f_set = 30;
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	a0 ef       	ldi	r26, 0xF0	; 240
     a56:	b1 e4       	ldi	r27, 0x41	; 65
     a58:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <f_set>
     a5c:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <f_set+0x1>
     a60:	a0 93 0d 01 	sts	0x010D, r26	; 0x80010d <f_set+0x2>
     a64:	b0 93 0e 01 	sts	0x010E, r27	; 0x80010e <f_set+0x3>
     a68:	d5 cf       	rjmp	.-86     	; 0xa14 <__stack+0x115>

00000a6a <changeFreq(float)>:
_Z10changeFreqf():
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:607
  OCR2A = 0;
  OCR2B = 0;
}
*/
// thay doi tan so
void changeFreq(float _freq) {
     a6a:	cf 93       	push	r28
     a6c:	df 93       	push	r29
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:608
  cbi(TIMSK2, TOIE2);  // disable timer2 overflow detect   - tắt ngắt timer2
     a6e:	c0 e7       	ldi	r28, 0x70	; 112
     a70:	d0 e0       	ldi	r29, 0x00	; 0
     a72:	28 81       	ld	r18, Y
     a74:	2e 7f       	andi	r18, 0xFE	; 254
     a76:	28 83       	st	Y, r18
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:609
  freq = _freq;
     a78:	60 93 0f 01 	sts	0x010F, r22	; 0x80010f <freq>
     a7c:	70 93 10 01 	sts	0x0110, r23	; 0x800110 <freq+0x1>
     a80:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <freq+0x2>
     a84:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <freq+0x3>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:610
  delta = (1LL << 24) * freq / refclk;  // update phase increment
     a88:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <freq>
     a8c:	70 91 10 01 	lds	r23, 0x0110	; 0x800110 <freq+0x1>
     a90:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <freq+0x2>
     a94:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <freq+0x3>
     a98:	20 e0       	ldi	r18, 0x00	; 0
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e8       	ldi	r20, 0x80	; 128
     a9e:	5b e4       	ldi	r21, 0x4B	; 75
     aa0:	0e 94 83 19 	call	0x3306	; 0x3306 <__mulsf3>
     aa4:	23 e9       	ldi	r18, 0x93	; 147
     aa6:	38 e1       	ldi	r19, 0x18	; 24
     aa8:	45 e7       	ldi	r20, 0x75	; 117
     aaa:	52 e4       	ldi	r21, 0x42	; 66
     aac:	0e 94 24 18 	call	0x3048	; 0x3048 <__divsf3>
     ab0:	0e 94 9d 18 	call	0x313a	; 0x313a <__fixunssfsi>
     ab4:	60 93 a5 02 	sts	0x02A5, r22	; 0x8002a5 <delta>
     ab8:	70 93 a6 02 	sts	0x02A6, r23	; 0x8002a6 <delta+0x1>
     abc:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <delta+0x2>
     ac0:	90 93 a8 02 	sts	0x02A8, r25	; 0x8002a8 <delta+0x3>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:611
  sbi(TIMSK2, TOIE2);                   // enable timer2 overflow detect     - bật ngắt timer 2
     ac4:	88 81       	ld	r24, Y
     ac6:	81 60       	ori	r24, 0x01	; 1
     ac8:	88 83       	st	Y, r24
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:612
}
     aca:	df 91       	pop	r29
     acc:	cf 91       	pop	r28
     ace:	08 95       	ret

00000ad0 <displayControl()>:
_Z14displayControlv():
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:228
    sttButton = 0;
    lcd.clear();
  }
}

void displayControl() {
     ad0:	af 92       	push	r10
     ad2:	bf 92       	push	r11
     ad4:	cf 92       	push	r12
     ad6:	df 92       	push	r13
     ad8:	ef 92       	push	r14
     ada:	ff 92       	push	r15
     adc:	0f 93       	push	r16
     ade:	1f 93       	push	r17
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:229
  if ((unsigned long)(millis() - timeMillis) > 500) {
     ae0:	0e 94 02 16 	call	0x2c04	; 0x2c04 <millis>
     ae4:	c0 90 92 02 	lds	r12, 0x0292	; 0x800292 <timeMillis>
     ae8:	d0 90 93 02 	lds	r13, 0x0293	; 0x800293 <timeMillis+0x1>
     aec:	e0 90 94 02 	lds	r14, 0x0294	; 0x800294 <timeMillis+0x2>
     af0:	f0 90 95 02 	lds	r15, 0x0295	; 0x800295 <timeMillis+0x3>
     af4:	6c 19       	sub	r22, r12
     af6:	7d 09       	sbc	r23, r13
     af8:	8e 09       	sbc	r24, r14
     afa:	9f 09       	sbc	r25, r15
     afc:	65 3f       	cpi	r22, 0xF5	; 245
     afe:	71 40       	sbci	r23, 0x01	; 1
     b00:	81 05       	cpc	r24, r1
     b02:	91 05       	cpc	r25, r1
     b04:	08 f4       	brcc	.+2      	; 0xb08 <displayControl()+0x38>
     b06:	8e c0       	rjmp	.+284    	; 0xc24 <displayControl()+0x154>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:230
    lcd.setCursor(4, 0);
     b08:	40 e0       	ldi	r20, 0x00	; 0
     b0a:	64 e0       	ldi	r22, 0x04	; 4
     b0c:	81 eb       	ldi	r24, 0xB1	; 177
     b0e:	92 e0       	ldi	r25, 0x02	; 2
     b10:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:231
    lcd.print("Control Motor");
     b14:	6a ec       	ldi	r22, 0xCA	; 202
     b16:	71 e0       	ldi	r23, 0x01	; 1
     b18:	81 eb       	ldi	r24, 0xB1	; 177
     b1a:	92 e0       	ldi	r25, 0x02	; 2
     b1c:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <Print::print(char const*)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:232
    lcd.setCursor(1, 1);
     b20:	41 e0       	ldi	r20, 0x01	; 1
     b22:	61 e0       	ldi	r22, 0x01	; 1
     b24:	81 eb       	ldi	r24, 0xB1	; 177
     b26:	92 e0       	ldi	r25, 0x02	; 2
     b28:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:233
    lcd.print("F:");
     b2c:	67 ec       	ldi	r22, 0xC7	; 199
     b2e:	71 e0       	ldi	r23, 0x01	; 1
     b30:	81 eb       	ldi	r24, 0xB1	; 177
     b32:	92 e0       	ldi	r25, 0x02	; 2
     b34:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <Print::print(char const*)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:234
    lcd.setCursor(12, 1);
     b38:	41 e0       	ldi	r20, 0x01	; 1
     b3a:	6c e0       	ldi	r22, 0x0C	; 12
     b3c:	81 eb       	ldi	r24, 0xB1	; 177
     b3e:	92 e0       	ldi	r25, 0x02	; 2
     b40:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:235
    lcd.print("T:");
     b44:	68 ed       	ldi	r22, 0xD8	; 216
     b46:	71 e0       	ldi	r23, 0x01	; 1
     b48:	81 eb       	ldi	r24, 0xB1	; 177
     b4a:	92 e0       	ldi	r25, 0x02	; 2
     b4c:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <Print::print(char const*)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:236
    lcd.setCursor(1, 2);
     b50:	42 e0       	ldi	r20, 0x02	; 2
     b52:	61 e0       	ldi	r22, 0x01	; 1
     b54:	81 eb       	ldi	r24, 0xB1	; 177
     b56:	92 e0       	ldi	r25, 0x02	; 2
     b58:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:237
    lcd.print("Driver:");
     b5c:	6b ed       	ldi	r22, 0xDB	; 219
     b5e:	71 e0       	ldi	r23, 0x01	; 1
     b60:	81 eb       	ldi	r24, 0xB1	; 177
     b62:	92 e0       	ldi	r25, 0x02	; 2
     b64:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <Print::print(char const*)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:238
    lcd.setCursor(9, 2);
     b68:	42 e0       	ldi	r20, 0x02	; 2
     b6a:	69 e0       	ldi	r22, 0x09	; 9
     b6c:	81 eb       	ldi	r24, 0xB1	; 177
     b6e:	92 e0       	ldi	r25, 0x02	; 2
     b70:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:239
    if (bitThuanNghich == 0) {
     b74:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <bitThuanNghich>
     b78:	81 11       	cpse	r24, r1
     b7a:	06 c0       	rjmp	.+12     	; 0xb88 <displayControl()+0xb8>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:240
      lcd.print("Thuan");
     b7c:	63 ea       	ldi	r22, 0xA3	; 163
     b7e:	71 e0       	ldi	r23, 0x01	; 1
     b80:	81 eb       	ldi	r24, 0xB1	; 177
     b82:	92 e0       	ldi	r25, 0x02	; 2
     b84:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <Print::print(char const*)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:242
    }
    if (bitThuanNghich == 1) {
     b88:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <bitThuanNghich>
     b8c:	81 30       	cpi	r24, 0x01	; 1
     b8e:	31 f4       	brne	.+12     	; 0xb9c <displayControl()+0xcc>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:243
      lcd.print("Nghich");
     b90:	69 ea       	ldi	r22, 0xA9	; 169
     b92:	71 e0       	ldi	r23, 0x01	; 1
     b94:	81 eb       	ldi	r24, 0xB1	; 177
     b96:	92 e0       	ldi	r25, 0x02	; 2
     b98:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <Print::print(char const*)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:246
    }

    lcd.setCursor(4, 1);
     b9c:	41 e0       	ldi	r20, 0x01	; 1
     b9e:	64 e0       	ldi	r22, 0x04	; 4
     ba0:	81 eb       	ldi	r24, 0xB1	; 177
     ba2:	92 e0       	ldi	r25, 0x02	; 2
     ba4:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:248
    //    lcd.print(f_set);
    lcd.print(f_change);
     ba8:	40 91 87 02 	lds	r20, 0x0287	; 0x800287 <f_change>
     bac:	50 91 88 02 	lds	r21, 0x0288	; 0x800288 <f_change+0x1>
     bb0:	60 91 89 02 	lds	r22, 0x0289	; 0x800289 <f_change+0x2>
     bb4:	70 91 8a 02 	lds	r23, 0x028A	; 0x80028a <f_change+0x3>
     bb8:	22 e0       	ldi	r18, 0x02	; 2
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	81 eb       	ldi	r24, 0xB1	; 177
     bbe:	92 e0       	ldi	r25, 0x02	; 2
     bc0:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <Print::print(double, int)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:249
    lcd.setCursor(14, 1);
     bc4:	41 e0       	ldi	r20, 0x01	; 1
     bc6:	6e e0       	ldi	r22, 0x0E	; 14
     bc8:	81 eb       	ldi	r24, 0xB1	; 177
     bca:	92 e0       	ldi	r25, 0x02	; 2
     bcc:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:250
    lcd.print(timeTGT);
     bd0:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <timeTGT>
     bd4:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <timeTGT+0x1>
     bd8:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <timeTGT+0x2>
     bdc:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <timeTGT+0x3>
     be0:	22 e0       	ldi	r18, 0x02	; 2
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	81 eb       	ldi	r24, 0xB1	; 177
     be6:	92 e0       	ldi	r25, 0x02	; 2
     be8:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <Print::print(double, int)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:251
    lcd.setCursor(1, 3);
     bec:	43 e0       	ldi	r20, 0x03	; 3
     bee:	61 e0       	ldi	r22, 0x01	; 1
     bf0:	81 eb       	ldi	r24, 0xB1	; 177
     bf2:	92 e0       	ldi	r25, 0x02	; 2
     bf4:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:252
    if (sttMotor == 0) {
     bf8:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <sttMotor>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:253
      lcd.print("Stop");
     bfc:	63 ee       	ldi	r22, 0xE3	; 227
     bfe:	71 e0       	ldi	r23, 0x01	; 1
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:252
    //    lcd.print(f_set);
    lcd.print(f_change);
    lcd.setCursor(14, 1);
    lcd.print(timeTGT);
    lcd.setCursor(1, 3);
    if (sttMotor == 0) {
     c00:	88 23       	and	r24, r24
     c02:	11 f0       	breq	.+4      	; 0xc08 <displayControl()+0x138>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:255
      lcd.print("Stop");
    } else {
      lcd.print("Start");
     c04:	68 ee       	ldi	r22, 0xE8	; 232
     c06:	71 e0       	ldi	r23, 0x01	; 1
     c08:	81 eb       	ldi	r24, 0xB1	; 177
     c0a:	92 e0       	ldi	r25, 0x02	; 2
     c0c:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <Print::print(char const*)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:257
    }
    timeMillis = millis();
     c10:	0e 94 02 16 	call	0x2c04	; 0x2c04 <millis>
     c14:	60 93 92 02 	sts	0x0292, r22	; 0x800292 <timeMillis>
     c18:	70 93 93 02 	sts	0x0293, r23	; 0x800293 <timeMillis+0x1>
     c1c:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <timeMillis+0x2>
     c20:	90 93 95 02 	sts	0x0295, r25	; 0x800295 <timeMillis+0x3>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:260
  }

  if (digitalRead(start) == 0) {
     c24:	84 e0       	ldi	r24, 0x04	; 4
     c26:	0e 94 88 17 	call	0x2f10	; 0x2f10 <digitalRead>
     c2a:	89 2b       	or	r24, r25
     c2c:	09 f0       	breq	.+2      	; 0xc30 <displayControl()+0x160>
     c2e:	57 c0       	rjmp	.+174    	; 0xcde <displayControl()+0x20e>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:261
    timeBack = millis();
     c30:	0e 94 02 16 	call	0x2c04	; 0x2c04 <millis>
     c34:	60 93 81 02 	sts	0x0281, r22	; 0x800281 <timeBack>
     c38:	70 93 82 02 	sts	0x0282, r23	; 0x800282 <timeBack+0x1>
     c3c:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <timeBack+0x2>
     c40:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <timeBack+0x3>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:262
    while (digitalRead(start) == 0)
     c44:	84 e0       	ldi	r24, 0x04	; 4
     c46:	0e 94 88 17 	call	0x2f10	; 0x2f10 <digitalRead>
     c4a:	89 2b       	or	r24, r25
     c4c:	d9 f3       	breq	.-10     	; 0xc44 <displayControl()+0x174>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:264
      ;
    if ((unsigned long)millis() - timeBack > 200) {
     c4e:	0e 94 02 16 	call	0x2c04	; 0x2c04 <millis>
     c52:	c0 90 81 02 	lds	r12, 0x0281	; 0x800281 <timeBack>
     c56:	d0 90 82 02 	lds	r13, 0x0282	; 0x800282 <timeBack+0x1>
     c5a:	e0 90 83 02 	lds	r14, 0x0283	; 0x800283 <timeBack+0x2>
     c5e:	f0 90 84 02 	lds	r15, 0x0284	; 0x800284 <timeBack+0x3>
     c62:	6c 19       	sub	r22, r12
     c64:	7d 09       	sbc	r23, r13
     c66:	8e 09       	sbc	r24, r14
     c68:	9f 09       	sbc	r25, r15
     c6a:	69 3c       	cpi	r22, 0xC9	; 201
     c6c:	71 05       	cpc	r23, r1
     c6e:	81 05       	cpc	r24, r1
     c70:	91 05       	cpc	r25, r1
     c72:	a8 f1       	brcs	.+106    	; 0xcde <displayControl()+0x20e>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:265
      timeChange = (timeTGT * 1000) / (f_set * 10);  // thoi gian thay doi ms / 0,1HZ
     c74:	20 e0       	ldi	r18, 0x00	; 0
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	4a e7       	ldi	r20, 0x7A	; 122
     c7a:	54 e4       	ldi	r21, 0x44	; 68
     c7c:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <timeTGT>
     c80:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <timeTGT+0x1>
     c84:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <timeTGT+0x2>
     c88:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <timeTGT+0x3>
     c8c:	0e 94 83 19 	call	0x3306	; 0x3306 <__mulsf3>
     c90:	6b 01       	movw	r12, r22
     c92:	7c 01       	movw	r14, r24
     c94:	20 e0       	ldi	r18, 0x00	; 0
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	40 e2       	ldi	r20, 0x20	; 32
     c9a:	51 e4       	ldi	r21, 0x41	; 65
     c9c:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <f_set>
     ca0:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <f_set+0x1>
     ca4:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <f_set+0x2>
     ca8:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <f_set+0x3>
     cac:	0e 94 83 19 	call	0x3306	; 0x3306 <__mulsf3>
     cb0:	9b 01       	movw	r18, r22
     cb2:	ac 01       	movw	r20, r24
     cb4:	c7 01       	movw	r24, r14
     cb6:	b6 01       	movw	r22, r12
     cb8:	0e 94 24 18 	call	0x3048	; 0x3048 <__divsf3>
     cbc:	0e 94 9d 18 	call	0x313a	; 0x313a <__fixunssfsi>
     cc0:	60 93 8b 02 	sts	0x028B, r22	; 0x80028b <timeChange>
     cc4:	70 93 8c 02 	sts	0x028C, r23	; 0x80028c <timeChange+0x1>
     cc8:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <timeChange+0x2>
     ccc:	90 93 8e 02 	sts	0x028E, r25	; 0x80028e <timeChange+0x3>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:266
      sttMotor = 1;
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <sttMotor>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:267
      lcd.clear();
     cd6:	81 eb       	ldi	r24, 0xB1	; 177
     cd8:	92 e0       	ldi	r25, 0x02	; 2
     cda:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <LiquidCrystal_I2C::clear()>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:273
      //        Serial.println(timeTGT);
      //        Serial.println(f_set);
      //        Serial.println(timeChange);
    }
  }
  if (digitalRead(stop) == 0) {
     cde:	87 e0       	ldi	r24, 0x07	; 7
     ce0:	0e 94 88 17 	call	0x2f10	; 0x2f10 <digitalRead>
     ce4:	89 2b       	or	r24, r25
     ce6:	59 f5       	brne	.+86     	; 0xd3e <displayControl()+0x26e>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:274
    timeBack = millis();
     ce8:	0e 94 02 16 	call	0x2c04	; 0x2c04 <millis>
     cec:	60 93 81 02 	sts	0x0281, r22	; 0x800281 <timeBack>
     cf0:	70 93 82 02 	sts	0x0282, r23	; 0x800282 <timeBack+0x1>
     cf4:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <timeBack+0x2>
     cf8:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <timeBack+0x3>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:275
    while (digitalRead(stop) == 0)
     cfc:	87 e0       	ldi	r24, 0x07	; 7
     cfe:	0e 94 88 17 	call	0x2f10	; 0x2f10 <digitalRead>
     d02:	89 2b       	or	r24, r25
     d04:	d9 f3       	breq	.-10     	; 0xcfc <displayControl()+0x22c>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:277
      ;
    if ((unsigned long)millis() - timeBack > 200) {
     d06:	0e 94 02 16 	call	0x2c04	; 0x2c04 <millis>
     d0a:	c0 90 81 02 	lds	r12, 0x0281	; 0x800281 <timeBack>
     d0e:	d0 90 82 02 	lds	r13, 0x0282	; 0x800282 <timeBack+0x1>
     d12:	e0 90 83 02 	lds	r14, 0x0283	; 0x800283 <timeBack+0x2>
     d16:	f0 90 84 02 	lds	r15, 0x0284	; 0x800284 <timeBack+0x3>
     d1a:	6c 19       	sub	r22, r12
     d1c:	7d 09       	sbc	r23, r13
     d1e:	8e 09       	sbc	r24, r14
     d20:	9f 09       	sbc	r25, r15
     d22:	69 3c       	cpi	r22, 0xC9	; 201
     d24:	71 05       	cpc	r23, r1
     d26:	81 05       	cpc	r24, r1
     d28:	91 05       	cpc	r25, r1
     d2a:	48 f0       	brcs	.+18     	; 0xd3e <displayControl()+0x26e>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:278
      sttMotor = 0;
     d2c:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <sttMotor>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:279
      bitStop = 1;
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <__data_end>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:280
      lcd.clear();
     d36:	81 eb       	ldi	r24, 0xB1	; 177
     d38:	92 e0       	ldi	r25, 0x02	; 2
     d3a:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <LiquidCrystal_I2C::clear()>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:284
    }
  }

  if (sttMotor == 1) {
     d3e:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <sttMotor>
     d42:	81 30       	cpi	r24, 0x01	; 1
     d44:	09 f0       	breq	.+2      	; 0xd48 <displayControl()+0x278>
     d46:	eb c0       	rjmp	.+470    	; 0xf1e <displayControl()+0x44e>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:285
    if (((unsigned long)millis() - timeCTMotor) > timeChange) {
     d48:	0e 94 02 16 	call	0x2c04	; 0x2c04 <millis>
     d4c:	c0 90 7d 02 	lds	r12, 0x027D	; 0x80027d <timeCTMotor>
     d50:	d0 90 7e 02 	lds	r13, 0x027E	; 0x80027e <timeCTMotor+0x1>
     d54:	e0 90 7f 02 	lds	r14, 0x027F	; 0x80027f <timeCTMotor+0x2>
     d58:	f0 90 80 02 	lds	r15, 0x0280	; 0x800280 <timeCTMotor+0x3>
     d5c:	6c 19       	sub	r22, r12
     d5e:	7d 09       	sbc	r23, r13
     d60:	8e 09       	sbc	r24, r14
     d62:	9f 09       	sbc	r25, r15
     d64:	c0 90 8b 02 	lds	r12, 0x028B	; 0x80028b <timeChange>
     d68:	d0 90 8c 02 	lds	r13, 0x028C	; 0x80028c <timeChange+0x1>
     d6c:	e0 90 8d 02 	lds	r14, 0x028D	; 0x80028d <timeChange+0x2>
     d70:	f0 90 8e 02 	lds	r15, 0x028E	; 0x80028e <timeChange+0x3>
     d74:	c6 16       	cp	r12, r22
     d76:	d7 06       	cpc	r13, r23
     d78:	e8 06       	cpc	r14, r24
     d7a:	f9 06       	cpc	r15, r25
     d7c:	08 f0       	brcs	.+2      	; 0xd80 <displayControl()+0x2b0>
     d7e:	cf c0       	rjmp	.+414    	; 0xf1e <displayControl()+0x44e>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:286
      if (f_change < f_set) {
     d80:	c0 90 87 02 	lds	r12, 0x0287	; 0x800287 <f_change>
     d84:	d0 90 88 02 	lds	r13, 0x0288	; 0x800288 <f_change+0x1>
     d88:	e0 90 89 02 	lds	r14, 0x0289	; 0x800289 <f_change+0x2>
     d8c:	f0 90 8a 02 	lds	r15, 0x028A	; 0x80028a <f_change+0x3>
     d90:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <f_set>
     d94:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <f_set+0x1>
     d98:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <f_set+0x2>
     d9c:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <f_set+0x3>
     da0:	c7 01       	movw	r24, r14
     da2:	b6 01       	movw	r22, r12
     da4:	0e 94 1f 18 	call	0x303e	; 0x303e <__cmpsf2>
     da8:	87 ff       	sbrs	r24, 7
     daa:	4d c0       	rjmp	.+154    	; 0xe46 <displayControl()+0x376>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:287
        f_change += 0.1;
     dac:	2d ec       	ldi	r18, 0xCD	; 205
     dae:	3c ec       	ldi	r19, 0xCC	; 204
     db0:	4c ec       	ldi	r20, 0xCC	; 204
     db2:	5d e3       	ldi	r21, 0x3D	; 61
     db4:	c7 01       	movw	r24, r14
     db6:	b6 01       	movw	r22, r12
     db8:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__addsf3>
     dbc:	6b 01       	movw	r12, r22
     dbe:	7c 01       	movw	r14, r24
     dc0:	c0 92 87 02 	sts	0x0287, r12	; 0x800287 <f_change>
     dc4:	d0 92 88 02 	sts	0x0288, r13	; 0x800288 <f_change+0x1>
     dc8:	e0 92 89 02 	sts	0x0289, r14	; 0x800289 <f_change+0x2>
     dcc:	f0 92 8a 02 	sts	0x028A, r15	; 0x80028a <f_change+0x3>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:288
        if ((f_change > 0) && (f_change < 50)) {
     dd0:	20 e0       	ldi	r18, 0x00	; 0
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	a9 01       	movw	r20, r18
     dd6:	0e 94 7e 19 	call	0x32fc	; 0x32fc <__gesf2>
     dda:	18 16       	cp	r1, r24
     ddc:	0c f0       	brlt	.+2      	; 0xde0 <displayControl()+0x310>
     dde:	0e c1       	rjmp	.+540    	; 0xffc <displayControl()+0x52c>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:288 (discriminator 1)
     de0:	20 e0       	ldi	r18, 0x00	; 0
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	48 e4       	ldi	r20, 0x48	; 72
     de6:	52 e4       	ldi	r21, 0x42	; 66
     de8:	c7 01       	movw	r24, r14
     dea:	b6 01       	movw	r22, r12
     dec:	0e 94 1f 18 	call	0x303e	; 0x303e <__cmpsf2>
     df0:	87 ff       	sbrs	r24, 7
     df2:	04 c1       	rjmp	.+520    	; 0xffc <displayControl()+0x52c>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:289
          constVF = map(f_change, 0, 49, 1, 99);
     df4:	c7 01       	movw	r24, r14
     df6:	b6 01       	movw	r22, r12
     df8:	0e 94 96 18 	call	0x312c	; 0x312c <__fixsfsi>
     dfc:	1f 92       	push	r1
     dfe:	1f 92       	push	r1
     e00:	1f 92       	push	r1
     e02:	23 e6       	ldi	r18, 0x63	; 99
     e04:	2f 93       	push	r18
     e06:	a1 2c       	mov	r10, r1
     e08:	b1 2c       	mov	r11, r1
     e0a:	65 01       	movw	r12, r10
     e0c:	a3 94       	inc	r10
     e0e:	11 e3       	ldi	r17, 0x31	; 49
     e10:	e1 2e       	mov	r14, r17
     e12:	f1 2c       	mov	r15, r1
     e14:	00 e0       	ldi	r16, 0x00	; 0
     e16:	10 e0       	ldi	r17, 0x00	; 0
     e18:	20 e0       	ldi	r18, 0x00	; 0
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	a9 01       	movw	r20, r18
     e1e:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <map(long, long, long, long, long)>
     e22:	70 93 ae 02 	sts	0x02AE, r23	; 0x8002ae <constVF+0x1>
     e26:	60 93 ad 02 	sts	0x02AD, r22	; 0x8002ad <constVF>
     e2a:	0f 90       	pop	r0
     e2c:	0f 90       	pop	r0
     e2e:	0f 90       	pop	r0
     e30:	0f 90       	pop	r0
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:297
          //convert_PWM = (149)*constVF/100;
          //Serial.println(convert_PWM);
        } else {
          constVF = 1;
        }
        changeFreq(f_change);
     e32:	60 91 87 02 	lds	r22, 0x0287	; 0x800287 <f_change>
     e36:	70 91 88 02 	lds	r23, 0x0288	; 0x800288 <f_change+0x1>
     e3a:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <f_change+0x2>
     e3e:	90 91 8a 02 	lds	r25, 0x028A	; 0x80028a <f_change+0x3>
     e42:	0e 94 35 05 	call	0xa6a	; 0xa6a <changeFreq(float)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:300
        //           Serial.println(f_change);
      }
      if (f_change > f_set) {
     e46:	c0 90 87 02 	lds	r12, 0x0287	; 0x800287 <f_change>
     e4a:	d0 90 88 02 	lds	r13, 0x0288	; 0x800288 <f_change+0x1>
     e4e:	e0 90 89 02 	lds	r14, 0x0289	; 0x800289 <f_change+0x2>
     e52:	f0 90 8a 02 	lds	r15, 0x028A	; 0x80028a <f_change+0x3>
     e56:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <f_set>
     e5a:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <f_set+0x1>
     e5e:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <f_set+0x2>
     e62:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <f_set+0x3>
     e66:	c7 01       	movw	r24, r14
     e68:	b6 01       	movw	r22, r12
     e6a:	0e 94 7e 19 	call	0x32fc	; 0x32fc <__gesf2>
     e6e:	18 16       	cp	r1, r24
     e70:	0c f0       	brlt	.+2      	; 0xe74 <displayControl()+0x3a4>
     e72:	4b c0       	rjmp	.+150    	; 0xf0a <displayControl()+0x43a>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:301
        f_change -= 0.1;
     e74:	2d ec       	ldi	r18, 0xCD	; 205
     e76:	3c ec       	ldi	r19, 0xCC	; 204
     e78:	4c ec       	ldi	r20, 0xCC	; 204
     e7a:	5d e3       	ldi	r21, 0x3D	; 61
     e7c:	c7 01       	movw	r24, r14
     e7e:	b6 01       	movw	r22, r12
     e80:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <__subsf3>
     e84:	6b 01       	movw	r12, r22
     e86:	7c 01       	movw	r14, r24
     e88:	c0 92 87 02 	sts	0x0287, r12	; 0x800287 <f_change>
     e8c:	d0 92 88 02 	sts	0x0288, r13	; 0x800288 <f_change+0x1>
     e90:	e0 92 89 02 	sts	0x0289, r14	; 0x800289 <f_change+0x2>
     e94:	f0 92 8a 02 	sts	0x028A, r15	; 0x80028a <f_change+0x3>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:302
        if ((f_change > 0) && (f_change < 50)) {
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	a9 01       	movw	r20, r18
     e9e:	0e 94 7e 19 	call	0x32fc	; 0x32fc <__gesf2>
     ea2:	18 16       	cp	r1, r24
     ea4:	0c f0       	brlt	.+2      	; 0xea8 <displayControl()+0x3d8>
     ea6:	b1 c0       	rjmp	.+354    	; 0x100a <displayControl()+0x53a>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:302 (discriminator 1)
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	48 e4       	ldi	r20, 0x48	; 72
     eae:	52 e4       	ldi	r21, 0x42	; 66
     eb0:	c7 01       	movw	r24, r14
     eb2:	b6 01       	movw	r22, r12
     eb4:	0e 94 1f 18 	call	0x303e	; 0x303e <__cmpsf2>
     eb8:	87 ff       	sbrs	r24, 7
     eba:	a7 c0       	rjmp	.+334    	; 0x100a <displayControl()+0x53a>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:303
          constVF = map(f_change, 0, 49, 0.1, 0.99);
     ebc:	c7 01       	movw	r24, r14
     ebe:	b6 01       	movw	r22, r12
     ec0:	0e 94 96 18 	call	0x312c	; 0x312c <__fixsfsi>
     ec4:	1f 92       	push	r1
     ec6:	1f 92       	push	r1
     ec8:	1f 92       	push	r1
     eca:	1f 92       	push	r1
     ecc:	a1 2c       	mov	r10, r1
     ece:	b1 2c       	mov	r11, r1
     ed0:	65 01       	movw	r12, r10
     ed2:	11 e3       	ldi	r17, 0x31	; 49
     ed4:	e1 2e       	mov	r14, r17
     ed6:	f1 2c       	mov	r15, r1
     ed8:	00 e0       	ldi	r16, 0x00	; 0
     eda:	10 e0       	ldi	r17, 0x00	; 0
     edc:	20 e0       	ldi	r18, 0x00	; 0
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	a9 01       	movw	r20, r18
     ee2:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <map(long, long, long, long, long)>
     ee6:	70 93 ae 02 	sts	0x02AE, r23	; 0x8002ae <constVF+0x1>
     eea:	60 93 ad 02 	sts	0x02AD, r22	; 0x8002ad <constVF>
     eee:	0f 90       	pop	r0
     ef0:	0f 90       	pop	r0
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:309
          //Serial.println("CONST V/F: ");
          //Serial.println(constVF);
        } else {
          constVF = 1;
        }
        changeFreq(f_change);
     ef6:	60 91 87 02 	lds	r22, 0x0287	; 0x800287 <f_change>
     efa:	70 91 88 02 	lds	r23, 0x0288	; 0x800288 <f_change+0x1>
     efe:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <f_change+0x2>
     f02:	90 91 8a 02 	lds	r25, 0x028A	; 0x80028a <f_change+0x3>
     f06:	0e 94 35 05 	call	0xa6a	; 0xa6a <changeFreq(float)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:311
      }
      timeCTMotor = millis();
     f0a:	0e 94 02 16 	call	0x2c04	; 0x2c04 <millis>
     f0e:	60 93 7d 02 	sts	0x027D, r22	; 0x80027d <timeCTMotor>
     f12:	70 93 7e 02 	sts	0x027E, r23	; 0x80027e <timeCTMotor+0x1>
     f16:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <timeCTMotor+0x2>
     f1a:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <timeCTMotor+0x3>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:314
    }
  }
  if (bitStop == 1 && sttMotor == 0) {
     f1e:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <__data_end>
     f22:	81 30       	cpi	r24, 0x01	; 1
     f24:	09 f0       	breq	.+2      	; 0xf28 <displayControl()+0x458>
     f26:	4d c0       	rjmp	.+154    	; 0xfc2 <displayControl()+0x4f2>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:314 (discriminator 1)
     f28:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <sttMotor>
     f2c:	81 11       	cpse	r24, r1
     f2e:	49 c0       	rjmp	.+146    	; 0xfc2 <displayControl()+0x4f2>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:316
    /* code */
    if (((unsigned long)millis() - timeCTMotor) > timeChange) {
     f30:	0e 94 02 16 	call	0x2c04	; 0x2c04 <millis>
     f34:	c0 90 7d 02 	lds	r12, 0x027D	; 0x80027d <timeCTMotor>
     f38:	d0 90 7e 02 	lds	r13, 0x027E	; 0x80027e <timeCTMotor+0x1>
     f3c:	e0 90 7f 02 	lds	r14, 0x027F	; 0x80027f <timeCTMotor+0x2>
     f40:	f0 90 80 02 	lds	r15, 0x0280	; 0x800280 <timeCTMotor+0x3>
     f44:	6c 19       	sub	r22, r12
     f46:	7d 09       	sbc	r23, r13
     f48:	8e 09       	sbc	r24, r14
     f4a:	9f 09       	sbc	r25, r15
     f4c:	c0 90 8b 02 	lds	r12, 0x028B	; 0x80028b <timeChange>
     f50:	d0 90 8c 02 	lds	r13, 0x028C	; 0x80028c <timeChange+0x1>
     f54:	e0 90 8d 02 	lds	r14, 0x028D	; 0x80028d <timeChange+0x2>
     f58:	f0 90 8e 02 	lds	r15, 0x028E	; 0x80028e <timeChange+0x3>
     f5c:	c6 16       	cp	r12, r22
     f5e:	d7 06       	cpc	r13, r23
     f60:	e8 06       	cpc	r14, r24
     f62:	f9 06       	cpc	r15, r25
     f64:	70 f5       	brcc	.+92     	; 0xfc2 <displayControl()+0x4f2>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:317
      if (f_change > 0) {
     f66:	c0 90 87 02 	lds	r12, 0x0287	; 0x800287 <f_change>
     f6a:	d0 90 88 02 	lds	r13, 0x0288	; 0x800288 <f_change+0x1>
     f6e:	e0 90 89 02 	lds	r14, 0x0289	; 0x800289 <f_change+0x2>
     f72:	f0 90 8a 02 	lds	r15, 0x028A	; 0x80028a <f_change+0x3>
     f76:	20 e0       	ldi	r18, 0x00	; 0
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	a9 01       	movw	r20, r18
     f7c:	c7 01       	movw	r24, r14
     f7e:	b6 01       	movw	r22, r12
     f80:	0e 94 7e 19 	call	0x32fc	; 0x32fc <__gesf2>
     f84:	18 16       	cp	r1, r24
     f86:	0c f0       	brlt	.+2      	; 0xf8a <displayControl()+0x4ba>
     f88:	47 c0       	rjmp	.+142    	; 0x1018 <displayControl()+0x548>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:318
        f_change -= 0.1;
     f8a:	2d ec       	ldi	r18, 0xCD	; 205
     f8c:	3c ec       	ldi	r19, 0xCC	; 204
     f8e:	4c ec       	ldi	r20, 0xCC	; 204
     f90:	5d e3       	ldi	r21, 0x3D	; 61
     f92:	c7 01       	movw	r24, r14
     f94:	b6 01       	movw	r22, r12
     f96:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <__subsf3>
     f9a:	60 93 87 02 	sts	0x0287, r22	; 0x800287 <f_change>
     f9e:	70 93 88 02 	sts	0x0288, r23	; 0x800288 <f_change+0x1>
     fa2:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <f_change+0x2>
     fa6:	90 93 8a 02 	sts	0x028A, r25	; 0x80028a <f_change+0x3>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:319
        changeFreq(f_change);
     faa:	0e 94 35 05 	call	0xa6a	; 0xa6a <changeFreq(float)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:331
        OCR1B = 0;
        OCR2A = 0;
        OCR2B = 0;
        bitStop = 0;
      }
      timeCTMotor = millis();
     fae:	0e 94 02 16 	call	0x2c04	; 0x2c04 <millis>
     fb2:	60 93 7d 02 	sts	0x027D, r22	; 0x80027d <timeCTMotor>
     fb6:	70 93 7e 02 	sts	0x027E, r23	; 0x80027e <timeCTMotor+0x1>
     fba:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <timeCTMotor+0x2>
     fbe:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <timeCTMotor+0x3>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:336
    }
  }


  if (Back() == 1) {
     fc2:	0e 94 43 01 	call	0x286	; 0x286 <Back()>
     fc6:	81 30       	cpi	r24, 0x01	; 1
     fc8:	81 f4       	brne	.+32     	; 0xfea <displayControl()+0x51a>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:337
    if (sttMotor == 0 && bitStop == 0) {
     fca:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <sttMotor>
     fce:	81 11       	cpse	r24, r1
     fd0:	39 c0       	rjmp	.+114    	; 0x1044 <displayControl()+0x574>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:337 (discriminator 1)
     fd2:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <__data_end>
     fd6:	81 11       	cpse	r24, r1
     fd8:	35 c0       	rjmp	.+106    	; 0x1044 <displayControl()+0x574>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:338
      mode = 0;
     fda:	10 92 8f 02 	sts	0x028F, r1	; 0x80028f <mode>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:339
      lcd.clear();
     fde:	81 eb       	ldi	r24, 0xB1	; 177
     fe0:	92 e0       	ldi	r25, 0x02	; 2
     fe2:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <LiquidCrystal_I2C::clear()>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:344
      sttButton = 0;
    } else {
      lcd.setCursor(7, 3);
      lcd.print("--Off Motor--");
      sttButton = 0;
     fe6:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <sttButton>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:347
    }
  }
}
     fea:	1f 91       	pop	r17
     fec:	0f 91       	pop	r16
     fee:	ff 90       	pop	r15
     ff0:	ef 90       	pop	r14
     ff2:	df 90       	pop	r13
     ff4:	cf 90       	pop	r12
     ff6:	bf 90       	pop	r11
     ff8:	af 90       	pop	r10
     ffa:	08 95       	ret
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:295
          //Serial.print("CONST V/F: ");
          //Serial.println(constVF);
          //convert_PWM = (149)*constVF/100;
          //Serial.println(convert_PWM);
        } else {
          constVF = 1;
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	90 93 ae 02 	sts	0x02AE, r25	; 0x8002ae <constVF+0x1>
    1004:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <constVF>
    1008:	14 cf       	rjmp	.-472    	; 0xe32 <displayControl()+0x362>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:307
        if ((f_change > 0) && (f_change < 50)) {
          constVF = map(f_change, 0, 49, 0.1, 0.99);
          //Serial.println("CONST V/F: ");
          //Serial.println(constVF);
        } else {
          constVF = 1;
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	90 93 ae 02 	sts	0x02AE, r25	; 0x8002ae <constVF+0x1>
    1012:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <constVF>
    1016:	6f cf       	rjmp	.-290    	; 0xef6 <displayControl()+0x426>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:322
      if (f_change > 0) {
        f_change -= 0.1;
        changeFreq(f_change);
        //           Serial.println(f_change);
      } else {
        cbi(TIMSK2, TOIE2);
    1018:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
    101c:	8e 7f       	andi	r24, 0xFE	; 254
    101e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:323
        OCR0A = 0;
    1022:	17 bc       	out	0x27, r1	; 39
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:324
        OCR0B = 0;
    1024:	18 bc       	out	0x28, r1	; 40
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:325
        OCR1A = 0;
    1026:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    102a:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:326
        OCR1B = 0;
    102e:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    1032:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:327
        OCR2A = 0;
    1036:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:328
        OCR2B = 0;
    103a:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:329
        bitStop = 0;
    103e:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <__data_end>
    1042:	b5 cf       	rjmp	.-150    	; 0xfae <displayControl()+0x4de>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:342
    if (sttMotor == 0 && bitStop == 0) {
      mode = 0;
      lcd.clear();
      sttButton = 0;
    } else {
      lcd.setCursor(7, 3);
    1044:	43 e0       	ldi	r20, 0x03	; 3
    1046:	67 e0       	ldi	r22, 0x07	; 7
    1048:	81 eb       	ldi	r24, 0xB1	; 177
    104a:	92 e0       	ldi	r25, 0x02	; 2
    104c:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:343
      lcd.print("--Off Motor--");
    1050:	6e ee       	ldi	r22, 0xEE	; 238
    1052:	71 e0       	ldi	r23, 0x01	; 1
    1054:	81 eb       	ldi	r24, 0xB1	; 177
    1056:	92 e0       	ldi	r25, 0x02	; 2
    1058:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <Print::print(char const*)>
    105c:	c4 cf       	rjmp	.-120    	; 0xfe6 <displayControl()+0x516>

0000105e <ChangeVR()>:
_Z8ChangeVRv():
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:349
      sttButton = 0;
    }
  }
}
//Mode 1: su dung bien tro
void ChangeVR() {
    105e:	4f 92       	push	r4
    1060:	5f 92       	push	r5
    1062:	6f 92       	push	r6
    1064:	7f 92       	push	r7
    1066:	af 92       	push	r10
    1068:	bf 92       	push	r11
    106a:	cf 92       	push	r12
    106c:	df 92       	push	r13
    106e:	ef 92       	push	r14
    1070:	ff 92       	push	r15
    1072:	0f 93       	push	r16
    1074:	1f 93       	push	r17
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:350
  if (((unsigned long)millis() - timeMillis) > 500) {
    1076:	0e 94 02 16 	call	0x2c04	; 0x2c04 <millis>
    107a:	c0 90 92 02 	lds	r12, 0x0292	; 0x800292 <timeMillis>
    107e:	d0 90 93 02 	lds	r13, 0x0293	; 0x800293 <timeMillis+0x1>
    1082:	e0 90 94 02 	lds	r14, 0x0294	; 0x800294 <timeMillis+0x2>
    1086:	f0 90 95 02 	lds	r15, 0x0295	; 0x800295 <timeMillis+0x3>
    108a:	6c 19       	sub	r22, r12
    108c:	7d 09       	sbc	r23, r13
    108e:	8e 09       	sbc	r24, r14
    1090:	9f 09       	sbc	r25, r15
    1092:	65 3f       	cpi	r22, 0xF5	; 245
    1094:	71 40       	sbci	r23, 0x01	; 1
    1096:	81 05       	cpc	r24, r1
    1098:	91 05       	cpc	r25, r1
    109a:	08 f4       	brcc	.+2      	; 0x109e <ChangeVR()+0x40>
    109c:	48 c0       	rjmp	.+144    	; 0x112e <ChangeVR()+0xd0>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:352
    //lcd.clear();
    lcd.setCursor(1, 0);
    109e:	40 e0       	ldi	r20, 0x00	; 0
    10a0:	61 e0       	ldi	r22, 0x01	; 1
    10a2:	81 eb       	ldi	r24, 0xB1	; 177
    10a4:	92 e0       	ldi	r25, 0x02	; 2
    10a6:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:353
    lcd.print("MODE 2: DUNG VR ");
    10aa:	6c ef       	ldi	r22, 0xFC	; 252
    10ac:	71 e0       	ldi	r23, 0x01	; 1
    10ae:	81 eb       	ldi	r24, 0xB1	; 177
    10b0:	92 e0       	ldi	r25, 0x02	; 2
    10b2:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <Print::print(char const*)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:354
    lcd.setCursor(1, 2);
    10b6:	42 e0       	ldi	r20, 0x02	; 2
    10b8:	61 e0       	ldi	r22, 0x01	; 1
    10ba:	81 eb       	ldi	r24, 0xB1	; 177
    10bc:	92 e0       	ldi	r25, 0x02	; 2
    10be:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:355
    lcd.print("F:");
    10c2:	67 ec       	ldi	r22, 0xC7	; 199
    10c4:	71 e0       	ldi	r23, 0x01	; 1
    10c6:	81 eb       	ldi	r24, 0xB1	; 177
    10c8:	92 e0       	ldi	r25, 0x02	; 2
    10ca:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <Print::print(char const*)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:356
    lcd.setCursor(11, 2);
    10ce:	42 e0       	ldi	r20, 0x02	; 2
    10d0:	6b e0       	ldi	r22, 0x0B	; 11
    10d2:	81 eb       	ldi	r24, 0xB1	; 177
    10d4:	92 e0       	ldi	r25, 0x02	; 2
    10d6:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:357
    lcd.print(F_in);
    10da:	40 91 9a 02 	lds	r20, 0x029A	; 0x80029a <F_in>
    10de:	50 91 9b 02 	lds	r21, 0x029B	; 0x80029b <F_in+0x1>
    10e2:	60 91 9c 02 	lds	r22, 0x029C	; 0x80029c <F_in+0x2>
    10e6:	70 91 9d 02 	lds	r23, 0x029D	; 0x80029d <F_in+0x3>
    10ea:	22 e0       	ldi	r18, 0x02	; 2
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	81 eb       	ldi	r24, 0xB1	; 177
    10f0:	92 e0       	ldi	r25, 0x02	; 2
    10f2:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <Print::print(double, int)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:358
    lcd.setCursor(1, 3);
    10f6:	43 e0       	ldi	r20, 0x03	; 3
    10f8:	61 e0       	ldi	r22, 0x01	; 1
    10fa:	81 eb       	ldi	r24, 0xB1	; 177
    10fc:	92 e0       	ldi	r25, 0x02	; 2
    10fe:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:359
    if (sttMotor == 0) {
    1102:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <sttMotor>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:360
      lcd.print("Stop");
    1106:	63 ee       	ldi	r22, 0xE3	; 227
    1108:	71 e0       	ldi	r23, 0x01	; 1
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:359
    lcd.setCursor(1, 2);
    lcd.print("F:");
    lcd.setCursor(11, 2);
    lcd.print(F_in);
    lcd.setCursor(1, 3);
    if (sttMotor == 0) {
    110a:	88 23       	and	r24, r24
    110c:	11 f0       	breq	.+4      	; 0x1112 <ChangeVR()+0xb4>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:362
      lcd.print("Stop");
    } else {
      lcd.print("Start");
    110e:	68 ee       	ldi	r22, 0xE8	; 232
    1110:	71 e0       	ldi	r23, 0x01	; 1
    1112:	81 eb       	ldi	r24, 0xB1	; 177
    1114:	92 e0       	ldi	r25, 0x02	; 2
    1116:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <Print::print(char const*)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:364
    }
    timeMillis = millis();
    111a:	0e 94 02 16 	call	0x2c04	; 0x2c04 <millis>
    111e:	60 93 92 02 	sts	0x0292, r22	; 0x800292 <timeMillis>
    1122:	70 93 93 02 	sts	0x0293, r23	; 0x800293 <timeMillis+0x1>
    1126:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <timeMillis+0x2>
    112a:	90 93 95 02 	sts	0x0295, r25	; 0x800295 <timeMillis+0x3>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:366
  }
  VR_in = analogRead(A0);
    112e:	8e e0       	ldi	r24, 0x0E	; 14
    1130:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <analogRead>
    1134:	2c 01       	movw	r4, r24
    1136:	99 0f       	add	r25, r25
    1138:	66 08       	sbc	r6, r6
    113a:	77 08       	sbc	r7, r7
    113c:	c3 01       	movw	r24, r6
    113e:	b2 01       	movw	r22, r4
    1140:	0e 94 ce 18 	call	0x319c	; 0x319c <__floatsisf>
    1144:	60 93 9e 02 	sts	0x029E, r22	; 0x80029e <VR_in>
    1148:	70 93 9f 02 	sts	0x029F, r23	; 0x80029f <VR_in+0x1>
    114c:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <VR_in+0x2>
    1150:	90 93 a1 02 	sts	0x02A1, r25	; 0x8002a1 <VR_in+0x3>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:367
  F_in = map(VR_in, 0, 1023, 0, 100);
    1154:	1f 92       	push	r1
    1156:	1f 92       	push	r1
    1158:	1f 92       	push	r1
    115a:	84 e6       	ldi	r24, 0x64	; 100
    115c:	8f 93       	push	r24
    115e:	a1 2c       	mov	r10, r1
    1160:	b1 2c       	mov	r11, r1
    1162:	65 01       	movw	r12, r10
    1164:	ee 24       	eor	r14, r14
    1166:	ea 94       	dec	r14
    1168:	13 e0       	ldi	r17, 0x03	; 3
    116a:	f1 2e       	mov	r15, r17
    116c:	00 e0       	ldi	r16, 0x00	; 0
    116e:	10 e0       	ldi	r17, 0x00	; 0
    1170:	20 e0       	ldi	r18, 0x00	; 0
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	a9 01       	movw	r20, r18
    1176:	c3 01       	movw	r24, r6
    1178:	b2 01       	movw	r22, r4
    117a:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <map(long, long, long, long, long)>
    117e:	0e 94 ce 18 	call	0x319c	; 0x319c <__floatsisf>
    1182:	60 93 9a 02 	sts	0x029A, r22	; 0x80029a <F_in>
    1186:	70 93 9b 02 	sts	0x029B, r23	; 0x80029b <F_in+0x1>
    118a:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <F_in+0x2>
    118e:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <F_in+0x3>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:370

  //NOTE: tan so se thay doi lien tuc
  if (digitalRead(start) == 0) {
    1192:	84 e0       	ldi	r24, 0x04	; 4
    1194:	0e 94 88 17 	call	0x2f10	; 0x2f10 <digitalRead>
    1198:	0f 90       	pop	r0
    119a:	0f 90       	pop	r0
    119c:	0f 90       	pop	r0
    119e:	0f 90       	pop	r0
    11a0:	89 2b       	or	r24, r25
    11a2:	09 f0       	breq	.+2      	; 0x11a6 <ChangeVR()+0x148>
    11a4:	57 c0       	rjmp	.+174    	; 0x1254 <ChangeVR()+0x1f6>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:371
    timeBack = millis();
    11a6:	0e 94 02 16 	call	0x2c04	; 0x2c04 <millis>
    11aa:	60 93 81 02 	sts	0x0281, r22	; 0x800281 <timeBack>
    11ae:	70 93 82 02 	sts	0x0282, r23	; 0x800282 <timeBack+0x1>
    11b2:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <timeBack+0x2>
    11b6:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <timeBack+0x3>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:372
    while (digitalRead(start) == 0)
    11ba:	84 e0       	ldi	r24, 0x04	; 4
    11bc:	0e 94 88 17 	call	0x2f10	; 0x2f10 <digitalRead>
    11c0:	89 2b       	or	r24, r25
    11c2:	d9 f3       	breq	.-10     	; 0x11ba <ChangeVR()+0x15c>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:374
      ;
    if ((unsigned long)millis() - timeBack > 200) {
    11c4:	0e 94 02 16 	call	0x2c04	; 0x2c04 <millis>
    11c8:	c0 90 81 02 	lds	r12, 0x0281	; 0x800281 <timeBack>
    11cc:	d0 90 82 02 	lds	r13, 0x0282	; 0x800282 <timeBack+0x1>
    11d0:	e0 90 83 02 	lds	r14, 0x0283	; 0x800283 <timeBack+0x2>
    11d4:	f0 90 84 02 	lds	r15, 0x0284	; 0x800284 <timeBack+0x3>
    11d8:	6c 19       	sub	r22, r12
    11da:	7d 09       	sbc	r23, r13
    11dc:	8e 09       	sbc	r24, r14
    11de:	9f 09       	sbc	r25, r15
    11e0:	69 3c       	cpi	r22, 0xC9	; 201
    11e2:	71 05       	cpc	r23, r1
    11e4:	81 05       	cpc	r24, r1
    11e6:	91 05       	cpc	r25, r1
    11e8:	a8 f1       	brcs	.+106    	; 0x1254 <ChangeVR()+0x1f6>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:375
      sttMotor = 1;
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <sttMotor>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:376
      timeChange = (timeTGT * 1000) / (F_in * 10);  // thoi gian ms/0,1 HZ
    11f0:	20 e0       	ldi	r18, 0x00	; 0
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	4a e7       	ldi	r20, 0x7A	; 122
    11f6:	54 e4       	ldi	r21, 0x44	; 68
    11f8:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <timeTGT>
    11fc:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <timeTGT+0x1>
    1200:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <timeTGT+0x2>
    1204:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <timeTGT+0x3>
    1208:	0e 94 83 19 	call	0x3306	; 0x3306 <__mulsf3>
    120c:	6b 01       	movw	r12, r22
    120e:	7c 01       	movw	r14, r24
    1210:	20 e0       	ldi	r18, 0x00	; 0
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	40 e2       	ldi	r20, 0x20	; 32
    1216:	51 e4       	ldi	r21, 0x41	; 65
    1218:	60 91 9a 02 	lds	r22, 0x029A	; 0x80029a <F_in>
    121c:	70 91 9b 02 	lds	r23, 0x029B	; 0x80029b <F_in+0x1>
    1220:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <F_in+0x2>
    1224:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <F_in+0x3>
    1228:	0e 94 83 19 	call	0x3306	; 0x3306 <__mulsf3>
    122c:	9b 01       	movw	r18, r22
    122e:	ac 01       	movw	r20, r24
    1230:	c7 01       	movw	r24, r14
    1232:	b6 01       	movw	r22, r12
    1234:	0e 94 24 18 	call	0x3048	; 0x3048 <__divsf3>
    1238:	0e 94 9d 18 	call	0x313a	; 0x313a <__fixunssfsi>
    123c:	60 93 8b 02 	sts	0x028B, r22	; 0x80028b <timeChange>
    1240:	70 93 8c 02 	sts	0x028C, r23	; 0x80028c <timeChange+0x1>
    1244:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <timeChange+0x2>
    1248:	90 93 8e 02 	sts	0x028E, r25	; 0x80028e <timeChange+0x3>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:377
      lcd.clear();
    124c:	81 eb       	ldi	r24, 0xB1	; 177
    124e:	92 e0       	ldi	r25, 0x02	; 2
    1250:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <LiquidCrystal_I2C::clear()>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:380
    }
  }
  if (digitalRead(stop) == 0) {
    1254:	87 e0       	ldi	r24, 0x07	; 7
    1256:	0e 94 88 17 	call	0x2f10	; 0x2f10 <digitalRead>
    125a:	89 2b       	or	r24, r25
    125c:	59 f5       	brne	.+86     	; 0x12b4 <ChangeVR()+0x256>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:381
    timeBack = millis();
    125e:	0e 94 02 16 	call	0x2c04	; 0x2c04 <millis>
    1262:	60 93 81 02 	sts	0x0281, r22	; 0x800281 <timeBack>
    1266:	70 93 82 02 	sts	0x0282, r23	; 0x800282 <timeBack+0x1>
    126a:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <timeBack+0x2>
    126e:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <timeBack+0x3>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:382
    while (digitalRead(stop) == 0)
    1272:	87 e0       	ldi	r24, 0x07	; 7
    1274:	0e 94 88 17 	call	0x2f10	; 0x2f10 <digitalRead>
    1278:	89 2b       	or	r24, r25
    127a:	d9 f3       	breq	.-10     	; 0x1272 <ChangeVR()+0x214>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:384
      ;
    if ((unsigned long)millis() - timeBack > 200) {
    127c:	0e 94 02 16 	call	0x2c04	; 0x2c04 <millis>
    1280:	c0 90 81 02 	lds	r12, 0x0281	; 0x800281 <timeBack>
    1284:	d0 90 82 02 	lds	r13, 0x0282	; 0x800282 <timeBack+0x1>
    1288:	e0 90 83 02 	lds	r14, 0x0283	; 0x800283 <timeBack+0x2>
    128c:	f0 90 84 02 	lds	r15, 0x0284	; 0x800284 <timeBack+0x3>
    1290:	6c 19       	sub	r22, r12
    1292:	7d 09       	sbc	r23, r13
    1294:	8e 09       	sbc	r24, r14
    1296:	9f 09       	sbc	r25, r15
    1298:	69 3c       	cpi	r22, 0xC9	; 201
    129a:	71 05       	cpc	r23, r1
    129c:	81 05       	cpc	r24, r1
    129e:	91 05       	cpc	r25, r1
    12a0:	48 f0       	brcs	.+18     	; 0x12b4 <ChangeVR()+0x256>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:385
      sttMotor = 0;
    12a2:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <sttMotor>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:386
      bitStop = 1;
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <__data_end>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:387
      lcd.clear();
    12ac:	81 eb       	ldi	r24, 0xB1	; 177
    12ae:	92 e0       	ldi	r25, 0x02	; 2
    12b0:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <LiquidCrystal_I2C::clear()>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:391
    }
  }

  if (sttMotor == 1) {
    12b4:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <sttMotor>
    12b8:	81 30       	cpi	r24, 0x01	; 1
    12ba:	09 f0       	breq	.+2      	; 0x12be <ChangeVR()+0x260>
    12bc:	d7 c0       	rjmp	.+430    	; 0x146c <ChangeVR()+0x40e>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:392
    if ((unsigned long)millis() - timeCTMotor > timeChange) {
    12be:	0e 94 02 16 	call	0x2c04	; 0x2c04 <millis>
    12c2:	c0 90 7d 02 	lds	r12, 0x027D	; 0x80027d <timeCTMotor>
    12c6:	d0 90 7e 02 	lds	r13, 0x027E	; 0x80027e <timeCTMotor+0x1>
    12ca:	e0 90 7f 02 	lds	r14, 0x027F	; 0x80027f <timeCTMotor+0x2>
    12ce:	f0 90 80 02 	lds	r15, 0x0280	; 0x800280 <timeCTMotor+0x3>
    12d2:	6c 19       	sub	r22, r12
    12d4:	7d 09       	sbc	r23, r13
    12d6:	8e 09       	sbc	r24, r14
    12d8:	9f 09       	sbc	r25, r15
    12da:	c0 90 8b 02 	lds	r12, 0x028B	; 0x80028b <timeChange>
    12de:	d0 90 8c 02 	lds	r13, 0x028C	; 0x80028c <timeChange+0x1>
    12e2:	e0 90 8d 02 	lds	r14, 0x028D	; 0x80028d <timeChange+0x2>
    12e6:	f0 90 8e 02 	lds	r15, 0x028E	; 0x80028e <timeChange+0x3>
    12ea:	c6 16       	cp	r12, r22
    12ec:	d7 06       	cpc	r13, r23
    12ee:	e8 06       	cpc	r14, r24
    12f0:	f9 06       	cpc	r15, r25
    12f2:	08 f0       	brcs	.+2      	; 0x12f6 <ChangeVR()+0x298>
    12f4:	bb c0       	rjmp	.+374    	; 0x146c <ChangeVR()+0x40e>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:393
      if (F_out < F_in) {
    12f6:	c0 90 96 02 	lds	r12, 0x0296	; 0x800296 <F_out>
    12fa:	d0 90 97 02 	lds	r13, 0x0297	; 0x800297 <F_out+0x1>
    12fe:	e0 90 98 02 	lds	r14, 0x0298	; 0x800298 <F_out+0x2>
    1302:	f0 90 99 02 	lds	r15, 0x0299	; 0x800299 <F_out+0x3>
    1306:	20 91 9a 02 	lds	r18, 0x029A	; 0x80029a <F_in>
    130a:	30 91 9b 02 	lds	r19, 0x029B	; 0x80029b <F_in+0x1>
    130e:	40 91 9c 02 	lds	r20, 0x029C	; 0x80029c <F_in+0x2>
    1312:	50 91 9d 02 	lds	r21, 0x029D	; 0x80029d <F_in+0x3>
    1316:	c7 01       	movw	r24, r14
    1318:	b6 01       	movw	r22, r12
    131a:	0e 94 1f 18 	call	0x303e	; 0x303e <__cmpsf2>
    131e:	87 ff       	sbrs	r24, 7
    1320:	4a c0       	rjmp	.+148    	; 0x13b6 <ChangeVR()+0x358>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:394
        F_out += 0, 1;
    1322:	20 e0       	ldi	r18, 0x00	; 0
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	a9 01       	movw	r20, r18
    1328:	c7 01       	movw	r24, r14
    132a:	b6 01       	movw	r22, r12
    132c:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__addsf3>
    1330:	6b 01       	movw	r12, r22
    1332:	7c 01       	movw	r14, r24
    1334:	c0 92 96 02 	sts	0x0296, r12	; 0x800296 <F_out>
    1338:	d0 92 97 02 	sts	0x0297, r13	; 0x800297 <F_out+0x1>
    133c:	e0 92 98 02 	sts	0x0298, r14	; 0x800298 <F_out+0x2>
    1340:	f0 92 99 02 	sts	0x0299, r15	; 0x800299 <F_out+0x3>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:395
        if ((F_out > 0) && (F_out < 50)) {
    1344:	20 e0       	ldi	r18, 0x00	; 0
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	a9 01       	movw	r20, r18
    134a:	0e 94 7e 19 	call	0x32fc	; 0x32fc <__gesf2>
    134e:	18 16       	cp	r1, r24
    1350:	0c f0       	brlt	.+2      	; 0x1354 <ChangeVR()+0x2f6>
    1352:	f1 c0       	rjmp	.+482    	; 0x1536 <ChangeVR()+0x4d8>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:395 (discriminator 1)
    1354:	20 e0       	ldi	r18, 0x00	; 0
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	48 e4       	ldi	r20, 0x48	; 72
    135a:	52 e4       	ldi	r21, 0x42	; 66
    135c:	c7 01       	movw	r24, r14
    135e:	b6 01       	movw	r22, r12
    1360:	0e 94 1f 18 	call	0x303e	; 0x303e <__cmpsf2>
    1364:	87 ff       	sbrs	r24, 7
    1366:	e7 c0       	rjmp	.+462    	; 0x1536 <ChangeVR()+0x4d8>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:396
          constVF = map(F_out, 0, 49, 0.1, 0.99);
    1368:	c7 01       	movw	r24, r14
    136a:	b6 01       	movw	r22, r12
    136c:	0e 94 96 18 	call	0x312c	; 0x312c <__fixsfsi>
    1370:	1f 92       	push	r1
    1372:	1f 92       	push	r1
    1374:	1f 92       	push	r1
    1376:	1f 92       	push	r1
    1378:	a1 2c       	mov	r10, r1
    137a:	b1 2c       	mov	r11, r1
    137c:	65 01       	movw	r12, r10
    137e:	11 e3       	ldi	r17, 0x31	; 49
    1380:	e1 2e       	mov	r14, r17
    1382:	f1 2c       	mov	r15, r1
    1384:	00 e0       	ldi	r16, 0x00	; 0
    1386:	10 e0       	ldi	r17, 0x00	; 0
    1388:	20 e0       	ldi	r18, 0x00	; 0
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	a9 01       	movw	r20, r18
    138e:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <map(long, long, long, long, long)>
    1392:	70 93 ae 02 	sts	0x02AE, r23	; 0x8002ae <constVF+0x1>
    1396:	60 93 ad 02 	sts	0x02AD, r22	; 0x8002ad <constVF>
    139a:	0f 90       	pop	r0
    139c:	0f 90       	pop	r0
    139e:	0f 90       	pop	r0
    13a0:	0f 90       	pop	r0
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:400
        } else {
          constVF = 1;
        }
        changeFreq(F_out);
    13a2:	60 91 96 02 	lds	r22, 0x0296	; 0x800296 <F_out>
    13a6:	70 91 97 02 	lds	r23, 0x0297	; 0x800297 <F_out+0x1>
    13aa:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <F_out+0x2>
    13ae:	90 91 99 02 	lds	r25, 0x0299	; 0x800299 <F_out+0x3>
    13b2:	0e 94 35 05 	call	0xa6a	; 0xa6a <changeFreq(float)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:402
      }
      if (F_out > F_in) {
    13b6:	c0 90 96 02 	lds	r12, 0x0296	; 0x800296 <F_out>
    13ba:	d0 90 97 02 	lds	r13, 0x0297	; 0x800297 <F_out+0x1>
    13be:	e0 90 98 02 	lds	r14, 0x0298	; 0x800298 <F_out+0x2>
    13c2:	f0 90 99 02 	lds	r15, 0x0299	; 0x800299 <F_out+0x3>
    13c6:	20 91 9a 02 	lds	r18, 0x029A	; 0x80029a <F_in>
    13ca:	30 91 9b 02 	lds	r19, 0x029B	; 0x80029b <F_in+0x1>
    13ce:	40 91 9c 02 	lds	r20, 0x029C	; 0x80029c <F_in+0x2>
    13d2:	50 91 9d 02 	lds	r21, 0x029D	; 0x80029d <F_in+0x3>
    13d6:	c7 01       	movw	r24, r14
    13d8:	b6 01       	movw	r22, r12
    13da:	0e 94 7e 19 	call	0x32fc	; 0x32fc <__gesf2>
    13de:	18 16       	cp	r1, r24
    13e0:	dc f5       	brge	.+118    	; 0x1458 <ChangeVR()+0x3fa>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:404
        F_out -= 0, 1;
        if ((F_out > 0) && (F_out < 50)) {
    13e2:	20 e0       	ldi	r18, 0x00	; 0
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	a9 01       	movw	r20, r18
    13e8:	c7 01       	movw	r24, r14
    13ea:	b6 01       	movw	r22, r12
    13ec:	0e 94 7e 19 	call	0x32fc	; 0x32fc <__gesf2>
    13f0:	18 16       	cp	r1, r24
    13f2:	0c f0       	brlt	.+2      	; 0x13f6 <ChangeVR()+0x398>
    13f4:	a7 c0       	rjmp	.+334    	; 0x1544 <ChangeVR()+0x4e6>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:404 (discriminator 1)
    13f6:	20 e0       	ldi	r18, 0x00	; 0
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	48 e4       	ldi	r20, 0x48	; 72
    13fc:	52 e4       	ldi	r21, 0x42	; 66
    13fe:	c7 01       	movw	r24, r14
    1400:	b6 01       	movw	r22, r12
    1402:	0e 94 1f 18 	call	0x303e	; 0x303e <__cmpsf2>
    1406:	87 ff       	sbrs	r24, 7
    1408:	9d c0       	rjmp	.+314    	; 0x1544 <ChangeVR()+0x4e6>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:405
          constVF = map(F_out, 0, 49, 0.1, 0.99);
    140a:	c7 01       	movw	r24, r14
    140c:	b6 01       	movw	r22, r12
    140e:	0e 94 96 18 	call	0x312c	; 0x312c <__fixsfsi>
    1412:	1f 92       	push	r1
    1414:	1f 92       	push	r1
    1416:	1f 92       	push	r1
    1418:	1f 92       	push	r1
    141a:	a1 2c       	mov	r10, r1
    141c:	b1 2c       	mov	r11, r1
    141e:	65 01       	movw	r12, r10
    1420:	11 e3       	ldi	r17, 0x31	; 49
    1422:	e1 2e       	mov	r14, r17
    1424:	f1 2c       	mov	r15, r1
    1426:	00 e0       	ldi	r16, 0x00	; 0
    1428:	10 e0       	ldi	r17, 0x00	; 0
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	a9 01       	movw	r20, r18
    1430:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <map(long, long, long, long, long)>
    1434:	70 93 ae 02 	sts	0x02AE, r23	; 0x8002ae <constVF+0x1>
    1438:	60 93 ad 02 	sts	0x02AD, r22	; 0x8002ad <constVF>
    143c:	0f 90       	pop	r0
    143e:	0f 90       	pop	r0
    1440:	0f 90       	pop	r0
    1442:	0f 90       	pop	r0
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:409
        } else {
          constVF = 1;
        }
        changeFreq(F_out);
    1444:	60 91 96 02 	lds	r22, 0x0296	; 0x800296 <F_out>
    1448:	70 91 97 02 	lds	r23, 0x0297	; 0x800297 <F_out+0x1>
    144c:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <F_out+0x2>
    1450:	90 91 99 02 	lds	r25, 0x0299	; 0x800299 <F_out+0x3>
    1454:	0e 94 35 05 	call	0xa6a	; 0xa6a <changeFreq(float)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:411
      }
      timeCTMotor = millis();
    1458:	0e 94 02 16 	call	0x2c04	; 0x2c04 <millis>
    145c:	60 93 7d 02 	sts	0x027D, r22	; 0x80027d <timeCTMotor>
    1460:	70 93 7e 02 	sts	0x027E, r23	; 0x80027e <timeCTMotor+0x1>
    1464:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <timeCTMotor+0x2>
    1468:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <timeCTMotor+0x3>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:414
    }
  }
  if (bitStop == 1 && sttMotor == 0) {
    146c:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <__data_end>
    1470:	81 30       	cpi	r24, 0x01	; 1
    1472:	09 f0       	breq	.+2      	; 0x1476 <ChangeVR()+0x418>
    1474:	3f c0       	rjmp	.+126    	; 0x14f4 <ChangeVR()+0x496>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:414 (discriminator 1)
    1476:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <sttMotor>
    147a:	81 11       	cpse	r24, r1
    147c:	3b c0       	rjmp	.+118    	; 0x14f4 <ChangeVR()+0x496>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:416
    /* code */
    if ((unsigned long)millis() - timeCTMotor > timeChange) {
    147e:	0e 94 02 16 	call	0x2c04	; 0x2c04 <millis>
    1482:	c0 90 7d 02 	lds	r12, 0x027D	; 0x80027d <timeCTMotor>
    1486:	d0 90 7e 02 	lds	r13, 0x027E	; 0x80027e <timeCTMotor+0x1>
    148a:	e0 90 7f 02 	lds	r14, 0x027F	; 0x80027f <timeCTMotor+0x2>
    148e:	f0 90 80 02 	lds	r15, 0x0280	; 0x800280 <timeCTMotor+0x3>
    1492:	6c 19       	sub	r22, r12
    1494:	7d 09       	sbc	r23, r13
    1496:	8e 09       	sbc	r24, r14
    1498:	9f 09       	sbc	r25, r15
    149a:	c0 90 8b 02 	lds	r12, 0x028B	; 0x80028b <timeChange>
    149e:	d0 90 8c 02 	lds	r13, 0x028C	; 0x80028c <timeChange+0x1>
    14a2:	e0 90 8d 02 	lds	r14, 0x028D	; 0x80028d <timeChange+0x2>
    14a6:	f0 90 8e 02 	lds	r15, 0x028E	; 0x80028e <timeChange+0x3>
    14aa:	c6 16       	cp	r12, r22
    14ac:	d7 06       	cpc	r13, r23
    14ae:	e8 06       	cpc	r14, r24
    14b0:	f9 06       	cpc	r15, r25
    14b2:	00 f5       	brcc	.+64     	; 0x14f4 <ChangeVR()+0x496>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:417
      if (F_out > 10) {
    14b4:	c0 90 96 02 	lds	r12, 0x0296	; 0x800296 <F_out>
    14b8:	d0 90 97 02 	lds	r13, 0x0297	; 0x800297 <F_out+0x1>
    14bc:	e0 90 98 02 	lds	r14, 0x0298	; 0x800298 <F_out+0x2>
    14c0:	f0 90 99 02 	lds	r15, 0x0299	; 0x800299 <F_out+0x3>
    14c4:	20 e0       	ldi	r18, 0x00	; 0
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	40 e2       	ldi	r20, 0x20	; 32
    14ca:	51 e4       	ldi	r21, 0x41	; 65
    14cc:	c7 01       	movw	r24, r14
    14ce:	b6 01       	movw	r22, r12
    14d0:	0e 94 7e 19 	call	0x32fc	; 0x32fc <__gesf2>
    14d4:	18 16       	cp	r1, r24
    14d6:	ec f5       	brge	.+122    	; 0x1552 <ChangeVR()+0x4f4>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:419
        F_out -= 0, 1;
        changeFreq(F_out);
    14d8:	c7 01       	movw	r24, r14
    14da:	b6 01       	movw	r22, r12
    14dc:	0e 94 35 05 	call	0xa6a	; 0xa6a <changeFreq(float)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:430
        OCR1B = 0;
        OCR2A = 0;
        OCR2B = 0;
        bitStop = 0;
      }
      timeCTMotor = millis();
    14e0:	0e 94 02 16 	call	0x2c04	; 0x2c04 <millis>
    14e4:	60 93 7d 02 	sts	0x027D, r22	; 0x80027d <timeCTMotor>
    14e8:	70 93 7e 02 	sts	0x027E, r23	; 0x80027e <timeCTMotor+0x1>
    14ec:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <timeCTMotor+0x2>
    14f0:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <timeCTMotor+0x3>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:435
    }
  }


  if (Back() == 1) {
    14f4:	0e 94 43 01 	call	0x286	; 0x286 <Back()>
    14f8:	81 30       	cpi	r24, 0x01	; 1
    14fa:	81 f4       	brne	.+32     	; 0x151c <ChangeVR()+0x4be>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:436
    if (sttMotor == 0 && bitStop == 0) {
    14fc:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <sttMotor>
    1500:	81 11       	cpse	r24, r1
    1502:	3d c0       	rjmp	.+122    	; 0x157e <ChangeVR()+0x520>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:436 (discriminator 1)
    1504:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <__data_end>
    1508:	81 11       	cpse	r24, r1
    150a:	39 c0       	rjmp	.+114    	; 0x157e <ChangeVR()+0x520>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:437
      mode = 0;
    150c:	10 92 8f 02 	sts	0x028F, r1	; 0x80028f <mode>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:438
      lcd.clear();
    1510:	81 eb       	ldi	r24, 0xB1	; 177
    1512:	92 e0       	ldi	r25, 0x02	; 2
    1514:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <LiquidCrystal_I2C::clear()>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:443
      sttButton = 0;
    } else {
      lcd.setCursor(7, 3);
      lcd.print("--Off Motor--");
      sttButton = 0;
    1518:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <sttButton>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:446
    }
  }
}
    151c:	1f 91       	pop	r17
    151e:	0f 91       	pop	r16
    1520:	ff 90       	pop	r15
    1522:	ef 90       	pop	r14
    1524:	df 90       	pop	r13
    1526:	cf 90       	pop	r12
    1528:	bf 90       	pop	r11
    152a:	af 90       	pop	r10
    152c:	7f 90       	pop	r7
    152e:	6f 90       	pop	r6
    1530:	5f 90       	pop	r5
    1532:	4f 90       	pop	r4
    1534:	08 95       	ret
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:398
      if (F_out < F_in) {
        F_out += 0, 1;
        if ((F_out > 0) && (F_out < 50)) {
          constVF = map(F_out, 0, 49, 0.1, 0.99);
        } else {
          constVF = 1;
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	90 93 ae 02 	sts	0x02AE, r25	; 0x8002ae <constVF+0x1>
    153e:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <constVF>
    1542:	2f cf       	rjmp	.-418    	; 0x13a2 <ChangeVR()+0x344>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:407
      if (F_out > F_in) {
        F_out -= 0, 1;
        if ((F_out > 0) && (F_out < 50)) {
          constVF = map(F_out, 0, 49, 0.1, 0.99);
        } else {
          constVF = 1;
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	90 93 ae 02 	sts	0x02AE, r25	; 0x8002ae <constVF+0x1>
    154c:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <constVF>
    1550:	79 cf       	rjmp	.-270    	; 0x1444 <ChangeVR()+0x3e6>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:421
    if ((unsigned long)millis() - timeCTMotor > timeChange) {
      if (F_out > 10) {
        F_out -= 0, 1;
        changeFreq(F_out);
      } else {
        cbi(TIMSK2, TOIE2);
    1552:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
    1556:	8e 7f       	andi	r24, 0xFE	; 254
    1558:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:422
        OCR0A = 0;
    155c:	17 bc       	out	0x27, r1	; 39
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:423
        OCR0B = 0;
    155e:	18 bc       	out	0x28, r1	; 40
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:424
        OCR1A = 0;
    1560:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    1564:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:425
        OCR1B = 0;
    1568:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    156c:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:426
        OCR2A = 0;
    1570:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:427
        OCR2B = 0;
    1574:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:428
        bitStop = 0;
    1578:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <__data_end>
    157c:	b1 cf       	rjmp	.-158    	; 0x14e0 <ChangeVR()+0x482>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:441
    if (sttMotor == 0 && bitStop == 0) {
      mode = 0;
      lcd.clear();
      sttButton = 0;
    } else {
      lcd.setCursor(7, 3);
    157e:	43 e0       	ldi	r20, 0x03	; 3
    1580:	67 e0       	ldi	r22, 0x07	; 7
    1582:	81 eb       	ldi	r24, 0xB1	; 177
    1584:	92 e0       	ldi	r25, 0x02	; 2
    1586:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:442
      lcd.print("--Off Motor--");
    158a:	6e ee       	ldi	r22, 0xEE	; 238
    158c:	71 e0       	ldi	r23, 0x01	; 1
    158e:	81 eb       	ldi	r24, 0xB1	; 177
    1590:	92 e0       	ldi	r25, 0x02	; 2
    1592:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <Print::print(char const*)>
    1596:	c0 cf       	rjmp	.-128    	; 0x1518 <ChangeVR()+0x4ba>

00001598 <loop>:
loop():
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:102
  //    for every call to the ISR of timer2 overflow
  // the lsb of the 8 highest bits is 1<<24 (1LL<<24 for long integer literal)
  delta = (1LL << 24) * freq / refclk;
}
void loop() {
  switch (mode) {
    1598:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <mode>
    159c:	82 30       	cpi	r24, 0x02	; 2
    159e:	81 f0       	breq	.+32     	; 0x15c0 <loop+0x28>
    15a0:	28 f4       	brcc	.+10     	; 0x15ac <loop+0x14>
    15a2:	88 23       	and	r24, r24
    15a4:	49 f0       	breq	.+18     	; 0x15b8 <loop+0x20>
    15a6:	81 30       	cpi	r24, 0x01	; 1
    15a8:	49 f0       	breq	.+18     	; 0x15bc <loop+0x24>
    15aa:	08 95       	ret
    15ac:	84 30       	cpi	r24, 0x04	; 4
    15ae:	61 f0       	breq	.+24     	; 0x15c8 <loop+0x30>
    15b0:	48 f0       	brcs	.+18     	; 0x15c4 <loop+0x2c>
    15b2:	85 30       	cpi	r24, 0x05	; 5
    15b4:	59 f0       	breq	.+22     	; 0x15cc <loop+0x34>
    15b6:	08 95       	ret
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:105
    case 0:
      {
        displayMain();
    15b8:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <displayMain()>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:110
        break;
      }
    case 1:
      {
        displayControl();
    15bc:	0c 94 68 05 	jmp	0xad0	; 0xad0 <displayControl()>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:115
        break;
      }
    case 2:
      {
        ChangeVR();
    15c0:	0c 94 2f 08 	jmp	0x105e	; 0x105e <ChangeVR()>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:120
        break;
      }
    case 3:
      {
        TGTangGiamToc();
    15c4:	0c 94 b9 02 	jmp	0x572	; 0x572 <TGTangGiamToc()>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:125
        break;
      }
    case 4:
      {
        ThuanNghich();
    15c8:	0c 94 9f 03 	jmp	0x73e	; 0x73e <ThuanNghich()>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:130
        break;
      }
    case 5:
      {
        SetTanSo();
    15cc:	0c 94 5c 04 	jmp	0x8b8	; 0x8b8 <SetTanSo()>

000015d0 <Setup_timer2()>:
_Z12Setup_timer2v():
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:638
// timer2 setup
// set prscaler to 1,  fast PWM
void Setup_timer2() {

  // Timer2 Clock Prescaler to : 1
  sbi(TCCR2B, CS20);  // set
    15d0:	a1 eb       	ldi	r26, 0xB1	; 177
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	8c 91       	ld	r24, X
    15d6:	81 60       	ori	r24, 0x01	; 1
    15d8:	8c 93       	st	X, r24
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:639
  cbi(TCCR2B, CS21);  // clear
    15da:	8c 91       	ld	r24, X
    15dc:	8d 7f       	andi	r24, 0xFD	; 253
    15de:	8c 93       	st	X, r24
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:640
  cbi(TCCR2B, CS22);
    15e0:	8c 91       	ld	r24, X
    15e2:	8b 7f       	andi	r24, 0xFB	; 251
    15e4:	8c 93       	st	X, r24
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:643

  // Timer2 PWM Mode
  cbi(TCCR2A, COM2A0);  // clear OC2A on Compare Match, PWM pin 11
    15e6:	e0 eb       	ldi	r30, 0xB0	; 176
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	8f 7b       	andi	r24, 0xBF	; 191
    15ee:	80 83       	st	Z, r24
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:644
  sbi(TCCR2A, COM2A1);
    15f0:	80 81       	ld	r24, Z
    15f2:	80 68       	ori	r24, 0x80	; 128
    15f4:	80 83       	st	Z, r24
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:645
  sbi(TCCR2A, COM2B0);
    15f6:	80 81       	ld	r24, Z
    15f8:	80 61       	ori	r24, 0x10	; 16
    15fa:	80 83       	st	Z, r24
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:646
  sbi(TCCR2A, COM2B1);
    15fc:	80 81       	ld	r24, Z
    15fe:	80 62       	ori	r24, 0x20	; 32
    1600:	80 83       	st	Z, r24
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:649

  // set to fast PWM
  sbi(TCCR2A, WGM20);  // Mode 1, phase correct PWM
    1602:	80 81       	ld	r24, Z
    1604:	81 60       	ori	r24, 0x01	; 1
    1606:	80 83       	st	Z, r24
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:650
  cbi(TCCR2A, WGM21);
    1608:	80 81       	ld	r24, Z
    160a:	8d 7f       	andi	r24, 0xFD	; 253
    160c:	80 83       	st	Z, r24
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:651
  cbi(TCCR2B, WGM22);
    160e:	8c 91       	ld	r24, X
    1610:	87 7f       	andi	r24, 0xF7	; 247
    1612:	8c 93       	st	X, r24
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:653

  sbi(TIMSK2, TOIE2);  // enable overflow detect
    1614:	e0 e7       	ldi	r30, 0x70	; 112
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	81 60       	ori	r24, 0x01	; 1
    161c:	80 83       	st	Z, r24
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:654
}
    161e:	08 95       	ret

00001620 <Setup_timer1()>:
_Z12Setup_timer1v():
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:659
// timer1 setup  (sets pins 9 and 10)
// set prscaler to 1, PWM mode to phase correct PWM,  16000000/510 = 31372.55 Hz clock
void Setup_timer1() {
  // Timer1 Clock Prescaler to : 1
  sbi(TCCR1B, CS10);
    1620:	a1 e8       	ldi	r26, 0x81	; 129
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	8c 91       	ld	r24, X
    1626:	81 60       	ori	r24, 0x01	; 1
    1628:	8c 93       	st	X, r24
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:660
  cbi(TCCR1B, CS11);
    162a:	8c 91       	ld	r24, X
    162c:	8d 7f       	andi	r24, 0xFD	; 253
    162e:	8c 93       	st	X, r24
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:661
  cbi(TCCR1B, CS12);
    1630:	8c 91       	ld	r24, X
    1632:	8b 7f       	andi	r24, 0xFB	; 251
    1634:	8c 93       	st	X, r24
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:663
  // Timer1 PWM Mode set to Phase Correct PWM
  cbi(TCCR1A, COM1A0);  // clear OC1A on Compare Match, PWM pin 9
    1636:	e0 e8       	ldi	r30, 0x80	; 128
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	8f 7b       	andi	r24, 0xBF	; 191
    163e:	80 83       	st	Z, r24
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:664
  sbi(TCCR1A, COM1A1);
    1640:	80 81       	ld	r24, Z
    1642:	80 68       	ori	r24, 0x80	; 128
    1644:	80 83       	st	Z, r24
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:665
  sbi(TCCR1A, COM1B0);  // clear OC1B on Compare Match, PWM pin 10
    1646:	80 81       	ld	r24, Z
    1648:	80 61       	ori	r24, 0x10	; 16
    164a:	80 83       	st	Z, r24
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:666
  sbi(TCCR1A, COM1B1);
    164c:	80 81       	ld	r24, Z
    164e:	80 62       	ori	r24, 0x20	; 32
    1650:	80 83       	st	Z, r24
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:668

  sbi(TCCR1A, WGM10);  // Mode 1  / phase correct PWM
    1652:	80 81       	ld	r24, Z
    1654:	81 60       	ori	r24, 0x01	; 1
    1656:	80 83       	st	Z, r24
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:669
  cbi(TCCR1A, WGM11);
    1658:	80 81       	ld	r24, Z
    165a:	8d 7f       	andi	r24, 0xFD	; 253
    165c:	80 83       	st	Z, r24
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:670
  cbi(TCCR1B, WGM12);
    165e:	8c 91       	ld	r24, X
    1660:	87 7f       	andi	r24, 0xF7	; 247
    1662:	8c 93       	st	X, r24
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:671
  cbi(TCCR1B, WGM13);
    1664:	8c 91       	ld	r24, X
    1666:	8f 7e       	andi	r24, 0xEF	; 239
    1668:	8c 93       	st	X, r24
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:672
}
    166a:	08 95       	ret

0000166c <Setup_timer0()>:
_Z12Setup_timer0v():
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:678

//SET TIMER 0
void Setup_timer0() {

  // Timer0 Clock Prescaler to : 1
  sbi(TCCR0B, CS00);  // set
    166c:	85 b5       	in	r24, 0x25	; 37
    166e:	81 60       	ori	r24, 0x01	; 1
    1670:	85 bd       	out	0x25, r24	; 37
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:679
  cbi(TCCR0B, CS01);  // clear
    1672:	85 b5       	in	r24, 0x25	; 37
    1674:	8d 7f       	andi	r24, 0xFD	; 253
    1676:	85 bd       	out	0x25, r24	; 37
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:680
  cbi(TCCR0B, CS02);
    1678:	85 b5       	in	r24, 0x25	; 37
    167a:	8b 7f       	andi	r24, 0xFB	; 251
    167c:	85 bd       	out	0x25, r24	; 37
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:683

  // Timer0 PWM Mode
  cbi(TCCR0A, COM0A0);  // clear OC2A on Compare Match, PWM pin 11
    167e:	84 b5       	in	r24, 0x24	; 36
    1680:	8f 7b       	andi	r24, 0xBF	; 191
    1682:	84 bd       	out	0x24, r24	; 36
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:684
  sbi(TCCR0A, COM0A1);
    1684:	84 b5       	in	r24, 0x24	; 36
    1686:	80 68       	ori	r24, 0x80	; 128
    1688:	84 bd       	out	0x24, r24	; 36
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:686

  sbi(TCCR0A, COM0B0);
    168a:	84 b5       	in	r24, 0x24	; 36
    168c:	80 61       	ori	r24, 0x10	; 16
    168e:	84 bd       	out	0x24, r24	; 36
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:687
  sbi(TCCR0A, COM0B1);
    1690:	84 b5       	in	r24, 0x24	; 36
    1692:	80 62       	ori	r24, 0x20	; 32
    1694:	84 bd       	out	0x24, r24	; 36
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:691


  // set to fast PWM
  sbi(TCCR0A, WGM00);  // Mode 1, phase correct PWM
    1696:	84 b5       	in	r24, 0x24	; 36
    1698:	81 60       	ori	r24, 0x01	; 1
    169a:	84 bd       	out	0x24, r24	; 36
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:692
  cbi(TCCR0A, WGM01);
    169c:	84 b5       	in	r24, 0x24	; 36
    169e:	8d 7f       	andi	r24, 0xFD	; 253
    16a0:	84 bd       	out	0x24, r24	; 36
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:693
  cbi(TCCR0B, WGM02);
    16a2:	85 b5       	in	r24, 0x25	; 37
    16a4:	87 7f       	andi	r24, 0xF7	; 247
    16a6:	85 bd       	out	0x25, r24	; 37
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:694
}
    16a8:	08 95       	ret

000016aa <setup>:
_ZN14HardwareSerial5beginEm():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.h:121
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    16aa:	26 e0       	ldi	r18, 0x06	; 6
    16ac:	40 e8       	ldi	r20, 0x80	; 128
    16ae:	55 e2       	ldi	r21, 0x25	; 37
    16b0:	60 e0       	ldi	r22, 0x00	; 0
    16b2:	70 e0       	ldi	r23, 0x00	; 0
    16b4:	8e e3       	ldi	r24, 0x3E	; 62
    16b6:	93 e0       	ldi	r25, 0x03	; 3
    16b8:	0e 94 cf 12 	call	0x259e	; 0x259e <HardwareSerial::begin(unsigned long, unsigned char)>
setup():
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:55
unsigned long timeBack = 0, timeCTMotor;
float timeTGT = 5;
unsigned char bitStop = 0;
void setup() {
  Serial.begin(9600);  // connect to the serial port
  Serial.println("DDS Test");
    16bc:	6d e0       	ldi	r22, 0x0D	; 13
    16be:	72 e0       	ldi	r23, 0x02	; 2
    16c0:	8e e3       	ldi	r24, 0x3E	; 62
    16c2:	93 e0       	ldi	r25, 0x03	; 3
    16c4:	0e 94 ff 13 	call	0x27fe	; 0x27fe <Print::println(char const*)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:59

  //pinMode(enablePin, OUTPUT);      // sets the digital pin as output
  //pinMode(testPin, OUTPUT);      // sets the digital pin as output
  pinMode(9, OUTPUT);   // pin9 =  PWM  output / frequency output  UH  OCR1A
    16c8:	61 e0       	ldi	r22, 0x01	; 1
    16ca:	89 e0       	ldi	r24, 0x09	; 9
    16cc:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <pinMode>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:60
  pinMode(10, OUTPUT);  // pin10=  PWM  output / frequency output  UL  OCR1B
    16d0:	61 e0       	ldi	r22, 0x01	; 1
    16d2:	8a e0       	ldi	r24, 0x0A	; 10
    16d4:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <pinMode>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:61
  pinMode(11, OUTPUT);  // pin11=  PWM  output / frequency output  WH  0CR2A
    16d8:	61 e0       	ldi	r22, 0x01	; 1
    16da:	8b e0       	ldi	r24, 0x0B	; 11
    16dc:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <pinMode>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:62
  pinMode(3, OUTPUT);   // pin3 =  PWM  output / frequency output  WL  0CR2B
    16e0:	61 e0       	ldi	r22, 0x01	; 1
    16e2:	83 e0       	ldi	r24, 0x03	; 3
    16e4:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <pinMode>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:63
  pinMode(6, OUTPUT);   // pin6 =  PWM  output / frequency output  VH  0CR0A
    16e8:	61 e0       	ldi	r22, 0x01	; 1
    16ea:	86 e0       	ldi	r24, 0x06	; 6
    16ec:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <pinMode>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:64
  pinMode(5, OUTPUT);   // pin5 =  PWM  output / frequency output  VL  0CR0B
    16f0:	61 e0       	ldi	r22, 0x01	; 1
    16f2:	85 e0       	ldi	r24, 0x05	; 5
    16f4:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <pinMode>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:66

  pinMode(start, INPUT_PULLUP);
    16f8:	62 e0       	ldi	r22, 0x02	; 2
    16fa:	84 e0       	ldi	r24, 0x04	; 4
    16fc:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <pinMode>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:67
  pinMode(stop, INPUT_PULLUP);
    1700:	62 e0       	ldi	r22, 0x02	; 2
    1702:	87 e0       	ldi	r24, 0x07	; 7
    1704:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <pinMode>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:68
  pinMode(enter, INPUT_PULLUP);
    1708:	62 e0       	ldi	r22, 0x02	; 2
    170a:	8d e0       	ldi	r24, 0x0D	; 13
    170c:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <pinMode>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:69
  pinMode(up, INPUT_PULLUP);
    1710:	62 e0       	ldi	r22, 0x02	; 2
    1712:	88 e0       	ldi	r24, 0x08	; 8
    1714:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <pinMode>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:70
  pinMode(down, INPUT_PULLUP);
    1718:	62 e0       	ldi	r22, 0x02	; 2
    171a:	8c e0       	ldi	r24, 0x0C	; 12
    171c:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <pinMode>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:71
  pinMode(2, INPUT);  //ngắt ngoài tại chân số 2 có trở treo dương ngắt tín hiệu khi ngắn mạch
    1720:	60 e0       	ldi	r22, 0x00	; 0
    1722:	82 e0       	ldi	r24, 0x02	; 2
    1724:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <pinMode>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:73

  Setup_timer2();
    1728:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <Setup_timer2()>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:74
  Setup_timer1();
    172c:	0e 94 10 0b 	call	0x1620	; 0x1620 <Setup_timer1()>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:75
  Setup_timer0();
    1730:	0e 94 36 0b 	call	0x166c	; 0x166c <Setup_timer0()>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:76
  OCR0A = 0;
    1734:	17 bc       	out	0x27, r1	; 39
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:77
  OCR0B = 0;
    1736:	18 bc       	out	0x28, r1	; 40
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:78
  OCR2A = 0;
    1738:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:79
  OCR2B = 0;
    173c:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:80
  OCR1A = 0;
    1740:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    1744:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:81
  OCR1B = 0;
    1748:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    174c:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:82
  cbi(TIMSK2, TOIE2);  // TẮT NGẮT TIMER 2
    1750:	e0 e7       	ldi	r30, 0x70	; 112
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	8e 7f       	andi	r24, 0xFE	; 254
    1758:	80 83       	st	Z, r24
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:86

  //  attachInterrupt(0, DungKhan, RISING );   // tắt phát xung SPWM khi có lỗi xảy ra.

  lcd.init();
    175a:	81 eb       	ldi	r24, 0xB1	; 177
    175c:	92 e0       	ldi	r25, 0x02	; 2
    175e:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <LiquidCrystal_I2C::init()>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:87
  lcd.backlight();
    1762:	81 eb       	ldi	r24, 0xB1	; 177
    1764:	92 e0       	ldi	r25, 0x02	; 2
    1766:	0e 94 9b 0c 	call	0x1936	; 0x1936 <LiquidCrystal_I2C::backlight()>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:88
  lcd.setCursor(0, 0);
    176a:	40 e0       	ldi	r20, 0x00	; 0
    176c:	60 e0       	ldi	r22, 0x00	; 0
    176e:	81 eb       	ldi	r24, 0xB1	; 177
    1770:	92 e0       	ldi	r25, 0x02	; 2
    1772:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:89
  lcd.print("Module Mach Bien Tan");
    1776:	66 e1       	ldi	r22, 0x16	; 22
    1778:	72 e0       	ldi	r23, 0x02	; 2
    177a:	81 eb       	ldi	r24, 0xB1	; 177
    177c:	92 e0       	ldi	r25, 0x02	; 2
    177e:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <Print::print(char const*)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:90
  lcd.setCursor(2, 2);
    1782:	42 e0       	ldi	r20, 0x02	; 2
    1784:	62 e0       	ldi	r22, 0x02	; 2
    1786:	81 eb       	ldi	r24, 0xB1	; 177
    1788:	92 e0       	ldi	r25, 0x02	; 2
    178a:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:91
  lcd.print("thanhhung.edu.vn");
    178e:	6b e2       	ldi	r22, 0x2B	; 43
    1790:	72 e0       	ldi	r23, 0x02	; 2
    1792:	81 eb       	ldi	r24, 0xB1	; 177
    1794:	92 e0       	ldi	r25, 0x02	; 2
    1796:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <Print::print(char const*)>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:92
  delay(2000);
    179a:	60 ed       	ldi	r22, 0xD0	; 208
    179c:	77 e0       	ldi	r23, 0x07	; 7
    179e:	80 e0       	ldi	r24, 0x00	; 0
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	0e 94 33 16 	call	0x2c66	; 0x2c66 <delay>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:93
  lcd.clear();
    17a6:	81 eb       	ldi	r24, 0xB1	; 177
    17a8:	92 e0       	ldi	r25, 0x02	; 2
    17aa:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <LiquidCrystal_I2C::clear()>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:99

  // the waveform index is the highest 8 bits of sigma
  // choose refclk as freq to increment the lsb of the 8 highest bits
  //    for every call to the ISR of timer2 overflow
  // the lsb of the 8 highest bits is 1<<24 (1LL<<24 for long integer literal)
  delta = (1LL << 24) * freq / refclk;
    17ae:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <freq>
    17b2:	70 91 10 01 	lds	r23, 0x0110	; 0x800110 <freq+0x1>
    17b6:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <freq+0x2>
    17ba:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <freq+0x3>
    17be:	20 e0       	ldi	r18, 0x00	; 0
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	40 e8       	ldi	r20, 0x80	; 128
    17c4:	5b e4       	ldi	r21, 0x4B	; 75
    17c6:	0e 94 83 19 	call	0x3306	; 0x3306 <__mulsf3>
    17ca:	23 e9       	ldi	r18, 0x93	; 147
    17cc:	38 e1       	ldi	r19, 0x18	; 24
    17ce:	45 e7       	ldi	r20, 0x75	; 117
    17d0:	52 e4       	ldi	r21, 0x42	; 66
    17d2:	0e 94 24 18 	call	0x3048	; 0x3048 <__divsf3>
    17d6:	0e 94 9d 18 	call	0x313a	; 0x313a <__fixunssfsi>
    17da:	60 93 a5 02 	sts	0x02A5, r22	; 0x8002a5 <delta>
    17de:	70 93 a6 02 	sts	0x02A6, r23	; 0x8002a6 <delta+0x1>
    17e2:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <delta+0x2>
    17e6:	90 93 a8 02 	sts	0x02A8, r25	; 0x8002a8 <delta+0x3>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:100
}
    17ea:	08 95       	ret

000017ec <__vector_9>:
__vector_9():
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:704
// runtime : 8 microseconds ( inclusive push and pop)
// OC2A - pin 11
// OC1B - pin 10
// OC1A - pin 9
// https://www.arduino.cc/en/Tutorial/SecretsOfArduinoPWM
ISR(TIMER2_OVF_vect) {
    17ec:	1f 92       	push	r1
    17ee:	0f 92       	push	r0
    17f0:	0f b6       	in	r0, 0x3f	; 63
    17f2:	0f 92       	push	r0
    17f4:	11 24       	eor	r1, r1
    17f6:	2f 93       	push	r18
    17f8:	4f 93       	push	r20
    17fa:	5f 93       	push	r21
    17fc:	6f 93       	push	r22
    17fe:	7f 93       	push	r23
    1800:	8f 93       	push	r24
    1802:	9f 93       	push	r25
    1804:	af 93       	push	r26
    1806:	bf 93       	push	r27
    1808:	ef 93       	push	r30
    180a:	ff 93       	push	r31
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:708

  //sbi(PORTD,testPin);

  sigma = sigma + delta;  // soft DDS, phase accu with 32 bits
    180c:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <sigma>
    1810:	90 91 aa 02 	lds	r25, 0x02AA	; 0x8002aa <sigma+0x1>
    1814:	a0 91 ab 02 	lds	r26, 0x02AB	; 0x8002ab <sigma+0x2>
    1818:	b0 91 ac 02 	lds	r27, 0x02AC	; 0x8002ac <sigma+0x3>
    181c:	40 91 a5 02 	lds	r20, 0x02A5	; 0x8002a5 <delta>
    1820:	50 91 a6 02 	lds	r21, 0x02A6	; 0x8002a6 <delta+0x1>
    1824:	60 91 a7 02 	lds	r22, 0x02A7	; 0x8002a7 <delta+0x2>
    1828:	70 91 a8 02 	lds	r23, 0x02A8	; 0x8002a8 <delta+0x3>
    182c:	84 0f       	add	r24, r20
    182e:	95 1f       	adc	r25, r21
    1830:	a6 1f       	adc	r26, r22
    1832:	b7 1f       	adc	r27, r23
    1834:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <sigma>
    1838:	90 93 aa 02 	sts	0x02AA, r25	; 0x8002aa <sigma+0x1>
    183c:	a0 93 ab 02 	sts	0x02AB, r26	; 0x8002ab <sigma+0x2>
    1840:	b0 93 ac 02 	sts	0x02AC, r27	; 0x8002ac <sigma+0x3>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:710
                          // read value fron ROM sine table and send to PWM DAC
  phase0 = sigma >> 24;   // use upper 8 bits for phase accu as frequency information
    1844:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <sigma>
    1848:	90 91 aa 02 	lds	r25, 0x02AA	; 0x8002aa <sigma+0x1>
    184c:	a0 91 ab 02 	lds	r26, 0x02AB	; 0x8002ab <sigma+0x2>
    1850:	b0 91 ac 02 	lds	r27, 0x02AC	; 0x8002ac <sigma+0x3>
    1854:	8b 2f       	mov	r24, r27
    1856:	99 27       	eor	r25, r25
    1858:	aa 27       	eor	r26, r26
    185a:	bb 27       	eor	r27, r27
    185c:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <phase0>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:711
  phase1 = phase0 + 85;
    1860:	25 e5       	ldi	r18, 0x55	; 85
    1862:	28 0f       	add	r18, r24
    1864:	20 93 a3 02 	sts	0x02A3, r18	; 0x8002a3 <phase1>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:712
  phase2 = phase0 + 170;
    1868:	2a ea       	ldi	r18, 0xAA	; 170
    186a:	28 0f       	add	r18, r24
    186c:	20 93 a2 02 	sts	0x02A2, r18	; 0x8002a2 <phase2>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:714

  value1 = pgm_read_byte_near(sine256 + phase0)*2/10;
    1870:	fc 01       	movw	r30, r24
    1872:	ec 54       	subi	r30, 0x4C	; 76
    1874:	ff 4f       	sbci	r31, 0xFF	; 255
    1876:	e4 91       	lpm	r30, Z
    1878:	8e 2f       	mov	r24, r30
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	65 e0       	ldi	r22, 0x05	; 5
    187e:	70 e0       	ldi	r23, 0x00	; 0
    1880:	0e 94 05 1a 	call	0x340a	; 0x340a <__divmodhi4>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:716
  if (value1 > 205) value1 = 205;
  if (value1 < 25) value1 = 25;
    1884:	69 31       	cpi	r22, 0x19	; 25
    1886:	71 05       	cpc	r23, r1
    1888:	f4 f0       	brlt	.+60     	; 0x18c6 <__vector_9+0xda>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:714
                          // read value fron ROM sine table and send to PWM DAC
  phase0 = sigma >> 24;   // use upper 8 bits for phase accu as frequency information
  phase1 = phase0 + 85;
  phase2 = phase0 + 170;

  value1 = pgm_read_byte_near(sine256 + phase0)*2/10;
    188a:	70 93 b0 02 	sts	0x02B0, r23	; 0x8002b0 <value1+0x1>
    188e:	60 93 af 02 	sts	0x02AF, r22	; 0x8002af <value1>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:742


  //OCR2A=pgm_read_byte_near(sine256 + phase0)  ;  // pwm pin 11
  //OCR2B=pgm_read_byte_near(sine256 + phase0) + 20;  // pwm pin 3

  OCR2A = value1 - 10 ;
    1892:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <value1>
    1896:	8a 50       	subi	r24, 0x0A	; 10
    1898:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:743
  OCR2B = value1 + 35 ;
    189c:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <value1>
    18a0:	8d 5d       	subi	r24, 0xDD	; 221
    18a2:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:758
 // OCR0A = value3 - 10;
 // OCR0B = value3 + 35;


  //cbi(PORTD,testPin);
}
    18a6:	ff 91       	pop	r31
    18a8:	ef 91       	pop	r30
    18aa:	bf 91       	pop	r27
    18ac:	af 91       	pop	r26
    18ae:	9f 91       	pop	r25
    18b0:	8f 91       	pop	r24
    18b2:	7f 91       	pop	r23
    18b4:	6f 91       	pop	r22
    18b6:	5f 91       	pop	r21
    18b8:	4f 91       	pop	r20
    18ba:	2f 91       	pop	r18
    18bc:	0f 90       	pop	r0
    18be:	0f be       	out	0x3f, r0	; 63
    18c0:	0f 90       	pop	r0
    18c2:	1f 90       	pop	r1
    18c4:	18 95       	reti
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:716 (discriminator 1)
  phase1 = phase0 + 85;
  phase2 = phase0 + 170;

  value1 = pgm_read_byte_near(sine256 + phase0)*2/10;
  if (value1 > 205) value1 = 205;
  if (value1 < 25) value1 = 25;
    18c6:	89 e1       	ldi	r24, 0x19	; 25
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	90 93 b0 02 	sts	0x02B0, r25	; 0x8002b0 <value1+0x1>
    18ce:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <value1>
    18d2:	df cf       	rjmp	.-66     	; 0x1892 <__vector_9+0xa6>

000018d4 <_GLOBAL__sub_I_lcd>:
_GLOBAL__sub_I_lcd():
D:\Code Update GitHub\Code CV3phase\CV3phase/CV3phase.ino:21
  33, 35, 37, 39, 42, 44, 46, 49, 51, 54, 56, 59, 62, 64, 67, 70, 73, 76, 78, 81, 84, 87, 90, 93, 96, 99, 102, 105, 108, 111, 115, 118, 121, 124
};
#define cbi(sfr, bit) (_SFR_BYTE(sfr) &= ~_BV(bit))
#define sbi(sfr, bit) (_SFR_BYTE(sfr) |= _BV(bit))

LiquidCrystal_I2C lcd(0x27, 20, 4);  //0X27 or 0X3F
    18d4:	24 e0       	ldi	r18, 0x04	; 4
    18d6:	44 e1       	ldi	r20, 0x14	; 20
    18d8:	67 e2       	ldi	r22, 0x27	; 39
    18da:	81 eb       	ldi	r24, 0xB1	; 177
    18dc:	92 e0       	ldi	r25, 0x02	; 2
    18de:	0c 94 75 0c 	jmp	0x18ea	; 0x18ea <LiquidCrystal_I2C::LiquidCrystal_I2C(unsigned char, unsigned char, unsigned char)>

000018e2 <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
c:\Users\DELL\Documents\Arduino\libraries\LiquidCrystal_I2C-master/LiquidCrystal_I2C.cpp:57
  _backlightval = LCD_NOBACKLIGHT;
}

void LiquidCrystal_I2C::oled_init(){
  _oled = true;
	init_priv();
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	80 e0       	ldi	r24, 0x00	; 0
    18e6:	08 95       	ret

000018e8 <Print::flush()>:
_ZN5Print5flushEv():
    18e8:	08 95       	ret

000018ea <LiquidCrystal_I2C::LiquidCrystal_I2C(unsigned char, unsigned char, unsigned char)>:
_ZN17LiquidCrystal_I2CC2Ehhh():
    18ea:	fc 01       	movw	r30, r24
_ZN5PrintC4Ev():
    18ec:	13 82       	std	Z+3, r1	; 0x03
    18ee:	12 82       	std	Z+2, r1	; 0x02
_ZN17LiquidCrystal_I2CC2Ehhh():
    18f0:	80 e4       	ldi	r24, 0x40	; 64
    18f2:	92 e0       	ldi	r25, 0x02	; 2
    18f4:	91 83       	std	Z+1, r25	; 0x01
    18f6:	80 83       	st	Z, r24
    18f8:	11 86       	std	Z+9, r1	; 0x09
    18fa:	64 83       	std	Z+4, r22	; 0x04
    18fc:	42 87       	std	Z+10, r20	; 0x0a
    18fe:	23 87       	std	Z+11, r18	; 0x0b
    1900:	14 86       	std	Z+12, r1	; 0x0c
    1902:	08 95       	ret

00001904 <LiquidCrystal_I2C::expanderWrite(unsigned char)>:
_ZN17LiquidCrystal_I2C13expanderWriteEh():
    1904:	0f 93       	push	r16
    1906:	1f 93       	push	r17
    1908:	cf 93       	push	r28
    190a:	8c 01       	movw	r16, r24
    190c:	c6 2f       	mov	r28, r22
    190e:	fc 01       	movw	r30, r24
    1910:	64 81       	ldd	r22, Z+4	; 0x04
    1912:	8e eb       	ldi	r24, 0xBE	; 190
    1914:	92 e0       	ldi	r25, 0x02	; 2
    1916:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <TwoWire::beginTransmission(unsigned char)>
    191a:	f8 01       	movw	r30, r16
    191c:	64 85       	ldd	r22, Z+12	; 0x0c
    191e:	6c 2b       	or	r22, r28
_ZN7TwoWire5writeEi():
    1920:	8e eb       	ldi	r24, 0xBE	; 190
    1922:	92 e0       	ldi	r25, 0x02	; 2
    1924:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <TwoWire::write(unsigned char)>
_ZN17LiquidCrystal_I2C13expanderWriteEh():
    1928:	8e eb       	ldi	r24, 0xBE	; 190
    192a:	92 e0       	ldi	r25, 0x02	; 2
    192c:	cf 91       	pop	r28
    192e:	1f 91       	pop	r17
    1930:	0f 91       	pop	r16
    1932:	0c 94 0b 0f 	jmp	0x1e16	; 0x1e16 <TwoWire::endTransmission()>

00001936 <LiquidCrystal_I2C::backlight()>:
_ZN17LiquidCrystal_I2C9backlightEv():
    1936:	28 e0       	ldi	r18, 0x08	; 8
    1938:	fc 01       	movw	r30, r24
    193a:	24 87       	std	Z+12, r18	; 0x0c
    193c:	60 e0       	ldi	r22, 0x00	; 0
    193e:	0c 94 82 0c 	jmp	0x1904	; 0x1904 <LiquidCrystal_I2C::expanderWrite(unsigned char)>

00001942 <LiquidCrystal_I2C::pulseEnable(unsigned char)>:
_ZN17LiquidCrystal_I2C11pulseEnableEh():
    1942:	0f 93       	push	r16
    1944:	1f 93       	push	r17
    1946:	cf 93       	push	r28
    1948:	8c 01       	movw	r16, r24
    194a:	c6 2f       	mov	r28, r22
    194c:	64 60       	ori	r22, 0x04	; 4
    194e:	0e 94 82 0c 	call	0x1904	; 0x1904 <LiquidCrystal_I2C::expanderWrite(unsigned char)>
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <delayMicroseconds>
    195a:	6c 2f       	mov	r22, r28
    195c:	6b 7f       	andi	r22, 0xFB	; 251
    195e:	c8 01       	movw	r24, r16
    1960:	0e 94 82 0c 	call	0x1904	; 0x1904 <LiquidCrystal_I2C::expanderWrite(unsigned char)>
    1964:	82 e3       	ldi	r24, 0x32	; 50
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	cf 91       	pop	r28
    196a:	1f 91       	pop	r17
    196c:	0f 91       	pop	r16
    196e:	0c 94 6c 16 	jmp	0x2cd8	; 0x2cd8 <delayMicroseconds>

00001972 <LiquidCrystal_I2C::write4bits(unsigned char)>:
_ZN17LiquidCrystal_I2C10write4bitsEh():
    1972:	1f 93       	push	r17
    1974:	cf 93       	push	r28
    1976:	df 93       	push	r29
    1978:	ec 01       	movw	r28, r24
    197a:	16 2f       	mov	r17, r22
    197c:	0e 94 82 0c 	call	0x1904	; 0x1904 <LiquidCrystal_I2C::expanderWrite(unsigned char)>
    1980:	61 2f       	mov	r22, r17
    1982:	ce 01       	movw	r24, r28
    1984:	df 91       	pop	r29
    1986:	cf 91       	pop	r28
    1988:	1f 91       	pop	r17
    198a:	0c 94 a1 0c 	jmp	0x1942	; 0x1942 <LiquidCrystal_I2C::pulseEnable(unsigned char)>

0000198e <LiquidCrystal_I2C::send(unsigned char, unsigned char)>:
_ZN17LiquidCrystal_I2C4sendEhh():
    198e:	0f 93       	push	r16
    1990:	1f 93       	push	r17
    1992:	cf 93       	push	r28
    1994:	df 93       	push	r29
    1996:	8c 01       	movw	r16, r24
    1998:	d6 2f       	mov	r29, r22
    199a:	c4 2f       	mov	r28, r20
    199c:	60 7f       	andi	r22, 0xF0	; 240
    199e:	64 2b       	or	r22, r20
    19a0:	0e 94 b9 0c 	call	0x1972	; 0x1972 <LiquidCrystal_I2C::write4bits(unsigned char)>
    19a4:	80 e1       	ldi	r24, 0x10	; 16
    19a6:	d8 9f       	mul	r29, r24
    19a8:	b0 01       	movw	r22, r0
    19aa:	11 24       	eor	r1, r1
    19ac:	6c 2b       	or	r22, r28
    19ae:	c8 01       	movw	r24, r16
    19b0:	df 91       	pop	r29
    19b2:	cf 91       	pop	r28
    19b4:	1f 91       	pop	r17
    19b6:	0f 91       	pop	r16
    19b8:	0c 94 b9 0c 	jmp	0x1972	; 0x1972 <LiquidCrystal_I2C::write4bits(unsigned char)>

000019bc <LiquidCrystal_I2C::command(unsigned char)>:
_ZN17LiquidCrystal_I2C7commandEh():
    19bc:	40 e0       	ldi	r20, 0x00	; 0
    19be:	0c 94 c7 0c 	jmp	0x198e	; 0x198e <LiquidCrystal_I2C::send(unsigned char, unsigned char)>

000019c2 <LiquidCrystal_I2C::home()>:
_ZN17LiquidCrystal_I2C4homeEv():
    19c2:	62 e0       	ldi	r22, 0x02	; 2
    19c4:	0e 94 de 0c 	call	0x19bc	; 0x19bc <LiquidCrystal_I2C::command(unsigned char)>
    19c8:	80 ed       	ldi	r24, 0xD0	; 208
    19ca:	97 e0       	ldi	r25, 0x07	; 7
    19cc:	0c 94 6c 16 	jmp	0x2cd8	; 0x2cd8 <delayMicroseconds>

000019d0 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>:
_ZN17LiquidCrystal_I2C9setCursorEhh():
    19d0:	cf 93       	push	r28
    19d2:	df 93       	push	r29
    19d4:	cd b7       	in	r28, 0x3d	; 61
    19d6:	de b7       	in	r29, 0x3e	; 62
    19d8:	28 97       	sbiw	r28, 0x08	; 8
    19da:	0f b6       	in	r0, 0x3f	; 63
    19dc:	f8 94       	cli
    19de:	de bf       	out	0x3e, r29	; 62
    19e0:	0f be       	out	0x3f, r0	; 63
    19e2:	cd bf       	out	0x3d, r28	; 61
    19e4:	28 e0       	ldi	r18, 0x08	; 8
    19e6:	e4 e1       	ldi	r30, 0x14	; 20
    19e8:	f1 e0       	ldi	r31, 0x01	; 1
    19ea:	de 01       	movw	r26, r28
    19ec:	11 96       	adiw	r26, 0x01	; 1
    19ee:	01 90       	ld	r0, Z+
    19f0:	0d 92       	st	X+, r0
    19f2:	2a 95       	dec	r18
    19f4:	e1 f7       	brne	.-8      	; 0x19ee <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)+0x1e>
    19f6:	fc 01       	movw	r30, r24
    19f8:	20 85       	ldd	r18, Z+8	; 0x08
    19fa:	24 17       	cp	r18, r20
    19fc:	10 f4       	brcc	.+4      	; 0x1a02 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)+0x32>
    19fe:	4f ef       	ldi	r20, 0xFF	; 255
    1a00:	42 0f       	add	r20, r18
    1a02:	50 e0       	ldi	r21, 0x00	; 0
    1a04:	44 0f       	add	r20, r20
    1a06:	55 1f       	adc	r21, r21
    1a08:	21 e0       	ldi	r18, 0x01	; 1
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	2c 0f       	add	r18, r28
    1a0e:	3d 1f       	adc	r19, r29
    1a10:	42 0f       	add	r20, r18
    1a12:	53 1f       	adc	r21, r19
    1a14:	fa 01       	movw	r30, r20
    1a16:	20 81       	ld	r18, Z
    1a18:	62 0f       	add	r22, r18
    1a1a:	60 68       	ori	r22, 0x80	; 128
    1a1c:	28 96       	adiw	r28, 0x08	; 8
    1a1e:	0f b6       	in	r0, 0x3f	; 63
    1a20:	f8 94       	cli
    1a22:	de bf       	out	0x3e, r29	; 62
    1a24:	0f be       	out	0x3f, r0	; 63
    1a26:	cd bf       	out	0x3d, r28	; 61
    1a28:	df 91       	pop	r29
    1a2a:	cf 91       	pop	r28
    1a2c:	0c 94 de 0c 	jmp	0x19bc	; 0x19bc <LiquidCrystal_I2C::command(unsigned char)>

00001a30 <LiquidCrystal_I2C::clear()>:
_ZN17LiquidCrystal_I2C5clearEv():
    1a30:	cf 93       	push	r28
    1a32:	df 93       	push	r29
    1a34:	ec 01       	movw	r28, r24
    1a36:	61 e0       	ldi	r22, 0x01	; 1
    1a38:	0e 94 de 0c 	call	0x19bc	; 0x19bc <LiquidCrystal_I2C::command(unsigned char)>
    1a3c:	80 ed       	ldi	r24, 0xD0	; 208
    1a3e:	97 e0       	ldi	r25, 0x07	; 7
    1a40:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <delayMicroseconds>
    1a44:	89 85       	ldd	r24, Y+9	; 0x09
    1a46:	88 23       	and	r24, r24
    1a48:	39 f0       	breq	.+14     	; 0x1a58 <LiquidCrystal_I2C::clear()+0x28>
    1a4a:	40 e0       	ldi	r20, 0x00	; 0
    1a4c:	60 e0       	ldi	r22, 0x00	; 0
    1a4e:	ce 01       	movw	r24, r28
    1a50:	df 91       	pop	r29
    1a52:	cf 91       	pop	r28
    1a54:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
    1a58:	df 91       	pop	r29
    1a5a:	cf 91       	pop	r28
    1a5c:	08 95       	ret

00001a5e <LiquidCrystal_I2C::display()>:
_ZN17LiquidCrystal_I2C7displayEv():
    1a5e:	fc 01       	movw	r30, r24
    1a60:	66 81       	ldd	r22, Z+6	; 0x06
    1a62:	26 2f       	mov	r18, r22
    1a64:	24 60       	ori	r18, 0x04	; 4
    1a66:	26 83       	std	Z+6, r18	; 0x06
    1a68:	6c 60       	ori	r22, 0x0C	; 12
    1a6a:	0c 94 de 0c 	jmp	0x19bc	; 0x19bc <LiquidCrystal_I2C::command(unsigned char)>

00001a6e <LiquidCrystal_I2C::write(unsigned char)>:
_ZN17LiquidCrystal_I2C5writeEh():
    1a6e:	41 e0       	ldi	r20, 0x01	; 1
    1a70:	0e 94 c7 0c 	call	0x198e	; 0x198e <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
    1a74:	81 e0       	ldi	r24, 0x01	; 1
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	08 95       	ret

00001a7a <LiquidCrystal_I2C::begin(unsigned char, unsigned char, unsigned char)>:
_ZN17LiquidCrystal_I2C5beginEhhh():
    1a7a:	cf 93       	push	r28
    1a7c:	df 93       	push	r29
    1a7e:	ec 01       	movw	r28, r24
    1a80:	42 30       	cpi	r20, 0x02	; 2
    1a82:	18 f0       	brcs	.+6      	; 0x1a8a <LiquidCrystal_I2C::begin(unsigned char, unsigned char, unsigned char)+0x10>
    1a84:	8d 81       	ldd	r24, Y+5	; 0x05
    1a86:	88 60       	ori	r24, 0x08	; 8
    1a88:	8d 83       	std	Y+5, r24	; 0x05
    1a8a:	48 87       	std	Y+8, r20	; 0x08
    1a8c:	22 23       	and	r18, r18
    1a8e:	29 f0       	breq	.+10     	; 0x1a9a <LiquidCrystal_I2C::begin(unsigned char, unsigned char, unsigned char)+0x20>
    1a90:	41 30       	cpi	r20, 0x01	; 1
    1a92:	19 f4       	brne	.+6      	; 0x1a9a <LiquidCrystal_I2C::begin(unsigned char, unsigned char, unsigned char)+0x20>
    1a94:	8d 81       	ldd	r24, Y+5	; 0x05
    1a96:	84 60       	ori	r24, 0x04	; 4
    1a98:	8d 83       	std	Y+5, r24	; 0x05
    1a9a:	62 e3       	ldi	r22, 0x32	; 50
    1a9c:	70 e0       	ldi	r23, 0x00	; 0
    1a9e:	80 e0       	ldi	r24, 0x00	; 0
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	0e 94 33 16 	call	0x2c66	; 0x2c66 <delay>
    1aa6:	6c 85       	ldd	r22, Y+12	; 0x0c
    1aa8:	ce 01       	movw	r24, r28
    1aaa:	0e 94 82 0c 	call	0x1904	; 0x1904 <LiquidCrystal_I2C::expanderWrite(unsigned char)>
    1aae:	68 ee       	ldi	r22, 0xE8	; 232
    1ab0:	73 e0       	ldi	r23, 0x03	; 3
    1ab2:	80 e0       	ldi	r24, 0x00	; 0
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	0e 94 33 16 	call	0x2c66	; 0x2c66 <delay>
    1aba:	60 e3       	ldi	r22, 0x30	; 48
    1abc:	ce 01       	movw	r24, r28
    1abe:	0e 94 b9 0c 	call	0x1972	; 0x1972 <LiquidCrystal_I2C::write4bits(unsigned char)>
    1ac2:	84 e9       	ldi	r24, 0x94	; 148
    1ac4:	91 e1       	ldi	r25, 0x11	; 17
    1ac6:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <delayMicroseconds>
    1aca:	60 e3       	ldi	r22, 0x30	; 48
    1acc:	ce 01       	movw	r24, r28
    1ace:	0e 94 b9 0c 	call	0x1972	; 0x1972 <LiquidCrystal_I2C::write4bits(unsigned char)>
    1ad2:	84 e9       	ldi	r24, 0x94	; 148
    1ad4:	91 e1       	ldi	r25, 0x11	; 17
    1ad6:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <delayMicroseconds>
    1ada:	60 e3       	ldi	r22, 0x30	; 48
    1adc:	ce 01       	movw	r24, r28
    1ade:	0e 94 b9 0c 	call	0x1972	; 0x1972 <LiquidCrystal_I2C::write4bits(unsigned char)>
    1ae2:	86 e9       	ldi	r24, 0x96	; 150
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <delayMicroseconds>
    1aea:	60 e2       	ldi	r22, 0x20	; 32
    1aec:	ce 01       	movw	r24, r28
    1aee:	0e 94 b9 0c 	call	0x1972	; 0x1972 <LiquidCrystal_I2C::write4bits(unsigned char)>
    1af2:	6d 81       	ldd	r22, Y+5	; 0x05
    1af4:	60 62       	ori	r22, 0x20	; 32
    1af6:	ce 01       	movw	r24, r28
    1af8:	0e 94 de 0c 	call	0x19bc	; 0x19bc <LiquidCrystal_I2C::command(unsigned char)>
    1afc:	84 e0       	ldi	r24, 0x04	; 4
    1afe:	8e 83       	std	Y+6, r24	; 0x06
    1b00:	ce 01       	movw	r24, r28
    1b02:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <LiquidCrystal_I2C::display()>
    1b06:	ce 01       	movw	r24, r28
    1b08:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <LiquidCrystal_I2C::clear()>
    1b0c:	82 e0       	ldi	r24, 0x02	; 2
    1b0e:	8f 83       	std	Y+7, r24	; 0x07
    1b10:	66 e0       	ldi	r22, 0x06	; 6
    1b12:	ce 01       	movw	r24, r28
    1b14:	0e 94 de 0c 	call	0x19bc	; 0x19bc <LiquidCrystal_I2C::command(unsigned char)>
    1b18:	ce 01       	movw	r24, r28
    1b1a:	df 91       	pop	r29
    1b1c:	cf 91       	pop	r28
    1b1e:	0c 94 e1 0c 	jmp	0x19c2	; 0x19c2 <LiquidCrystal_I2C::home()>

00001b22 <LiquidCrystal_I2C::init_priv()>:
_ZN17LiquidCrystal_I2C9init_privEv():
    1b22:	cf 93       	push	r28
    1b24:	df 93       	push	r29
    1b26:	ec 01       	movw	r28, r24
    1b28:	8e eb       	ldi	r24, 0xBE	; 190
    1b2a:	92 e0       	ldi	r25, 0x02	; 2
    1b2c:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <TwoWire::begin()>
    1b30:	1d 82       	std	Y+5, r1	; 0x05
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	4b 85       	ldd	r20, Y+11	; 0x0b
    1b36:	6a 85       	ldd	r22, Y+10	; 0x0a
    1b38:	ce 01       	movw	r24, r28
    1b3a:	df 91       	pop	r29
    1b3c:	cf 91       	pop	r28
    1b3e:	0c 94 3d 0d 	jmp	0x1a7a	; 0x1a7a <LiquidCrystal_I2C::begin(unsigned char, unsigned char, unsigned char)>

00001b42 <LiquidCrystal_I2C::init()>:
_ZN17LiquidCrystal_I2C4initEv():
c:\Users\DELL\Documents\Arduino\libraries\LiquidCrystal_I2C-master/LiquidCrystal_I2C.cpp:61
}

void LiquidCrystal_I2C::init(){
	init_priv();
    1b42:	0c 94 91 0d 	jmp	0x1b22	; 0x1b22 <LiquidCrystal_I2C::init_priv()>

00001b46 <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src/Wire.cpp:764

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
}
    1b46:	cf 93       	push	r28
    1b48:	df 93       	push	r29
    1b4a:	1f 92       	push	r1
    1b4c:	cd b7       	in	r28, 0x3d	; 61
    1b4e:	de b7       	in	r29, 0x3e	; 62
    1b50:	fc 01       	movw	r30, r24
    1b52:	69 83       	std	Y+1, r22	; 0x01
    1b54:	87 89       	ldd	r24, Z+23	; 0x17
    1b56:	88 23       	and	r24, r24
    1b58:	f9 f0       	breq	.+62     	; 0x1b98 <TwoWire::write(unsigned char)+0x52>
    1b5a:	26 89       	ldd	r18, Z+22	; 0x16
    1b5c:	84 85       	ldd	r24, Z+12	; 0x0c
    1b5e:	95 85       	ldd	r25, Z+13	; 0x0d
    1b60:	28 17       	cp	r18, r24
    1b62:	19 06       	cpc	r1, r25
    1b64:	54 f0       	brlt	.+20     	; 0x1b7a <TwoWire::write(unsigned char)+0x34>
_ZN5Print13setWriteErrorEi():
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	93 83       	std	Z+3, r25	; 0x03
    1b6c:	82 83       	std	Z+2, r24	; 0x02
_ZN7TwoWire5writeEh():
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	80 e0       	ldi	r24, 0x00	; 0
    1b72:	0f 90       	pop	r0
    1b74:	df 91       	pop	r29
    1b76:	cf 91       	pop	r28
    1b78:	08 95       	ret
    1b7a:	89 81       	ldd	r24, Y+1	; 0x01
    1b7c:	a5 89       	ldd	r26, Z+21	; 0x15
    1b7e:	23 89       	ldd	r18, Z+19	; 0x13
    1b80:	34 89       	ldd	r19, Z+20	; 0x14
    1b82:	a2 0f       	add	r26, r18
    1b84:	b3 2f       	mov	r27, r19
    1b86:	b1 1d       	adc	r27, r1
    1b88:	8c 93       	st	X, r24
    1b8a:	85 89       	ldd	r24, Z+21	; 0x15
    1b8c:	8f 5f       	subi	r24, 0xFF	; 255
    1b8e:	85 8b       	std	Z+21, r24	; 0x15
    1b90:	86 8b       	std	Z+22, r24	; 0x16
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	ed cf       	rjmp	.-38     	; 0x1b72 <TwoWire::write(unsigned char)+0x2c>
    1b98:	00 a4       	ldd	r0, Z+40	; 0x28
    1b9a:	f1 a5       	ldd	r31, Z+41	; 0x29
    1b9c:	e0 2d       	mov	r30, r0
    1b9e:	61 e0       	ldi	r22, 0x01	; 1
    1ba0:	ce 01       	movw	r24, r28
    1ba2:	01 96       	adiw	r24, 0x01	; 1
    1ba4:	09 95       	icall
    1ba6:	f5 cf       	rjmp	.-22     	; 0x1b92 <TwoWire::write(unsigned char)+0x4c>

00001ba8 <TwoWire::available()>:
_ZN7TwoWire9availableEv():
    1ba8:	fc 01       	movw	r30, r24
    1baa:	81 89       	ldd	r24, Z+17	; 0x11
    1bac:	90 89       	ldd	r25, Z+16	; 0x10
    1bae:	89 1b       	sub	r24, r25
    1bb0:	99 0b       	sbc	r25, r25
    1bb2:	08 95       	ret

00001bb4 <TwoWire::read()>:
_ZN7TwoWire4readEv():
    1bb4:	fc 01       	movw	r30, r24
    1bb6:	90 89       	ldd	r25, Z+16	; 0x10
    1bb8:	81 89       	ldd	r24, Z+17	; 0x11
    1bba:	2f ef       	ldi	r18, 0xFF	; 255
    1bbc:	3f ef       	ldi	r19, 0xFF	; 255
    1bbe:	98 17       	cp	r25, r24
    1bc0:	40 f4       	brcc	.+16     	; 0x1bd2 <TwoWire::read()+0x1e>
    1bc2:	a6 85       	ldd	r26, Z+14	; 0x0e
    1bc4:	b7 85       	ldd	r27, Z+15	; 0x0f
    1bc6:	a9 0f       	add	r26, r25
    1bc8:	b1 1d       	adc	r27, r1
    1bca:	2c 91       	ld	r18, X
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	9f 5f       	subi	r25, 0xFF	; 255
    1bd0:	90 8b       	std	Z+16, r25	; 0x10
    1bd2:	c9 01       	movw	r24, r18
    1bd4:	08 95       	ret

00001bd6 <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
    1bd6:	dc 01       	movw	r26, r24
    1bd8:	50 96       	adiw	r26, 0x10	; 16
    1bda:	ec 91       	ld	r30, X
    1bdc:	50 97       	sbiw	r26, 0x10	; 16
    1bde:	51 96       	adiw	r26, 0x11	; 17
    1be0:	8c 91       	ld	r24, X
    1be2:	51 97       	sbiw	r26, 0x11	; 17
    1be4:	e8 17       	cp	r30, r24
    1be6:	48 f4       	brcc	.+18     	; 0x1bfa <TwoWire::peek()+0x24>
    1be8:	1e 96       	adiw	r26, 0x0e	; 14
    1bea:	8d 91       	ld	r24, X+
    1bec:	9c 91       	ld	r25, X
    1bee:	e8 0f       	add	r30, r24
    1bf0:	f9 2f       	mov	r31, r25
    1bf2:	f1 1d       	adc	r31, r1
    1bf4:	80 81       	ld	r24, Z
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	08 95       	ret
    1bfa:	8f ef       	ldi	r24, 0xFF	; 255
    1bfc:	9f ef       	ldi	r25, 0xFF	; 255
    1bfe:	08 95       	ret

00001c00 <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
    1c00:	08 95       	ret

00001c02 <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
    1c02:	cf 92       	push	r12
    1c04:	df 92       	push	r13
    1c06:	ef 92       	push	r14
    1c08:	ff 92       	push	r15
    1c0a:	0f 93       	push	r16
    1c0c:	1f 93       	push	r17
    1c0e:	cf 93       	push	r28
    1c10:	df 93       	push	r29
    1c12:	8c 01       	movw	r16, r24
    1c14:	cb 01       	movw	r24, r22
    1c16:	7a 01       	movw	r14, r20
    1c18:	d8 01       	movw	r26, r16
    1c1a:	57 96       	adiw	r26, 0x17	; 23
    1c1c:	2c 91       	ld	r18, X
    1c1e:	57 97       	sbiw	r26, 0x17	; 23
    1c20:	22 23       	and	r18, r18
    1c22:	89 f0       	breq	.+34     	; 0x1c46 <TwoWire::write(unsigned char const*, unsigned int)+0x44>
    1c24:	eb 01       	movw	r28, r22
    1c26:	6b 01       	movw	r12, r22
    1c28:	c4 0e       	add	r12, r20
    1c2a:	d5 1e       	adc	r13, r21
    1c2c:	cc 15       	cp	r28, r12
    1c2e:	dd 05       	cpc	r29, r13
    1c30:	79 f0       	breq	.+30     	; 0x1c50 <TwoWire::write(unsigned char const*, unsigned int)+0x4e>
    1c32:	69 91       	ld	r22, Y+
    1c34:	d8 01       	movw	r26, r16
    1c36:	ed 91       	ld	r30, X+
    1c38:	fc 91       	ld	r31, X
    1c3a:	01 90       	ld	r0, Z+
    1c3c:	f0 81       	ld	r31, Z
    1c3e:	e0 2d       	mov	r30, r0
    1c40:	c8 01       	movw	r24, r16
    1c42:	09 95       	icall
    1c44:	f3 cf       	rjmp	.-26     	; 0x1c2c <TwoWire::write(unsigned char const*, unsigned int)+0x2a>
    1c46:	98 96       	adiw	r26, 0x28	; 40
    1c48:	ed 91       	ld	r30, X+
    1c4a:	fc 91       	ld	r31, X
    1c4c:	64 2f       	mov	r22, r20
    1c4e:	09 95       	icall
    1c50:	c7 01       	movw	r24, r14
    1c52:	df 91       	pop	r29
    1c54:	cf 91       	pop	r28
    1c56:	1f 91       	pop	r17
    1c58:	0f 91       	pop	r16
    1c5a:	ff 90       	pop	r15
    1c5c:	ef 90       	pop	r14
    1c5e:	df 90       	pop	r13
    1c60:	cf 90       	pop	r12
    1c62:	08 95       	ret

00001c64 <TwoWire::TwoWire(int, void (*)(), void (*)(), void (*)(unsigned char), void (*)(unsigned long), unsigned char (*)(unsigned char, unsigned char*, unsigned char, unsigned char), unsigned char (*)(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char), unsigned char (*)(unsigned char const*, unsigned char), void (*)(unsigned char), void (*)(), void (*)(), void (*)(void (*)(unsigned char*, int)), void (*)(unsigned char*, int), void (*)(void (*)()), void (*)())>:
_ZN7TwoWireC2EiPFvvES1_PFvhEPFvmEPFhhPhhhEPFhhS6_hhhEPFhPKhhES3_S1_S1_PFvPFvS6_iEESG_PFvS1_ES1_():
    1c64:	2f 92       	push	r2
    1c66:	3f 92       	push	r3
    1c68:	4f 92       	push	r4
    1c6a:	5f 92       	push	r5
    1c6c:	6f 92       	push	r6
    1c6e:	7f 92       	push	r7
    1c70:	8f 92       	push	r8
    1c72:	9f 92       	push	r9
    1c74:	af 92       	push	r10
    1c76:	bf 92       	push	r11
    1c78:	cf 92       	push	r12
    1c7a:	df 92       	push	r13
    1c7c:	ef 92       	push	r14
    1c7e:	ff 92       	push	r15
    1c80:	0f 93       	push	r16
    1c82:	1f 93       	push	r17
    1c84:	cf 93       	push	r28
    1c86:	df 93       	push	r29
    1c88:	cd b7       	in	r28, 0x3d	; 61
    1c8a:	de b7       	in	r29, 0x3e	; 62
    1c8c:	60 97       	sbiw	r28, 0x10	; 16
    1c8e:	0f b6       	in	r0, 0x3f	; 63
    1c90:	f8 94       	cli
    1c92:	de bf       	out	0x3e, r29	; 62
    1c94:	0f be       	out	0x3f, r0	; 63
    1c96:	cd bf       	out	0x3d, r28	; 61
    1c98:	3c 01       	movw	r6, r24
    1c9a:	2b 01       	movw	r4, r22
    1c9c:	5a 83       	std	Y+2, r21	; 0x02
    1c9e:	49 83       	std	Y+1, r20	; 0x01
    1ca0:	3c 83       	std	Y+4, r19	; 0x04
    1ca2:	2b 83       	std	Y+3, r18	; 0x03
    1ca4:	8d a1       	ldd	r24, Y+37	; 0x25
    1ca6:	9e a1       	ldd	r25, Y+38	; 0x26
    1ca8:	9e 83       	std	Y+6, r25	; 0x06
    1caa:	8d 83       	std	Y+5, r24	; 0x05
    1cac:	ef a1       	ldd	r30, Y+39	; 0x27
    1cae:	f8 a5       	ldd	r31, Y+40	; 0x28
    1cb0:	f8 87       	std	Y+8, r31	; 0x08
    1cb2:	ef 83       	std	Y+7, r30	; 0x07
    1cb4:	89 a5       	ldd	r24, Y+41	; 0x29
    1cb6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cb8:	9a 87       	std	Y+10, r25	; 0x0a
    1cba:	89 87       	std	Y+9, r24	; 0x09
    1cbc:	eb a5       	ldd	r30, Y+43	; 0x2b
    1cbe:	fc a5       	ldd	r31, Y+44	; 0x2c
    1cc0:	fc 87       	std	Y+12, r31	; 0x0c
    1cc2:	eb 87       	std	Y+11, r30	; 0x0b
    1cc4:	2d a4       	ldd	r2, Y+45	; 0x2d
    1cc6:	3e a4       	ldd	r3, Y+46	; 0x2e
    1cc8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cca:	98 a9       	ldd	r25, Y+48	; 0x30
    1ccc:	9e 87       	std	Y+14, r25	; 0x0e
    1cce:	8d 87       	std	Y+13, r24	; 0x0d
    1cd0:	e9 a9       	ldd	r30, Y+49	; 0x31
    1cd2:	fa a9       	ldd	r31, Y+50	; 0x32
    1cd4:	f8 8b       	std	Y+16, r31	; 0x10
    1cd6:	ef 87       	std	Y+15, r30	; 0x0f
_ZN5PrintC4Ev():
    1cd8:	f3 01       	movw	r30, r6
    1cda:	13 82       	std	Z+3, r1	; 0x03
    1cdc:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
    1cde:	88 ee       	ldi	r24, 0xE8	; 232
    1ce0:	93 e0       	ldi	r25, 0x03	; 3
    1ce2:	a0 e0       	ldi	r26, 0x00	; 0
    1ce4:	b0 e0       	ldi	r27, 0x00	; 0
    1ce6:	84 83       	std	Z+4, r24	; 0x04
    1ce8:	95 83       	std	Z+5, r25	; 0x05
    1cea:	a6 83       	std	Z+6, r26	; 0x06
    1cec:	b7 83       	std	Z+7, r27	; 0x07
_ZN7TwoWireC2EiPFvvES1_PFvhEPFvmEPFhhPhhhEPFhhS6_hhhEPFhPKhhES3_S1_S1_PFvPFvS6_iEESG_PFvS1_ES1_():
    1cee:	8c e4       	ldi	r24, 0x4C	; 76
    1cf0:	92 e0       	ldi	r25, 0x02	; 2
    1cf2:	91 83       	std	Z+1, r25	; 0x01
    1cf4:	80 83       	st	Z, r24
    1cf6:	75 87       	std	Z+13, r23	; 0x0d
    1cf8:	64 87       	std	Z+12, r22	; 0x0c
    1cfa:	cb 01       	movw	r24, r22
    1cfc:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <operator new[](unsigned int)>
    1d00:	f3 01       	movw	r30, r6
    1d02:	97 87       	std	Z+15, r25	; 0x0f
    1d04:	86 87       	std	Z+14, r24	; 0x0e
    1d06:	10 8a       	std	Z+16, r1	; 0x10
    1d08:	11 8a       	std	Z+17, r1	; 0x11
    1d0a:	12 8a       	std	Z+18, r1	; 0x12
    1d0c:	c2 01       	movw	r24, r4
    1d0e:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <operator new[](unsigned int)>
    1d12:	f3 01       	movw	r30, r6
    1d14:	94 8b       	std	Z+20, r25	; 0x14
    1d16:	83 8b       	std	Z+19, r24	; 0x13
    1d18:	15 8a       	std	Z+21, r1	; 0x15
    1d1a:	16 8a       	std	Z+22, r1	; 0x16
    1d1c:	17 8a       	std	Z+23, r1	; 0x17
    1d1e:	89 81       	ldd	r24, Y+1	; 0x01
    1d20:	9a 81       	ldd	r25, Y+2	; 0x02
    1d22:	95 8f       	std	Z+29, r25	; 0x1d
    1d24:	84 8f       	std	Z+28, r24	; 0x1c
    1d26:	8b 81       	ldd	r24, Y+3	; 0x03
    1d28:	9c 81       	ldd	r25, Y+4	; 0x04
    1d2a:	97 8f       	std	Z+31, r25	; 0x1f
    1d2c:	86 8f       	std	Z+30, r24	; 0x1e
    1d2e:	11 a3       	std	Z+33, r17	; 0x21
    1d30:	00 a3       	std	Z+32, r16	; 0x20
    1d32:	f3 a2       	std	Z+35, r15	; 0x23
    1d34:	e2 a2       	std	Z+34, r14	; 0x22
    1d36:	d5 a2       	std	Z+37, r13	; 0x25
    1d38:	c4 a2       	std	Z+36, r12	; 0x24
    1d3a:	b7 a2       	std	Z+39, r11	; 0x27
    1d3c:	a6 a2       	std	Z+38, r10	; 0x26
    1d3e:	91 a6       	std	Z+41, r9	; 0x29
    1d40:	80 a6       	std	Z+40, r8	; 0x28
    1d42:	8d 81       	ldd	r24, Y+5	; 0x05
    1d44:	9e 81       	ldd	r25, Y+6	; 0x06
    1d46:	93 a7       	std	Z+43, r25	; 0x2b
    1d48:	82 a7       	std	Z+42, r24	; 0x2a
    1d4a:	8f 81       	ldd	r24, Y+7	; 0x07
    1d4c:	98 85       	ldd	r25, Y+8	; 0x08
    1d4e:	95 a7       	std	Z+45, r25	; 0x2d
    1d50:	84 a7       	std	Z+44, r24	; 0x2c
    1d52:	89 85       	ldd	r24, Y+9	; 0x09
    1d54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d56:	97 a7       	std	Z+47, r25	; 0x2f
    1d58:	86 a7       	std	Z+46, r24	; 0x2e
    1d5a:	c1 01       	movw	r24, r2
    1d5c:	eb 85       	ldd	r30, Y+11	; 0x0b
    1d5e:	fc 85       	ldd	r31, Y+12	; 0x0c
    1d60:	09 95       	icall
    1d62:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d64:	98 89       	ldd	r25, Y+16	; 0x10
    1d66:	ed 85       	ldd	r30, Y+13	; 0x0d
    1d68:	fe 85       	ldd	r31, Y+14	; 0x0e
    1d6a:	60 96       	adiw	r28, 0x10	; 16
    1d6c:	0f b6       	in	r0, 0x3f	; 63
    1d6e:	f8 94       	cli
    1d70:	de bf       	out	0x3e, r29	; 62
    1d72:	0f be       	out	0x3f, r0	; 63
    1d74:	cd bf       	out	0x3d, r28	; 61
    1d76:	df 91       	pop	r29
    1d78:	cf 91       	pop	r28
    1d7a:	1f 91       	pop	r17
    1d7c:	0f 91       	pop	r16
    1d7e:	ff 90       	pop	r15
    1d80:	ef 90       	pop	r14
    1d82:	df 90       	pop	r13
    1d84:	cf 90       	pop	r12
    1d86:	bf 90       	pop	r11
    1d88:	af 90       	pop	r10
    1d8a:	9f 90       	pop	r9
    1d8c:	8f 90       	pop	r8
    1d8e:	7f 90       	pop	r7
    1d90:	6f 90       	pop	r6
    1d92:	5f 90       	pop	r5
    1d94:	4f 90       	pop	r4
    1d96:	3f 90       	pop	r3
    1d98:	2f 90       	pop	r2
    1d9a:	09 94       	ijmp

00001d9c <TwoWire::~TwoWire()>:
_ZN7TwoWireD2Ev():
    1d9c:	cf 93       	push	r28
    1d9e:	df 93       	push	r29
    1da0:	ec 01       	movw	r28, r24
    1da2:	8c e4       	ldi	r24, 0x4C	; 76
    1da4:	92 e0       	ldi	r25, 0x02	; 2
    1da6:	99 83       	std	Y+1, r25	; 0x01
    1da8:	88 83       	st	Y, r24
    1daa:	8e 85       	ldd	r24, Y+14	; 0x0e
    1dac:	9f 85       	ldd	r25, Y+15	; 0x0f
    1dae:	00 97       	sbiw	r24, 0x00	; 0
    1db0:	11 f0       	breq	.+4      	; 0x1db6 <TwoWire::~TwoWire()+0x1a>
    1db2:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <operator delete[](void*)>
    1db6:	8b 89       	ldd	r24, Y+19	; 0x13
    1db8:	9c 89       	ldd	r25, Y+20	; 0x14
    1dba:	00 97       	sbiw	r24, 0x00	; 0
    1dbc:	21 f0       	breq	.+8      	; 0x1dc6 <TwoWire::~TwoWire()+0x2a>
    1dbe:	df 91       	pop	r29
    1dc0:	cf 91       	pop	r28
    1dc2:	0c 94 b6 15 	jmp	0x2b6c	; 0x2b6c <operator delete[](void*)>
    1dc6:	df 91       	pop	r29
    1dc8:	cf 91       	pop	r28
    1dca:	08 95       	ret

00001dcc <TwoWire::begin()>:
_ZN7TwoWire5beginEv():
    1dcc:	fc 01       	movw	r30, r24
    1dce:	10 8a       	std	Z+16, r1	; 0x10
    1dd0:	11 8a       	std	Z+17, r1	; 0x11
    1dd2:	15 8a       	std	Z+21, r1	; 0x15
    1dd4:	16 8a       	std	Z+22, r1	; 0x16
    1dd6:	04 8c       	ldd	r0, Z+28	; 0x1c
    1dd8:	f5 8d       	ldd	r31, Z+29	; 0x1d
    1dda:	e0 2d       	mov	r30, r0
    1ddc:	09 94       	ijmp

00001dde <TwoWire::beginTransmission(unsigned char)>:
_ZN7TwoWire17beginTransmissionEh():
    1dde:	fc 01       	movw	r30, r24
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	87 8b       	std	Z+23, r24	; 0x17
    1de4:	62 8b       	std	Z+18, r22	; 0x12
    1de6:	15 8a       	std	Z+21, r1	; 0x15
    1de8:	16 8a       	std	Z+22, r1	; 0x16
    1dea:	08 95       	ret

00001dec <TwoWire::endTransmission(unsigned char)>:
_ZN7TwoWire15endTransmissionEh():
    1dec:	0f 93       	push	r16
    1dee:	cf 93       	push	r28
    1df0:	df 93       	push	r29
    1df2:	ec 01       	movw	r28, r24
    1df4:	8b 89       	ldd	r24, Y+19	; 0x13
    1df6:	9c 89       	ldd	r25, Y+20	; 0x14
    1df8:	ee a1       	ldd	r30, Y+38	; 0x26
    1dfa:	ff a1       	ldd	r31, Y+39	; 0x27
    1dfc:	06 2f       	mov	r16, r22
    1dfe:	21 e0       	ldi	r18, 0x01	; 1
    1e00:	4e 89       	ldd	r20, Y+22	; 0x16
    1e02:	bc 01       	movw	r22, r24
    1e04:	8a 89       	ldd	r24, Y+18	; 0x12
    1e06:	09 95       	icall
    1e08:	1d 8a       	std	Y+21, r1	; 0x15
    1e0a:	1e 8a       	std	Y+22, r1	; 0x16
    1e0c:	1f 8a       	std	Y+23, r1	; 0x17
    1e0e:	df 91       	pop	r29
    1e10:	cf 91       	pop	r28
    1e12:	0f 91       	pop	r16
    1e14:	08 95       	ret

00001e16 <TwoWire::endTransmission()>:
_ZN7TwoWire15endTransmissionEv():
    1e16:	61 e0       	ldi	r22, 0x01	; 1
    1e18:	0c 94 f6 0e 	jmp	0x1dec	; 0x1dec <TwoWire::endTransmission(unsigned char)>

00001e1c <TwoWire::onReceiveService(unsigned char*, int)>:
_ZN7TwoWire16onReceiveServiceEPhi():
    1e1c:	fc 01       	movw	r30, r24
    1e1e:	ca 01       	movw	r24, r20
    1e20:	22 8d       	ldd	r18, Z+26	; 0x1a
    1e22:	33 8d       	ldd	r19, Z+27	; 0x1b
    1e24:	23 2b       	or	r18, r19
    1e26:	d9 f0       	breq	.+54     	; 0x1e5e <TwoWire::onReceiveService(unsigned char*, int)+0x42>
    1e28:	30 89       	ldd	r19, Z+16	; 0x10
    1e2a:	21 89       	ldd	r18, Z+17	; 0x11
    1e2c:	32 17       	cp	r19, r18
    1e2e:	b8 f0       	brcs	.+46     	; 0x1e5e <TwoWire::onReceiveService(unsigned char*, int)+0x42>
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	42 2f       	mov	r20, r18
    1e34:	50 e0       	ldi	r21, 0x00	; 0
    1e36:	48 17       	cp	r20, r24
    1e38:	59 07       	cpc	r21, r25
    1e3a:	5c f4       	brge	.+22     	; 0x1e52 <TwoWire::onReceiveService(unsigned char*, int)+0x36>
    1e3c:	db 01       	movw	r26, r22
    1e3e:	a4 0f       	add	r26, r20
    1e40:	b5 1f       	adc	r27, r21
    1e42:	3c 91       	ld	r19, X
    1e44:	a6 85       	ldd	r26, Z+14	; 0x0e
    1e46:	b7 85       	ldd	r27, Z+15	; 0x0f
    1e48:	a4 0f       	add	r26, r20
    1e4a:	b5 1f       	adc	r27, r21
    1e4c:	3c 93       	st	X, r19
    1e4e:	2f 5f       	subi	r18, 0xFF	; 255
    1e50:	f0 cf       	rjmp	.-32     	; 0x1e32 <TwoWire::onReceiveService(unsigned char*, int)+0x16>
    1e52:	10 8a       	std	Z+16, r1	; 0x10
    1e54:	81 8b       	std	Z+17, r24	; 0x11
    1e56:	02 8c       	ldd	r0, Z+26	; 0x1a
    1e58:	f3 8d       	ldd	r31, Z+27	; 0x1b
    1e5a:	e0 2d       	mov	r30, r0
    1e5c:	09 94       	ijmp
    1e5e:	08 95       	ret

00001e60 <{lambda(unsigned char*, int)#1}::_FUN(unsigned char*, int)>:
_ZNUlPhiE_4_FUNES_i():
    1e60:	ab 01       	movw	r20, r22
operator()():
    1e62:	bc 01       	movw	r22, r24
    1e64:	8e eb       	ldi	r24, 0xBE	; 190
    1e66:	92 e0       	ldi	r25, 0x02	; 2
    1e68:	0c 94 0e 0f 	jmp	0x1e1c	; 0x1e1c <TwoWire::onReceiveService(unsigned char*, int)>

00001e6c <TwoWire::onRequestService()>:
_ZN7TwoWire16onRequestServiceEv():
    1e6c:	dc 01       	movw	r26, r24
    1e6e:	58 96       	adiw	r26, 0x18	; 24
    1e70:	ed 91       	ld	r30, X+
    1e72:	fc 91       	ld	r31, X
    1e74:	59 97       	sbiw	r26, 0x19	; 25
    1e76:	30 97       	sbiw	r30, 0x00	; 0
    1e78:	31 f0       	breq	.+12     	; 0x1e86 <TwoWire::onRequestService()+0x1a>
    1e7a:	55 96       	adiw	r26, 0x15	; 21
    1e7c:	1c 92       	st	X, r1
    1e7e:	55 97       	sbiw	r26, 0x15	; 21
    1e80:	56 96       	adiw	r26, 0x16	; 22
    1e82:	1c 92       	st	X, r1
    1e84:	09 94       	ijmp
    1e86:	08 95       	ret

00001e88 <{lambda()#2}::_FUN()>:
_ZNUlvE0_4_FUNEv():
    1e88:	8e eb       	ldi	r24, 0xBE	; 190
    1e8a:	92 e0       	ldi	r25, 0x02	; 2
    1e8c:	0c 94 36 0f 	jmp	0x1e6c	; 0x1e6c <TwoWire::onRequestService()>

00001e90 <_GLOBAL__sub_I__ZN7TwoWireC2EiPFvvES1_PFvhEPFvmEPFhhPhhhEPFhhS6_hhhEPFhPKhhES3_S1_S1_PFvPFvS6_iEESG_PFvS1_ES1_>:
_GLOBAL__sub_I__ZN7TwoWireC2EiPFvvES1_PFvhEPFvmEPFhhPhhhEPFhhS6_hhhEPFhPKhhES3_S1_S1_PFvPFvS6_iEESG_PFvS1_ES1_():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src/Wire.cpp:787
                         twi_manageTimeoutFlag,
                       #endif
                       twi_attachSlaveRxEvent,
                       [](uint8_t* v, int len){ Wire.onReceiveService(v, len); },
                       twi_attachSlaveTxEvent,
                       [](){ Wire.onRequestService(); });
    1e90:	8f 92       	push	r8
    1e92:	9f 92       	push	r9
    1e94:	af 92       	push	r10
    1e96:	bf 92       	push	r11
    1e98:	cf 92       	push	r12
    1e9a:	df 92       	push	r13
    1e9c:	ef 92       	push	r14
    1e9e:	ff 92       	push	r15
    1ea0:	0f 93       	push	r16
    1ea2:	1f 93       	push	r17
__static_initialization_and_destruction_0():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src/Wire.cpp:768
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire(TWI_BUFFER_SIZE,
    1ea4:	84 e4       	ldi	r24, 0x44	; 68
    1ea6:	9f e0       	ldi	r25, 0x0F	; 15
    1ea8:	9f 93       	push	r25
    1eaa:	8f 93       	push	r24
    1eac:	8f e9       	ldi	r24, 0x9F	; 159
    1eae:	90 e1       	ldi	r25, 0x10	; 16
    1eb0:	9f 93       	push	r25
    1eb2:	8f 93       	push	r24
    1eb4:	80 e3       	ldi	r24, 0x30	; 48
    1eb6:	9f e0       	ldi	r25, 0x0F	; 15
    1eb8:	9f 93       	push	r25
    1eba:	8f 93       	push	r24
    1ebc:	8a e9       	ldi	r24, 0x9A	; 154
    1ebe:	90 e1       	ldi	r25, 0x10	; 16
    1ec0:	9f 93       	push	r25
    1ec2:	8f 93       	push	r24
    1ec4:	86 eb       	ldi	r24, 0xB6	; 182
    1ec6:	90 e1       	ldi	r25, 0x10	; 16
    1ec8:	9f 93       	push	r25
    1eca:	8f 93       	push	r24
    1ecc:	8c ea       	ldi	r24, 0xAC	; 172
    1ece:	90 e1       	ldi	r25, 0x10	; 16
    1ed0:	9f 93       	push	r25
    1ed2:	8f 93       	push	r24
    1ed4:	84 ea       	ldi	r24, 0xA4	; 164
    1ed6:	90 e1       	ldi	r25, 0x10	; 16
    1ed8:	9f 93       	push	r25
    1eda:	8f 93       	push	r24
    1edc:	83 e7       	ldi	r24, 0x73	; 115
    1ede:	88 2e       	mov	r8, r24
    1ee0:	80 e1       	ldi	r24, 0x10	; 16
    1ee2:	98 2e       	mov	r9, r24
    1ee4:	93 e2       	ldi	r25, 0x23	; 35
    1ee6:	a9 2e       	mov	r10, r25
    1ee8:	90 e1       	ldi	r25, 0x10	; 16
    1eea:	b9 2e       	mov	r11, r25
    1eec:	23 ee       	ldi	r18, 0xE3	; 227
    1eee:	c2 2e       	mov	r12, r18
    1ef0:	2f e0       	ldi	r18, 0x0F	; 15
    1ef2:	d2 2e       	mov	r13, r18
    1ef4:	30 ed       	ldi	r19, 0xD0	; 208
    1ef6:	e3 2e       	mov	r14, r19
    1ef8:	3f e0       	ldi	r19, 0x0F	; 15
    1efa:	f3 2e       	mov	r15, r19
    1efc:	0c ec       	ldi	r16, 0xCC	; 204
    1efe:	1f e0       	ldi	r17, 0x0F	; 15
    1f00:	2f eb       	ldi	r18, 0xBF	; 191
    1f02:	3f e0       	ldi	r19, 0x0F	; 15
    1f04:	41 ea       	ldi	r20, 0xA1	; 161
    1f06:	5f e0       	ldi	r21, 0x0F	; 15
    1f08:	60 e2       	ldi	r22, 0x20	; 32
    1f0a:	70 e0       	ldi	r23, 0x00	; 0
    1f0c:	8e eb       	ldi	r24, 0xBE	; 190
    1f0e:	92 e0       	ldi	r25, 0x02	; 2
    1f10:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <TwoWire::TwoWire(int, void (*)(), void (*)(), void (*)(unsigned char), void (*)(unsigned long), unsigned char (*)(unsigned char, unsigned char*, unsigned char, unsigned char), unsigned char (*)(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char), unsigned char (*)(unsigned char const*, unsigned char), void (*)(unsigned char), void (*)(), void (*)(), void (*)(void (*)(unsigned char*, int)), void (*)(unsigned char*, int), void (*)(void (*)()), void (*)())>
_GLOBAL__sub_I__ZN7TwoWireC2EiPFvvES1_PFvhEPFvmEPFhhPhhhEPFhhS6_hhhEPFhPKhhES3_S1_S1_PFvPFvS6_iEESG_PFvS1_ES1_():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src/Wire.cpp:787
                         twi_manageTimeoutFlag,
                       #endif
                       twi_attachSlaveRxEvent,
                       [](uint8_t* v, int len){ Wire.onReceiveService(v, len); },
                       twi_attachSlaveTxEvent,
                       [](){ Wire.onRequestService(); });
    1f14:	8d b7       	in	r24, 0x3d	; 61
    1f16:	9e b7       	in	r25, 0x3e	; 62
    1f18:	0e 96       	adiw	r24, 0x0e	; 14
    1f1a:	0f b6       	in	r0, 0x3f	; 63
    1f1c:	f8 94       	cli
    1f1e:	9e bf       	out	0x3e, r25	; 62
    1f20:	0f be       	out	0x3f, r0	; 63
    1f22:	8d bf       	out	0x3d, r24	; 61
    1f24:	1f 91       	pop	r17
    1f26:	0f 91       	pop	r16
    1f28:	ff 90       	pop	r15
    1f2a:	ef 90       	pop	r14
    1f2c:	df 90       	pop	r13
    1f2e:	cf 90       	pop	r12
    1f30:	bf 90       	pop	r11
    1f32:	af 90       	pop	r10
    1f34:	9f 90       	pop	r9
    1f36:	8f 90       	pop	r8
    1f38:	08 95       	ret

00001f3a <_GLOBAL__sub_D__ZN7TwoWireC2EiPFvvES1_PFvhEPFvmEPFhhPhhhEPFhhS6_hhhEPFhPKhhES3_S1_S1_PFvPFvS6_iEESG_PFvS1_ES1_>:
_GLOBAL__sub_D__ZN7TwoWireC2EiPFvvES1_PFvhEPFvmEPFhhPhhhEPFhhS6_hhhEPFhPKhhES3_S1_S1_PFvPFvS6_iEESG_PFvS1_ES1_():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src/Wire.cpp:768
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire(TWI_BUFFER_SIZE,
    1f3a:	8e eb       	ldi	r24, 0xBE	; 190
    1f3c:	92 e0       	ldi	r25, 0x02	; 2
    1f3e:	0c 94 ce 0e 	jmp	0x1d9c	; 0x1d9c <TwoWire::~TwoWire()>

00001f42 <twi_init>:
twi_init():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:531
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    1f42:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <twi_state>
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	80 93 3b 03 	sts	0x033B, r24	; 0x80033b <twi_sendStop>
    1f4c:	10 92 3a 03 	sts	0x033A, r1	; 0x80033a <twi_inRepStart>
    1f50:	61 e0       	ldi	r22, 0x01	; 1
    1f52:	82 e1       	ldi	r24, 0x12	; 18
    1f54:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <digitalWrite>
    1f58:	61 e0       	ldi	r22, 0x01	; 1
    1f5a:	83 e1       	ldi	r24, 0x13	; 19
    1f5c:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <digitalWrite>
    1f60:	e9 eb       	ldi	r30, 0xB9	; 185
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	80 81       	ld	r24, Z
    1f66:	8e 7f       	andi	r24, 0xFE	; 254
    1f68:	80 83       	st	Z, r24
    1f6a:	80 81       	ld	r24, Z
    1f6c:	8d 7f       	andi	r24, 0xFD	; 253
    1f6e:	80 83       	st	Z, r24
    1f70:	80 e2       	ldi	r24, 0x20	; 32
    1f72:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    1f76:	85 e4       	ldi	r24, 0x45	; 69
    1f78:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1f7c:	08 95       	ret

00001f7e <twi_disable>:
twi_disable():
    1f7e:	ec eb       	ldi	r30, 0xBC	; 188
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	80 81       	ld	r24, Z
    1f84:	8a 7b       	andi	r24, 0xBA	; 186
    1f86:	80 83       	st	Z, r24
    1f88:	60 e0       	ldi	r22, 0x00	; 0
    1f8a:	82 e1       	ldi	r24, 0x12	; 18
    1f8c:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <digitalWrite>
    1f90:	60 e0       	ldi	r22, 0x00	; 0
    1f92:	83 e1       	ldi	r24, 0x13	; 19
    1f94:	0c 94 5a 17 	jmp	0x2eb4	; 0x2eb4 <digitalWrite>

00001f98 <twi_setAddress>:
twi_setAddress():
    1f98:	88 0f       	add	r24, r24
    1f9a:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
    1f9e:	08 95       	ret

00001fa0 <twi_setFrequency>:
twi_setFrequency():
    1fa0:	9b 01       	movw	r18, r22
    1fa2:	ac 01       	movw	r20, r24
    1fa4:	60 e0       	ldi	r22, 0x00	; 0
    1fa6:	72 e1       	ldi	r23, 0x12	; 18
    1fa8:	8a e7       	ldi	r24, 0x7A	; 122
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	0e 94 19 1a 	call	0x3432	; 0x3432 <__udivmodsi4>
    1fb0:	20 51       	subi	r18, 0x10	; 16
    1fb2:	31 09       	sbc	r19, r1
    1fb4:	41 09       	sbc	r20, r1
    1fb6:	51 09       	sbc	r21, r1
    1fb8:	56 95       	lsr	r21
    1fba:	47 95       	ror	r20
    1fbc:	37 95       	ror	r19
    1fbe:	27 95       	ror	r18
    1fc0:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    1fc4:	08 95       	ret

00001fc6 <twi_readFrom>:
twi_readFrom():
    1fc6:	41 32       	cpi	r20, 0x21	; 33
    1fc8:	e0 f5       	brcc	.+120    	; 0x2042 <twi_readFrom+0x7c>
    1fca:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <twi_state>
    1fce:	91 11       	cpse	r25, r1
    1fd0:	fc cf       	rjmp	.-8      	; 0x1fca <twi_readFrom+0x4>
    1fd2:	91 e0       	ldi	r25, 0x01	; 1
    1fd4:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <twi_state>
    1fd8:	20 93 3b 03 	sts	0x033B, r18	; 0x80033b <twi_sendStop>
    1fdc:	2f ef       	ldi	r18, 0xFF	; 255
    1fde:	20 93 ee 02 	sts	0x02EE, r18	; 0x8002ee <twi_error>
    1fe2:	70 93 35 03 	sts	0x0335, r23	; 0x800335 <twi_masterBuffer+0x1>
    1fe6:	60 93 34 03 	sts	0x0334, r22	; 0x800334 <twi_masterBuffer>
    1fea:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <twi_masterBufferIndex>
    1fee:	24 0f       	add	r18, r20
    1ff0:	20 93 32 03 	sts	0x0332, r18	; 0x800332 <twi_masterBufferLength>
    1ff4:	90 93 3c 03 	sts	0x033C, r25	; 0x80033c <twi_slarw>
    1ff8:	90 91 3c 03 	lds	r25, 0x033C	; 0x80033c <twi_slarw>
    1ffc:	88 0f       	add	r24, r24
    1ffe:	89 2b       	or	r24, r25
    2000:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <twi_slarw>
    2004:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <twi_inRepStart>
    2008:	81 30       	cpi	r24, 0x01	; 1
    200a:	c9 f4       	brne	.+50     	; 0x203e <twi_readFrom+0x78>
    200c:	10 92 3a 03 	sts	0x033A, r1	; 0x80033a <twi_inRepStart>
    2010:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <twi_slarw>
    2014:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    2018:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    201c:	83 fd       	sbrc	r24, 3
    201e:	f8 cf       	rjmp	.-16     	; 0x2010 <twi_readFrom+0x4a>
    2020:	85 ec       	ldi	r24, 0xC5	; 197
    2022:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2026:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <twi_state>
    202a:	81 30       	cpi	r24, 0x01	; 1
    202c:	e1 f3       	breq	.-8      	; 0x2026 <twi_readFrom+0x60>
    202e:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <twi_masterBufferIndex>
    2032:	84 17       	cp	r24, r20
    2034:	10 f4       	brcc	.+4      	; 0x203a <twi_readFrom+0x74>
    2036:	40 91 33 03 	lds	r20, 0x0333	; 0x800333 <twi_masterBufferIndex>
    203a:	84 2f       	mov	r24, r20
    203c:	08 95       	ret
    203e:	85 ee       	ldi	r24, 0xE5	; 229
    2040:	f0 cf       	rjmp	.-32     	; 0x2022 <twi_readFrom+0x5c>
    2042:	40 e0       	ldi	r20, 0x00	; 0
    2044:	fa cf       	rjmp	.-12     	; 0x203a <twi_readFrom+0x74>

00002046 <twi_writeTo>:
twi_writeTo():
    2046:	0f 93       	push	r16
    2048:	41 32       	cpi	r20, 0x21	; 33
    204a:	08 f0       	brcs	.+2      	; 0x204e <twi_writeTo+0x8>
    204c:	44 c0       	rjmp	.+136    	; 0x20d6 <twi_writeTo+0x90>
    204e:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <twi_state>
    2052:	91 11       	cpse	r25, r1
    2054:	fc cf       	rjmp	.-8      	; 0x204e <twi_writeTo+0x8>
    2056:	92 e0       	ldi	r25, 0x02	; 2
    2058:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <twi_state>
    205c:	00 93 3b 03 	sts	0x033B, r16	; 0x80033b <twi_sendStop>
    2060:	9f ef       	ldi	r25, 0xFF	; 255
    2062:	90 93 ee 02 	sts	0x02EE, r25	; 0x8002ee <twi_error>
    2066:	70 93 35 03 	sts	0x0335, r23	; 0x800335 <twi_masterBuffer+0x1>
    206a:	60 93 34 03 	sts	0x0334, r22	; 0x800334 <twi_masterBuffer>
    206e:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <twi_masterBufferIndex>
    2072:	40 93 32 03 	sts	0x0332, r20	; 0x800332 <twi_masterBufferLength>
    2076:	10 92 3c 03 	sts	0x033C, r1	; 0x80033c <twi_slarw>
    207a:	90 91 3c 03 	lds	r25, 0x033C	; 0x80033c <twi_slarw>
    207e:	88 0f       	add	r24, r24
    2080:	89 2b       	or	r24, r25
    2082:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <twi_slarw>
    2086:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <twi_inRepStart>
    208a:	81 30       	cpi	r24, 0x01	; 1
    208c:	11 f5       	brne	.+68     	; 0x20d2 <twi_writeTo+0x8c>
    208e:	10 92 3a 03 	sts	0x033A, r1	; 0x80033a <twi_inRepStart>
    2092:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <twi_slarw>
    2096:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    209a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    209e:	83 fd       	sbrc	r24, 3
    20a0:	f8 cf       	rjmp	.-16     	; 0x2092 <twi_writeTo+0x4c>
    20a2:	85 ec       	ldi	r24, 0xC5	; 197
    20a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    20a8:	22 23       	and	r18, r18
    20aa:	21 f0       	breq	.+8      	; 0x20b4 <twi_writeTo+0x6e>
    20ac:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <twi_state>
    20b0:	82 30       	cpi	r24, 0x02	; 2
    20b2:	d1 f3       	breq	.-12     	; 0x20a8 <twi_writeTo+0x62>
    20b4:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <twi_error>
    20b8:	8f 3f       	cpi	r24, 0xFF	; 255
    20ba:	79 f0       	breq	.+30     	; 0x20da <twi_writeTo+0x94>
    20bc:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <twi_error>
    20c0:	80 32       	cpi	r24, 0x20	; 32
    20c2:	69 f0       	breq	.+26     	; 0x20de <twi_writeTo+0x98>
    20c4:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <twi_error>
    20c8:	80 33       	cpi	r24, 0x30	; 48
    20ca:	59 f0       	breq	.+22     	; 0x20e2 <twi_writeTo+0x9c>
    20cc:	84 e0       	ldi	r24, 0x04	; 4
    20ce:	0f 91       	pop	r16
    20d0:	08 95       	ret
    20d2:	85 ee       	ldi	r24, 0xE5	; 229
    20d4:	e7 cf       	rjmp	.-50     	; 0x20a4 <twi_writeTo+0x5e>
    20d6:	81 e0       	ldi	r24, 0x01	; 1
    20d8:	fa cf       	rjmp	.-12     	; 0x20ce <twi_writeTo+0x88>
    20da:	80 e0       	ldi	r24, 0x00	; 0
    20dc:	f8 cf       	rjmp	.-16     	; 0x20ce <twi_writeTo+0x88>
    20de:	82 e0       	ldi	r24, 0x02	; 2
    20e0:	f6 cf       	rjmp	.-20     	; 0x20ce <twi_writeTo+0x88>
    20e2:	83 e0       	ldi	r24, 0x03	; 3
    20e4:	f4 cf       	rjmp	.-24     	; 0x20ce <twi_writeTo+0x88>

000020e6 <twi_transmit>:
twi_transmit():
    20e6:	20 91 10 03 	lds	r18, 0x0310	; 0x800310 <twi_txBufferLength>
    20ea:	26 0f       	add	r18, r22
    20ec:	33 27       	eor	r19, r19
    20ee:	33 1f       	adc	r19, r19
    20f0:	21 32       	cpi	r18, 0x21	; 33
    20f2:	31 05       	cpc	r19, r1
    20f4:	ec f4       	brge	.+58     	; 0x2130 <twi_transmit+0x4a>
    20f6:	20 91 3d 03 	lds	r18, 0x033D	; 0x80033d <twi_state>
    20fa:	fc 01       	movw	r30, r24
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	80 e0       	ldi	r24, 0x00	; 0
    2100:	24 30       	cpi	r18, 0x04	; 4
    2102:	69 f0       	breq	.+26     	; 0x211e <twi_transmit+0x38>
    2104:	82 e0       	ldi	r24, 0x02	; 2
    2106:	08 95       	ret
    2108:	a0 91 10 03 	lds	r26, 0x0310	; 0x800310 <twi_txBufferLength>
    210c:	21 91       	ld	r18, Z+
    210e:	ac 01       	movw	r20, r24
    2110:	4e 5e       	subi	r20, 0xEE	; 238
    2112:	5c 4f       	sbci	r21, 0xFC	; 252
    2114:	a4 0f       	add	r26, r20
    2116:	b5 2f       	mov	r27, r21
    2118:	b1 1d       	adc	r27, r1
    211a:	2c 93       	st	X, r18
    211c:	01 96       	adiw	r24, 0x01	; 1
    211e:	86 17       	cp	r24, r22
    2120:	98 f3       	brcs	.-26     	; 0x2108 <twi_transmit+0x22>
    2122:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <twi_txBufferLength>
    2126:	68 0f       	add	r22, r24
    2128:	60 93 10 03 	sts	0x0310, r22	; 0x800310 <twi_txBufferLength>
    212c:	80 e0       	ldi	r24, 0x00	; 0
    212e:	08 95       	ret
    2130:	81 e0       	ldi	r24, 0x01	; 1
    2132:	08 95       	ret

00002134 <twi_attachSlaveRxEvent>:
twi_attachSlaveRxEvent():
    2134:	90 93 37 03 	sts	0x0337, r25	; 0x800337 <twi_onSlaveReceive+0x1>
    2138:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <twi_onSlaveReceive>
    213c:	08 95       	ret

0000213e <twi_attachSlaveTxEvent>:
twi_attachSlaveTxEvent():
    213e:	90 93 39 03 	sts	0x0339, r25	; 0x800339 <twi_onSlaveTransmit+0x1>
    2142:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <twi_onSlaveTransmit>
    2146:	08 95       	ret

00002148 <twi_reply>:
twi_reply():
    2148:	88 23       	and	r24, r24
    214a:	21 f0       	breq	.+8      	; 0x2154 <twi_reply+0xc>
    214c:	85 ec       	ldi	r24, 0xC5	; 197
    214e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2152:	08 95       	ret
    2154:	85 e8       	ldi	r24, 0x85	; 133
    2156:	fb cf       	rjmp	.-10     	; 0x214e <twi_reply+0x6>

00002158 <twi_stop>:
twi_stop():
    2158:	85 ed       	ldi	r24, 0xD5	; 213
    215a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    215e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2162:	84 fd       	sbrc	r24, 4
    2164:	fc cf       	rjmp	.-8      	; 0x215e <twi_stop+0x6>
    2166:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <twi_state>
    216a:	08 95       	ret

0000216c <twi_releaseBus>:
twi_releaseBus():
    216c:	85 ec       	ldi	r24, 0xC5	; 197
    216e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2172:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <twi_state>
    2176:	08 95       	ret

00002178 <__vector_24>:
__vector_24():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:534

ISR(TWI_vect)
{
    2178:	1f 92       	push	r1
    217a:	0f 92       	push	r0
    217c:	0f b6       	in	r0, 0x3f	; 63
    217e:	0f 92       	push	r0
    2180:	11 24       	eor	r1, r1
    2182:	2f 93       	push	r18
    2184:	3f 93       	push	r19
    2186:	4f 93       	push	r20
    2188:	5f 93       	push	r21
    218a:	6f 93       	push	r22
    218c:	7f 93       	push	r23
    218e:	8f 93       	push	r24
    2190:	9f 93       	push	r25
    2192:	af 93       	push	r26
    2194:	bf 93       	push	r27
    2196:	ef 93       	push	r30
    2198:	ff 93       	push	r31
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:535
  switch(TW_STATUS){
    219a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    219e:	88 7f       	andi	r24, 0xF8	; 248
    21a0:	80 36       	cpi	r24, 0x60	; 96
    21a2:	09 f4       	brne	.+2      	; 0x21a6 <__vector_24+0x2e>
    21a4:	4c c0       	rjmp	.+152    	; 0x223e <__vector_24+0xc6>
    21a6:	08 f0       	brcs	.+2      	; 0x21aa <__vector_24+0x32>
    21a8:	3f c0       	rjmp	.+126    	; 0x2228 <__vector_24+0xb0>
    21aa:	88 32       	cpi	r24, 0x28	; 40
    21ac:	09 f4       	brne	.+2      	; 0x21b0 <__vector_24+0x38>
    21ae:	a8 c0       	rjmp	.+336    	; 0x2300 <__vector_24+0x188>
    21b0:	18 f5       	brcc	.+70     	; 0x21f8 <__vector_24+0x80>
    21b2:	80 31       	cpi	r24, 0x10	; 16
    21b4:	09 f4       	brne	.+2      	; 0x21b8 <__vector_24+0x40>
    21b6:	9c c0       	rjmp	.+312    	; 0x22f0 <__vector_24+0x178>
    21b8:	b8 f4       	brcc	.+46     	; 0x21e8 <__vector_24+0x70>
    21ba:	88 23       	and	r24, r24
    21bc:	09 f4       	brne	.+2      	; 0x21c0 <__vector_24+0x48>
    21be:	05 c1       	rjmp	.+522    	; 0x23ca <__vector_24+0x252>
    21c0:	88 30       	cpi	r24, 0x08	; 8
    21c2:	09 f4       	brne	.+2      	; 0x21c6 <__vector_24+0x4e>
    21c4:	95 c0       	rjmp	.+298    	; 0x22f0 <__vector_24+0x178>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:696
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    21c6:	ff 91       	pop	r31
    21c8:	ef 91       	pop	r30
    21ca:	bf 91       	pop	r27
    21cc:	af 91       	pop	r26
    21ce:	9f 91       	pop	r25
    21d0:	8f 91       	pop	r24
    21d2:	7f 91       	pop	r23
    21d4:	6f 91       	pop	r22
    21d6:	5f 91       	pop	r21
    21d8:	4f 91       	pop	r20
    21da:	3f 91       	pop	r19
    21dc:	2f 91       	pop	r18
    21de:	0f 90       	pop	r0
    21e0:	0f be       	out	0x3f, r0	; 63
    21e2:	0f 90       	pop	r0
    21e4:	1f 90       	pop	r1
    21e6:	18 95       	reti
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    21e8:	88 31       	cpi	r24, 0x18	; 24
    21ea:	09 f4       	brne	.+2      	; 0x21ee <__vector_24+0x76>
    21ec:	89 c0       	rjmp	.+274    	; 0x2300 <__vector_24+0x188>
    21ee:	80 32       	cpi	r24, 0x20	; 32
    21f0:	51 f7       	brne	.-44     	; 0x21c6 <__vector_24+0x4e>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:570
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    21f2:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <twi_error>
    21f6:	15 c0       	rjmp	.+42     	; 0x2222 <__vector_24+0xaa>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    21f8:	80 34       	cpi	r24, 0x40	; 64
    21fa:	09 f4       	brne	.+2      	; 0x21fe <__vector_24+0x86>
    21fc:	a6 c0       	rjmp	.+332    	; 0x234a <__vector_24+0x1d2>
    21fe:	48 f4       	brcc	.+18     	; 0x2212 <__vector_24+0x9a>
    2200:	80 33       	cpi	r24, 0x30	; 48
    2202:	b9 f3       	breq	.-18     	; 0x21f2 <__vector_24+0x7a>
    2204:	88 33       	cpi	r24, 0x38	; 56
    2206:	f9 f6       	brne	.-66     	; 0x21c6 <__vector_24+0x4e>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:574
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2208:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <twi_error>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:575
      twi_releaseBus();
    220c:	0e 94 b6 10 	call	0x216c	; 0x216c <twi_releaseBus>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:576
      break;
    2210:	da cf       	rjmp	.-76     	; 0x21c6 <__vector_24+0x4e>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2212:	80 35       	cpi	r24, 0x50	; 80
    2214:	09 f4       	brne	.+2      	; 0x2218 <__vector_24+0xa0>
    2216:	89 c0       	rjmp	.+274    	; 0x232a <__vector_24+0x1b2>
    2218:	88 35       	cpi	r24, 0x58	; 88
    221a:	09 f4       	brne	.+2      	; 0x221e <__vector_24+0xa6>
    221c:	9e c0       	rjmp	.+316    	; 0x235a <__vector_24+0x1e2>
    221e:	88 34       	cpi	r24, 0x48	; 72
    2220:	91 f6       	brne	.-92     	; 0x21c6 <__vector_24+0x4e>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:693
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    2222:	0e 94 ac 10 	call	0x2158	; 0x2158 <twi_stop>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:696
      break;
  }
}
    2226:	cf cf       	rjmp	.-98     	; 0x21c6 <__vector_24+0x4e>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2228:	88 39       	cpi	r24, 0x98	; 152
    222a:	09 f4       	brne	.+2      	; 0x222e <__vector_24+0xb6>
    222c:	94 c0       	rjmp	.+296    	; 0x2356 <__vector_24+0x1de>
    222e:	38 f5       	brcc	.+78     	; 0x227e <__vector_24+0x106>
    2230:	88 37       	cpi	r24, 0x78	; 120
    2232:	29 f0       	breq	.+10     	; 0x223e <__vector_24+0xc6>
    2234:	50 f4       	brcc	.+20     	; 0x224a <__vector_24+0xd2>
    2236:	88 36       	cpi	r24, 0x68	; 104
    2238:	11 f0       	breq	.+4      	; 0x223e <__vector_24+0xc6>
    223a:	80 37       	cpi	r24, 0x70	; 112
    223c:	21 f6       	brne	.-120    	; 0x21c6 <__vector_24+0x4e>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:616
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    223e:	83 e0       	ldi	r24, 0x03	; 3
    2240:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <twi_state>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:618
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2244:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <twi_rxBufferIndex>
    2248:	57 c0       	rjmp	.+174    	; 0x22f8 <__vector_24+0x180>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    224a:	88 38       	cpi	r24, 0x88	; 136
    224c:	09 f4       	brne	.+2      	; 0x2250 <__vector_24+0xd8>
    224e:	83 c0       	rjmp	.+262    	; 0x2356 <__vector_24+0x1de>
    2250:	80 39       	cpi	r24, 0x90	; 144
    2252:	19 f0       	breq	.+6      	; 0x225a <__vector_24+0xe2>
    2254:	80 38       	cpi	r24, 0x80	; 128
    2256:	09 f0       	breq	.+2      	; 0x225a <__vector_24+0xe2>
    2258:	b6 cf       	rjmp	.-148    	; 0x21c6 <__vector_24+0x4e>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:624
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    225a:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <twi_rxBufferIndex>
    225e:	80 32       	cpi	r24, 0x20	; 32
    2260:	08 f0       	brcs	.+2      	; 0x2264 <__vector_24+0xec>
    2262:	79 c0       	rjmp	.+242    	; 0x2356 <__vector_24+0x1de>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:626
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2264:	e0 91 ef 02 	lds	r30, 0x02EF	; 0x8002ef <twi_rxBufferIndex>
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	8e 0f       	add	r24, r30
    226c:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <twi_rxBufferIndex>
    2270:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	e0 51       	subi	r30, 0x10	; 16
    2278:	fd 4f       	sbci	r31, 0xFD	; 253
    227a:	80 83       	st	Z, r24
    227c:	3d c0       	rjmp	.+122    	; 0x22f8 <__vector_24+0x180>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    227e:	80 3b       	cpi	r24, 0xB0	; 176
    2280:	39 f0       	breq	.+14     	; 0x2290 <__vector_24+0x118>
    2282:	e0 f4       	brcc	.+56     	; 0x22bc <__vector_24+0x144>
    2284:	80 3a       	cpi	r24, 0xA0	; 160
    2286:	09 f4       	brne	.+2      	; 0x228a <__vector_24+0x112>
    2288:	85 c0       	rjmp	.+266    	; 0x2394 <__vector_24+0x21c>
    228a:	88 3a       	cpi	r24, 0xA8	; 168
    228c:	09 f0       	breq	.+2      	; 0x2290 <__vector_24+0x118>
    228e:	9b cf       	rjmp	.-202    	; 0x21c6 <__vector_24+0x4e>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:655

    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2290:	84 e0       	ldi	r24, 0x04	; 4
    2292:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <twi_state>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:657
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2296:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <twi_txBufferIndex>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:659
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    229a:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <twi_txBufferLength>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:662
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    229e:	e0 91 38 03 	lds	r30, 0x0338	; 0x800338 <twi_onSlaveTransmit>
    22a2:	f0 91 39 03 	lds	r31, 0x0339	; 0x800339 <twi_onSlaveTransmit+0x1>
    22a6:	09 95       	icall
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:664
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    22a8:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <twi_txBufferLength>
    22ac:	81 11       	cpse	r24, r1
    22ae:	0f c0       	rjmp	.+30     	; 0x22ce <__vector_24+0x156>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:665
        twi_txBufferLength = 1;
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <twi_txBufferLength>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:666
        twi_txBuffer[0] = 0x00;
    22b6:	10 92 12 03 	sts	0x0312, r1	; 0x800312 <twi_txBuffer>
    22ba:	09 c0       	rjmp	.+18     	; 0x22ce <__vector_24+0x156>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    22bc:	80 3c       	cpi	r24, 0xC0	; 192
    22be:	09 f4       	brne	.+2      	; 0x22c2 <__vector_24+0x14a>
    22c0:	82 c0       	rjmp	.+260    	; 0x23c6 <__vector_24+0x24e>
    22c2:	88 3c       	cpi	r24, 0xC8	; 200
    22c4:	09 f4       	brne	.+2      	; 0x22c8 <__vector_24+0x150>
    22c6:	7f c0       	rjmp	.+254    	; 0x23c6 <__vector_24+0x24e>
    22c8:	88 3b       	cpi	r24, 0xB8	; 184
    22ca:	09 f0       	breq	.+2      	; 0x22ce <__vector_24+0x156>
    22cc:	7c cf       	rjmp	.-264    	; 0x21c6 <__vector_24+0x4e>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:672
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    22ce:	e0 91 11 03 	lds	r30, 0x0311	; 0x800311 <twi_txBufferIndex>
    22d2:	81 e0       	ldi	r24, 0x01	; 1
    22d4:	8e 0f       	add	r24, r30
    22d6:	80 93 11 03 	sts	0x0311, r24	; 0x800311 <twi_txBufferIndex>
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	ee 5e       	subi	r30, 0xEE	; 238
    22de:	fc 4f       	sbci	r31, 0xFC	; 252
    22e0:	80 81       	ld	r24, Z
    22e2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:674
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    22e6:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <twi_txBufferIndex>
    22ea:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <twi_txBufferLength>
    22ee:	31 c0       	rjmp	.+98     	; 0x2352 <__vector_24+0x1da>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:540
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    22f0:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <twi_slarw>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:550
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    22f4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
twi_reply():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    22f8:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:423
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    22fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    22fe:	63 cf       	rjmp	.-314    	; 0x21c6 <__vector_24+0x4e>
__vector_24():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:548

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2300:	90 91 33 03 	lds	r25, 0x0333	; 0x800333 <twi_masterBufferIndex>
    2304:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <twi_masterBufferLength>
    2308:	98 17       	cp	r25, r24
    230a:	b8 f5       	brcc	.+110    	; 0x237a <__vector_24+0x202>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:550
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    230c:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <twi_masterBuffer>
    2310:	90 91 35 03 	lds	r25, 0x0335	; 0x800335 <twi_masterBuffer+0x1>
    2314:	e0 91 33 03 	lds	r30, 0x0333	; 0x800333 <twi_masterBufferIndex>
    2318:	21 e0       	ldi	r18, 0x01	; 1
    231a:	2e 0f       	add	r18, r30
    231c:	20 93 33 03 	sts	0x0333, r18	; 0x800333 <twi_masterBufferIndex>
    2320:	e8 0f       	add	r30, r24
    2322:	f9 2f       	mov	r31, r25
    2324:	f1 1d       	adc	r31, r1
    2326:	80 81       	ld	r24, Z
    2328:	e5 cf       	rjmp	.-54     	; 0x22f4 <__vector_24+0x17c>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:581
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    232a:	20 91 34 03 	lds	r18, 0x0334	; 0x800334 <twi_masterBuffer>
    232e:	30 91 35 03 	lds	r19, 0x0335	; 0x800335 <twi_masterBuffer+0x1>
    2332:	e0 91 33 03 	lds	r30, 0x0333	; 0x800333 <twi_masterBufferIndex>
    2336:	81 e0       	ldi	r24, 0x01	; 1
    2338:	8e 0f       	add	r24, r30
    233a:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <twi_masterBufferIndex>
    233e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    2342:	e2 0f       	add	r30, r18
    2344:	f3 2f       	mov	r31, r19
    2346:	f1 1d       	adc	r31, r1
    2348:	80 83       	st	Z, r24
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:585
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    234a:	90 91 33 03 	lds	r25, 0x0333	; 0x800333 <twi_masterBufferIndex>
    234e:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <twi_masterBufferLength>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:674
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2352:	98 17       	cp	r25, r24
    2354:	88 f2       	brcs	.-94     	; 0x22f8 <__vector_24+0x180>
twi_reply():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:423
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2356:	85 e8       	ldi	r24, 0x85	; 133
    2358:	d0 cf       	rjmp	.-96     	; 0x22fa <__vector_24+0x182>
__vector_24():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:593
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    235a:	20 91 34 03 	lds	r18, 0x0334	; 0x800334 <twi_masterBuffer>
    235e:	30 91 35 03 	lds	r19, 0x0335	; 0x800335 <twi_masterBuffer+0x1>
    2362:	e0 91 33 03 	lds	r30, 0x0333	; 0x800333 <twi_masterBufferIndex>
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	8e 0f       	add	r24, r30
    236a:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <twi_masterBufferIndex>
    236e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    2372:	e2 0f       	add	r30, r18
    2374:	f3 2f       	mov	r31, r19
    2376:	f1 1d       	adc	r31, r1
    2378:	80 83       	st	Z, r24
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:594
  if (twi_sendStop)
    237a:	80 91 3b 03 	lds	r24, 0x033B	; 0x80033b <twi_sendStop>
    237e:	81 11       	cpse	r24, r1
    2380:	50 cf       	rjmp	.-352    	; 0x2222 <__vector_24+0xaa>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:597
          twi_stop();
  else {
    twi_inRepStart = true;  // we're going to send the START
    2382:	81 e0       	ldi	r24, 0x01	; 1
    2384:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <twi_inRepStart>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:601
    // don't enable the interrupt. We'll generate the start, but we
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2388:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    238a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
__vector_24():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:685
    case TW_ST_DATA_NACK: // received nack, we are done
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    238e:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <twi_state>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:686
      break;
    2392:	19 cf       	rjmp	.-462    	; 0x21c6 <__vector_24+0x4e>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:635
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2394:	0e 94 b6 10 	call	0x216c	; 0x216c <twi_releaseBus>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:637
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    2398:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <twi_rxBufferIndex>
    239c:	80 32       	cpi	r24, 0x20	; 32
    239e:	30 f4       	brcc	.+12     	; 0x23ac <__vector_24+0x234>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:638
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    23a0:	e0 91 ef 02 	lds	r30, 0x02EF	; 0x8002ef <twi_rxBufferIndex>
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	e0 51       	subi	r30, 0x10	; 16
    23a8:	fd 4f       	sbci	r31, 0xFD	; 253
    23aa:	10 82       	st	Z, r1
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:641
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    23ac:	60 91 ef 02 	lds	r22, 0x02EF	; 0x8002ef <twi_rxBufferIndex>
    23b0:	70 e0       	ldi	r23, 0x00	; 0
    23b2:	e0 91 36 03 	lds	r30, 0x0336	; 0x800336 <twi_onSlaveReceive>
    23b6:	f0 91 37 03 	lds	r31, 0x0337	; 0x800337 <twi_onSlaveReceive+0x1>
    23ba:	80 ef       	ldi	r24, 0xF0	; 240
    23bc:	92 e0       	ldi	r25, 0x02	; 2
    23be:	09 95       	icall
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:643
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    23c0:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <twi_rxBufferIndex>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:644
      break;
    23c4:	00 cf       	rjmp	.-512    	; 0x21c6 <__vector_24+0x4e>
twi_reply():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    23c6:	85 ec       	ldi	r24, 0xC5	; 197
    23c8:	e0 cf       	rjmp	.-64     	; 0x238a <__vector_24+0x212>
__vector_24():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\Wire\src\utility/twi.c:692

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    23ca:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <twi_error>
    23ce:	29 cf       	rjmp	.-430    	; 0x2222 <__vector_24+0xaa>

000023d0 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:164
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    23d0:	fc 01       	movw	r30, r24
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:165
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    23d2:	91 8d       	ldd	r25, Z+25	; 0x19
    23d4:	22 8d       	ldd	r18, Z+26	; 0x1a
    23d6:	89 2f       	mov	r24, r25
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	80 5c       	subi	r24, 0xC0	; 192
    23dc:	9f 4f       	sbci	r25, 0xFF	; 255
    23de:	82 1b       	sub	r24, r18
    23e0:	91 09       	sbc	r25, r1
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:166
}
    23e2:	8f 73       	andi	r24, 0x3F	; 63
    23e4:	99 27       	eor	r25, r25
    23e6:	08 95       	ret

000023e8 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:169

int HardwareSerial::peek(void)
{
    23e8:	fc 01       	movw	r30, r24
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:170
  if (_rx_buffer_head == _rx_buffer_tail) {
    23ea:	91 8d       	ldd	r25, Z+25	; 0x19
    23ec:	82 8d       	ldd	r24, Z+26	; 0x1a
    23ee:	98 17       	cp	r25, r24
    23f0:	31 f0       	breq	.+12     	; 0x23fe <HardwareSerial::peek()+0x16>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:173
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    23f2:	82 8d       	ldd	r24, Z+26	; 0x1a
    23f4:	e8 0f       	add	r30, r24
    23f6:	f1 1d       	adc	r31, r1
    23f8:	85 8d       	ldd	r24, Z+29	; 0x1d
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	08 95       	ret
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:171
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    23fe:	8f ef       	ldi	r24, 0xFF	; 255
    2400:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:175
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    2402:	08 95       	ret

00002404 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:178

int HardwareSerial::read(void)
{
    2404:	fc 01       	movw	r30, r24
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:180
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    2406:	91 8d       	ldd	r25, Z+25	; 0x19
    2408:	82 8d       	ldd	r24, Z+26	; 0x1a
    240a:	98 17       	cp	r25, r24
    240c:	61 f0       	breq	.+24     	; 0x2426 <HardwareSerial::read()+0x22>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:183
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    240e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2410:	ae 0f       	add	r26, r30
    2412:	bf 2f       	mov	r27, r31
    2414:	b1 1d       	adc	r27, r1
    2416:	5d 96       	adiw	r26, 0x1d	; 29
    2418:	8c 91       	ld	r24, X
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:184
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    241a:	92 8d       	ldd	r25, Z+26	; 0x1a
    241c:	9f 5f       	subi	r25, 0xFF	; 255
    241e:	9f 73       	andi	r25, 0x3F	; 63
    2420:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:185
    return c;
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	08 95       	ret
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:181

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2426:	8f ef       	ldi	r24, 0xFF	; 255
    2428:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    242a:	08 95       	ret

0000242c <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:195
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    242c:	fc 01       	movw	r30, r24
    242e:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:196
    tail = _tx_buffer_tail;
    2430:	44 8d       	ldd	r20, Z+28	; 0x1c
    2432:	25 2f       	mov	r18, r21
    2434:	30 e0       	ldi	r19, 0x00	; 0
    2436:	84 2f       	mov	r24, r20
    2438:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:198
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    243a:	82 1b       	sub	r24, r18
    243c:	93 0b       	sbc	r25, r19
    243e:	54 17       	cp	r21, r20
    2440:	10 f0       	brcs	.+4      	; 0x2446 <HardwareSerial::availableForWrite()+0x1a>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:198 (discriminator 1)
    2442:	cf 96       	adiw	r24, 0x3f	; 63
    2444:	08 95       	ret
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:199
  return tail - head - 1;
    2446:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:200
}
    2448:	08 95       	ret

0000244a <serialEventRun()>:
_Z14serialEventRunv():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    244a:	89 e7       	ldi	r24, 0x79	; 121
    244c:	93 e1       	ldi	r25, 0x13	; 19
    244e:	89 2b       	or	r24, r25
    2450:	49 f0       	breq	.+18     	; 0x2464 <serialEventRun()+0x1a>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:67 (discriminator 1)
    2452:	80 e0       	ldi	r24, 0x00	; 0
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	89 2b       	or	r24, r25
    2458:	29 f0       	breq	.+10     	; 0x2464 <serialEventRun()+0x1a>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:67 (discriminator 3)
    245a:	0e 94 79 13 	call	0x26f2	; 0x26f2 <Serial0_available()>
    245e:	81 11       	cpse	r24, r1
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:67
    2460:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:70
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    2464:	80 e0       	ldi	r24, 0x00	; 0
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	89 2b       	or	r24, r25
    246a:	49 f0       	breq	.+18     	; 0x247e <serialEventRun()+0x34>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:70 (discriminator 1)
    246c:	80 e0       	ldi	r24, 0x00	; 0
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	89 2b       	or	r24, r25
    2472:	29 f0       	breq	.+10     	; 0x247e <serialEventRun()+0x34>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:70 (discriminator 3)
    2474:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    2478:	81 11       	cpse	r24, r1
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:70
    247a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:78
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
    247e:	08 95       	ret

00002480 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    2480:	fc 01       	movw	r30, r24
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    2482:	a4 8d       	ldd	r26, Z+28	; 0x1c
    2484:	a8 0f       	add	r26, r24
    2486:	b9 2f       	mov	r27, r25
    2488:	b1 1d       	adc	r27, r1
    248a:	a3 5a       	subi	r26, 0xA3	; 163
    248c:	bf 4f       	sbci	r27, 0xFF	; 255
    248e:	2c 91       	ld	r18, X
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    2490:	84 8d       	ldd	r24, Z+28	; 0x1c
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	01 96       	adiw	r24, 0x01	; 1
    2496:	8f 73       	andi	r24, 0x3F	; 63
    2498:	99 27       	eor	r25, r25
    249a:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:96

  *_udr = c;
    249c:	a6 89       	ldd	r26, Z+22	; 0x16
    249e:	b7 89       	ldd	r27, Z+23	; 0x17
    24a0:	2c 93       	st	X, r18
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:104
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

  #ifdef MPCM0
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    24a2:	a0 89       	ldd	r26, Z+16	; 0x10
    24a4:	b1 89       	ldd	r27, Z+17	; 0x11
    24a6:	8c 91       	ld	r24, X
    24a8:	83 70       	andi	r24, 0x03	; 3
    24aa:	80 64       	ori	r24, 0x40	; 64
    24ac:	8c 93       	st	X, r24
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:109
  #else
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
  #endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    24ae:	93 8d       	ldd	r25, Z+27	; 0x1b
    24b0:	84 8d       	ldd	r24, Z+28	; 0x1c
    24b2:	98 13       	cpse	r25, r24
    24b4:	06 c0       	rjmp	.+12     	; 0x24c2 <HardwareSerial::_tx_udr_empty_irq()+0x42>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
    24b6:	02 88       	ldd	r0, Z+18	; 0x12
    24b8:	f3 89       	ldd	r31, Z+19	; 0x13
    24ba:	e0 2d       	mov	r30, r0
    24bc:	80 81       	ld	r24, Z
    24be:	8f 7d       	andi	r24, 0xDF	; 223
    24c0:	80 83       	st	Z, r24
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:113
  }
}
    24c2:	08 95       	ret

000024c4 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:203
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    24c4:	cf 93       	push	r28
    24c6:	df 93       	push	r29
    24c8:	ec 01       	movw	r28, r24
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:207
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    24ca:	88 8d       	ldd	r24, Y+24	; 0x18
    24cc:	88 23       	and	r24, r24
    24ce:	b9 f0       	breq	.+46     	; 0x24fe <HardwareSerial::flush()+0x3a>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:210
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    24d0:	aa 89       	ldd	r26, Y+18	; 0x12
    24d2:	bb 89       	ldd	r27, Y+19	; 0x13
    24d4:	e8 89       	ldd	r30, Y+16	; 0x10
    24d6:	f9 89       	ldd	r31, Y+17	; 0x11
    24d8:	8c 91       	ld	r24, X
    24da:	85 fd       	sbrc	r24, 5
    24dc:	03 c0       	rjmp	.+6      	; 0x24e4 <HardwareSerial::flush()+0x20>
    24de:	80 81       	ld	r24, Z
    24e0:	86 fd       	sbrc	r24, 6
    24e2:	0d c0       	rjmp	.+26     	; 0x24fe <HardwareSerial::flush()+0x3a>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:211
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    24e4:	0f b6       	in	r0, 0x3f	; 63
    24e6:	07 fc       	sbrc	r0, 7
    24e8:	f7 cf       	rjmp	.-18     	; 0x24d8 <HardwareSerial::flush()+0x14>
    24ea:	8c 91       	ld	r24, X
    24ec:	85 ff       	sbrs	r24, 5
    24ee:	f2 cf       	rjmp	.-28     	; 0x24d4 <HardwareSerial::flush()+0x10>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:215
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
    24f0:	80 81       	ld	r24, Z
    24f2:	85 ff       	sbrs	r24, 5
    24f4:	ed cf       	rjmp	.-38     	; 0x24d0 <HardwareSerial::flush()+0xc>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:216
        _tx_udr_empty_irq();
    24f6:	ce 01       	movw	r24, r28
    24f8:	0e 94 40 12 	call	0x2480	; 0x2480 <HardwareSerial::_tx_udr_empty_irq()>
    24fc:	e9 cf       	rjmp	.-46     	; 0x24d0 <HardwareSerial::flush()+0xc>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:220
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    24fe:	df 91       	pop	r29
    2500:	cf 91       	pop	r28
    2502:	08 95       	ret

00002504 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:223

size_t HardwareSerial::write(uint8_t c)
{
    2504:	ef 92       	push	r14
    2506:	ff 92       	push	r15
    2508:	0f 93       	push	r16
    250a:	1f 93       	push	r17
    250c:	cf 93       	push	r28
    250e:	df 93       	push	r29
    2510:	ec 01       	movw	r28, r24
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:224
  _written = true;
    2512:	81 e0       	ldi	r24, 0x01	; 1
    2514:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:229
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    2516:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2518:	8c 8d       	ldd	r24, Y+28	; 0x1c
    251a:	98 13       	cpse	r25, r24
    251c:	1a c0       	rjmp	.+52     	; 0x2552 <HardwareSerial::write(unsigned char)+0x4e>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:229 (discriminator 1)
    251e:	e8 89       	ldd	r30, Y+16	; 0x10
    2520:	f9 89       	ldd	r31, Y+17	; 0x11
    2522:	80 81       	ld	r24, Z
    2524:	85 ff       	sbrs	r24, 5
    2526:	15 c0       	rjmp	.+42     	; 0x2552 <HardwareSerial::write(unsigned char)+0x4e>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:238
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    2528:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\dell\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    252a:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:239
      *_udr = c;
    252c:	ee 89       	ldd	r30, Y+22	; 0x16
    252e:	ff 89       	ldd	r31, Y+23	; 0x17
    2530:	60 83       	st	Z, r22
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:241
      #ifdef MPCM0
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    2532:	e8 89       	ldd	r30, Y+16	; 0x10
    2534:	f9 89       	ldd	r31, Y+17	; 0x11
    2536:	80 81       	ld	r24, Z
    2538:	83 70       	andi	r24, 0x03	; 3
    253a:	80 64       	ori	r24, 0x40	; 64
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:271
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    *_ucsrb |= _BV(UDRIE0);
    253c:	80 83       	st	Z, r24
__iRestore():
c:\users\dell\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    253e:	9f bf       	out	0x3f, r25	; 63
_ZN14HardwareSerial5writeEh():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:275
  }
  
  return 1;
}
    2540:	81 e0       	ldi	r24, 0x01	; 1
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	df 91       	pop	r29
    2546:	cf 91       	pop	r28
    2548:	1f 91       	pop	r17
    254a:	0f 91       	pop	r16
    254c:	ff 90       	pop	r15
    254e:	ef 90       	pop	r14
    2550:	08 95       	ret
    2552:	f6 2e       	mov	r15, r22
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:248
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
      #endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    2554:	0b 8d       	ldd	r16, Y+27	; 0x1b
    2556:	10 e0       	ldi	r17, 0x00	; 0
    2558:	0f 5f       	subi	r16, 0xFF	; 255
    255a:	1f 4f       	sbci	r17, 0xFF	; 255
    255c:	0f 73       	andi	r16, 0x3F	; 63
    255e:	11 27       	eor	r17, r17
    2560:	e0 2e       	mov	r14, r16
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:252

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    2562:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2564:	8e 11       	cpse	r24, r14
    2566:	0c c0       	rjmp	.+24     	; 0x2580 <HardwareSerial::write(unsigned char)+0x7c>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:253
    if (bit_is_clear(SREG, SREG_I)) {
    2568:	0f b6       	in	r0, 0x3f	; 63
    256a:	07 fc       	sbrc	r0, 7
    256c:	fa cf       	rjmp	.-12     	; 0x2562 <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:258
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    256e:	e8 89       	ldd	r30, Y+16	; 0x10
    2570:	f9 89       	ldd	r31, Y+17	; 0x11
    2572:	80 81       	ld	r24, Z
    2574:	85 ff       	sbrs	r24, 5
    2576:	f5 cf       	rjmp	.-22     	; 0x2562 <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:259
        _tx_udr_empty_irq();
    2578:	ce 01       	movw	r24, r28
    257a:	0e 94 40 12 	call	0x2480	; 0x2480 <HardwareSerial::_tx_udr_empty_irq()>
    257e:	f1 cf       	rjmp	.-30     	; 0x2562 <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:265
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    2580:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2582:	ec 0f       	add	r30, r28
    2584:	fd 2f       	mov	r31, r29
    2586:	f1 1d       	adc	r31, r1
    2588:	e3 5a       	subi	r30, 0xA3	; 163
    258a:	ff 4f       	sbci	r31, 0xFF	; 255
    258c:	f0 82       	st	Z, r15
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:269
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    258e:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\dell\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2590:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:270
    _tx_buffer_head = i;
    2592:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:271
    *_ucsrb |= _BV(UDRIE0);
    2594:	ea 89       	ldd	r30, Y+18	; 0x12
    2596:	fb 89       	ldd	r31, Y+19	; 0x13
    2598:	80 81       	ld	r24, Z
    259a:	80 62       	ori	r24, 0x20	; 32
    259c:	cf cf       	rjmp	.-98     	; 0x253c <HardwareSerial::write(unsigned char)+0x38>

0000259e <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:118
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    259e:	cf 92       	push	r12
    25a0:	df 92       	push	r13
    25a2:	ef 92       	push	r14
    25a4:	ff 92       	push	r15
    25a6:	1f 93       	push	r17
    25a8:	cf 93       	push	r28
    25aa:	df 93       	push	r29
    25ac:	ec 01       	movw	r28, r24
    25ae:	6a 01       	movw	r12, r20
    25b0:	7b 01       	movw	r14, r22
    25b2:	12 2f       	mov	r17, r18
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:120
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    25b4:	60 e8       	ldi	r22, 0x80	; 128
    25b6:	74 e8       	ldi	r23, 0x84	; 132
    25b8:	8e e1       	ldi	r24, 0x1E	; 30
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	a7 01       	movw	r20, r14
    25be:	96 01       	movw	r18, r12
    25c0:	0e 94 19 1a 	call	0x3432	; 0x3432 <__udivmodsi4>
    25c4:	21 50       	subi	r18, 0x01	; 1
    25c6:	31 09       	sbc	r19, r1
    25c8:	41 09       	sbc	r20, r1
    25ca:	51 09       	sbc	r21, r1
    25cc:	56 95       	lsr	r21
    25ce:	47 95       	ror	r20
    25d0:	37 95       	ror	r19
    25d2:	27 95       	ror	r18
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:121
  *_ucsra = 1 << U2X0;
    25d4:	e8 89       	ldd	r30, Y+16	; 0x10
    25d6:	f9 89       	ldd	r31, Y+17	; 0x11
    25d8:	82 e0       	ldi	r24, 0x02	; 2
    25da:	80 83       	st	Z, r24
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:128
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    25dc:	21 15       	cp	r18, r1
    25de:	80 e1       	ldi	r24, 0x10	; 16
    25e0:	38 07       	cpc	r19, r24
    25e2:	98 f0       	brcs	.+38     	; 0x260a <HardwareSerial::begin(unsigned long, unsigned char)+0x6c>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:130
  {
    *_ucsra = 0;
    25e4:	e8 89       	ldd	r30, Y+16	; 0x10
    25e6:	f9 89       	ldd	r31, Y+17	; 0x11
    25e8:	10 82       	st	Z, r1
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:131
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    25ea:	60 e4       	ldi	r22, 0x40	; 64
    25ec:	72 e4       	ldi	r23, 0x42	; 66
    25ee:	8f e0       	ldi	r24, 0x0F	; 15
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	a7 01       	movw	r20, r14
    25f4:	96 01       	movw	r18, r12
    25f6:	0e 94 19 1a 	call	0x3432	; 0x3432 <__udivmodsi4>
    25fa:	21 50       	subi	r18, 0x01	; 1
    25fc:	31 09       	sbc	r19, r1
    25fe:	41 09       	sbc	r20, r1
    2600:	51 09       	sbc	r21, r1
    2602:	56 95       	lsr	r21
    2604:	47 95       	ror	r20
    2606:	37 95       	ror	r19
    2608:	27 95       	ror	r18
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:135
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    260a:	ec 85       	ldd	r30, Y+12	; 0x0c
    260c:	fd 85       	ldd	r31, Y+13	; 0x0d
    260e:	30 83       	st	Z, r19
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
    2610:	ee 85       	ldd	r30, Y+14	; 0x0e
    2612:	ff 85       	ldd	r31, Y+15	; 0x0f
    2614:	20 83       	st	Z, r18
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:138

  _written = false;
    2616:	18 8e       	std	Y+24, r1	; 0x18
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:146
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    2618:	ec 89       	ldd	r30, Y+20	; 0x14
    261a:	fd 89       	ldd	r31, Y+21	; 0x15
    261c:	10 83       	st	Z, r17
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:148
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    261e:	ea 89       	ldd	r30, Y+18	; 0x12
    2620:	fb 89       	ldd	r31, Y+19	; 0x13
    2622:	80 81       	ld	r24, Z
    2624:	88 69       	ori	r24, 0x98	; 152
    2626:	80 83       	st	Z, r24
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:149
  *_ucsrb &= ~_BV(UDRIE0);
    2628:	ea 89       	ldd	r30, Y+18	; 0x12
    262a:	fb 89       	ldd	r31, Y+19	; 0x13
    262c:	80 81       	ld	r24, Z
    262e:	8f 7d       	andi	r24, 0xDF	; 223
    2630:	80 83       	st	Z, r24
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:150
}
    2632:	df 91       	pop	r29
    2634:	cf 91       	pop	r28
    2636:	1f 91       	pop	r17
    2638:	ff 90       	pop	r15
    263a:	ef 90       	pop	r14
    263c:	df 90       	pop	r13
    263e:	cf 90       	pop	r12
    2640:	08 95       	ret

00002642 <__vector_18>:
__vector_18():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RX_vect)
  ISR(USART_RX_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    2642:	1f 92       	push	r1
    2644:	0f 92       	push	r0
    2646:	0f b6       	in	r0, 0x3f	; 63
    2648:	0f 92       	push	r0
    264a:	11 24       	eor	r1, r1
    264c:	2f 93       	push	r18
    264e:	8f 93       	push	r24
    2650:	9f 93       	push	r25
    2652:	ef 93       	push	r30
    2654:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    2656:	e0 91 4e 03 	lds	r30, 0x034E	; 0x80034e <Serial+0x10>
    265a:	f0 91 4f 03 	lds	r31, 0x034F	; 0x80034f <Serial+0x11>
    265e:	80 81       	ld	r24, Z
    2660:	e0 91 54 03 	lds	r30, 0x0354	; 0x800354 <Serial+0x16>
    2664:	f0 91 55 03 	lds	r31, 0x0355	; 0x800355 <Serial+0x17>
    2668:	82 fd       	sbrc	r24, 2
    266a:	1b c0       	rjmp	.+54     	; 0x26a2 <__vector_18+0x60>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    266c:	90 81       	ld	r25, Z
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    266e:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <Serial+0x19>
    2672:	8f 5f       	subi	r24, 0xFF	; 255
    2674:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    2676:	20 91 58 03 	lds	r18, 0x0358	; 0x800358 <Serial+0x1a>
    267a:	82 17       	cp	r24, r18
    267c:	41 f0       	breq	.+16     	; 0x268e <__vector_18+0x4c>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
    267e:	e0 91 57 03 	lds	r30, 0x0357	; 0x800357 <Serial+0x19>
    2682:	f0 e0       	ldi	r31, 0x00	; 0
    2684:	e2 5c       	subi	r30, 0xC2	; 194
    2686:	fc 4f       	sbci	r31, 0xFC	; 252
    2688:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
    268a:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <Serial+0x19>
__vector_18():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    268e:	ff 91       	pop	r31
    2690:	ef 91       	pop	r30
    2692:	9f 91       	pop	r25
    2694:	8f 91       	pop	r24
    2696:	2f 91       	pop	r18
    2698:	0f 90       	pop	r0
    269a:	0f be       	out	0x3f, r0	; 63
    269c:	0f 90       	pop	r0
    269e:	1f 90       	pop	r1
    26a0:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    26a2:	80 81       	ld	r24, Z
__vector_18():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    26a4:	f4 cf       	rjmp	.-24     	; 0x268e <__vector_18+0x4c>

000026a6 <__vector_19>:
__vector_19():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    26a6:	1f 92       	push	r1
    26a8:	0f 92       	push	r0
    26aa:	0f b6       	in	r0, 0x3f	; 63
    26ac:	0f 92       	push	r0
    26ae:	11 24       	eor	r1, r1
    26b0:	2f 93       	push	r18
    26b2:	3f 93       	push	r19
    26b4:	4f 93       	push	r20
    26b6:	5f 93       	push	r21
    26b8:	6f 93       	push	r22
    26ba:	7f 93       	push	r23
    26bc:	8f 93       	push	r24
    26be:	9f 93       	push	r25
    26c0:	af 93       	push	r26
    26c2:	bf 93       	push	r27
    26c4:	ef 93       	push	r30
    26c6:	ff 93       	push	r31
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    26c8:	8e e3       	ldi	r24, 0x3E	; 62
    26ca:	93 e0       	ldi	r25, 0x03	; 3
    26cc:	0e 94 40 12 	call	0x2480	; 0x2480 <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
    26d0:	ff 91       	pop	r31
    26d2:	ef 91       	pop	r30
    26d4:	bf 91       	pop	r27
    26d6:	af 91       	pop	r26
    26d8:	9f 91       	pop	r25
    26da:	8f 91       	pop	r24
    26dc:	7f 91       	pop	r23
    26de:	6f 91       	pop	r22
    26e0:	5f 91       	pop	r21
    26e2:	4f 91       	pop	r20
    26e4:	3f 91       	pop	r19
    26e6:	2f 91       	pop	r18
    26e8:	0f 90       	pop	r0
    26ea:	0f be       	out	0x3f, r0	; 63
    26ec:	0f 90       	pop	r0
    26ee:	1f 90       	pop	r1
    26f0:	18 95       	reti

000026f2 <Serial0_available()>:
_Z17Serial0_availablev():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    26f2:	8e e3       	ldi	r24, 0x3E	; 62
    26f4:	93 e0       	ldi	r25, 0x03	; 3
    26f6:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <HardwareSerial::available()>
    26fa:	21 e0       	ldi	r18, 0x01	; 1
    26fc:	89 2b       	or	r24, r25
    26fe:	09 f4       	brne	.+2      	; 0x2702 <Serial0_available()+0x10>
    2700:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
    2702:	82 2f       	mov	r24, r18
    2704:	08 95       	ret

00002706 <_GLOBAL__sub_I___vector_18>:
_ZN5PrintC4Ev():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    2706:	ee e3       	ldi	r30, 0x3E	; 62
    2708:	f3 e0       	ldi	r31, 0x03	; 3
    270a:	13 82       	std	Z+3, r1	; 0x03
    270c:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    270e:	88 ee       	ldi	r24, 0xE8	; 232
    2710:	93 e0       	ldi	r25, 0x03	; 3
    2712:	a0 e0       	ldi	r26, 0x00	; 0
    2714:	b0 e0       	ldi	r27, 0x00	; 0
    2716:	84 83       	std	Z+4, r24	; 0x04
    2718:	95 83       	std	Z+5, r25	; 0x05
    271a:	a6 83       	std	Z+6, r26	; 0x06
    271c:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial_private.h:92
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    271e:	8e e5       	ldi	r24, 0x5E	; 94
    2720:	92 e0       	ldi	r25, 0x02	; 2
    2722:	91 83       	std	Z+1, r25	; 0x01
    2724:	80 83       	st	Z, r24
    2726:	85 ec       	ldi	r24, 0xC5	; 197
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	95 87       	std	Z+13, r25	; 0x0d
    272c:	84 87       	std	Z+12, r24	; 0x0c
    272e:	84 ec       	ldi	r24, 0xC4	; 196
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	97 87       	std	Z+15, r25	; 0x0f
    2734:	86 87       	std	Z+14, r24	; 0x0e
    2736:	80 ec       	ldi	r24, 0xC0	; 192
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	91 8b       	std	Z+17, r25	; 0x11
    273c:	80 8b       	std	Z+16, r24	; 0x10
    273e:	81 ec       	ldi	r24, 0xC1	; 193
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	93 8b       	std	Z+19, r25	; 0x13
    2744:	82 8b       	std	Z+18, r24	; 0x12
    2746:	82 ec       	ldi	r24, 0xC2	; 194
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	95 8b       	std	Z+21, r25	; 0x15
    274c:	84 8b       	std	Z+20, r24	; 0x14
    274e:	86 ec       	ldi	r24, 0xC6	; 198
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	97 8b       	std	Z+23, r25	; 0x17
    2754:	86 8b       	std	Z+22, r24	; 0x16
    2756:	11 8e       	std	Z+25, r1	; 0x19
    2758:	12 8e       	std	Z+26, r1	; 0x1a
    275a:	13 8e       	std	Z+27, r1	; 0x1b
    275c:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_18():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
    275e:	08 95       	ret

00002760 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:185
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    2760:	af 92       	push	r10
    2762:	bf 92       	push	r11
    2764:	cf 92       	push	r12
    2766:	df 92       	push	r13
    2768:	ef 92       	push	r14
    276a:	ff 92       	push	r15
    276c:	0f 93       	push	r16
    276e:	1f 93       	push	r17
    2770:	cf 93       	push	r28
    2772:	df 93       	push	r29
    2774:	6c 01       	movw	r12, r24
    2776:	7b 01       	movw	r14, r22
    2778:	8b 01       	movw	r16, r22
    277a:	04 0f       	add	r16, r20
    277c:	15 1f       	adc	r17, r21
    277e:	eb 01       	movw	r28, r22
    2780:	5e 01       	movw	r10, r28
    2782:	ae 18       	sub	r10, r14
    2784:	bf 08       	sbc	r11, r15
    2786:	c0 17       	cp	r28, r16
    2788:	d1 07       	cpc	r29, r17
    278a:	59 f0       	breq	.+22     	; 0x27a2 <Print::write(unsigned char const*, unsigned int)+0x42>
    278c:	69 91       	ld	r22, Y+
    278e:	d6 01       	movw	r26, r12
    2790:	ed 91       	ld	r30, X+
    2792:	fc 91       	ld	r31, X
    2794:	01 90       	ld	r0, Z+
    2796:	f0 81       	ld	r31, Z
    2798:	e0 2d       	mov	r30, r0
    279a:	c6 01       	movw	r24, r12
    279c:	09 95       	icall
    279e:	89 2b       	or	r24, r25
    27a0:	79 f7       	brne	.-34     	; 0x2780 <Print::write(unsigned char const*, unsigned int)+0x20>
    27a2:	c5 01       	movw	r24, r10
    27a4:	df 91       	pop	r29
    27a6:	cf 91       	pop	r28
    27a8:	1f 91       	pop	r17
    27aa:	0f 91       	pop	r16
    27ac:	ff 90       	pop	r15
    27ae:	ef 90       	pop	r14
    27b0:	df 90       	pop	r13
    27b2:	cf 90       	pop	r12
    27b4:	bf 90       	pop	r11
    27b6:	af 90       	pop	r10
    27b8:	08 95       	ret

000027ba <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc():
    27ba:	fb 01       	movw	r30, r22
    27bc:	01 90       	ld	r0, Z+
    27be:	00 20       	and	r0, r0
    27c0:	e9 f7       	brne	.-6      	; 0x27bc <Print::write(char const*) [clone .part.2]+0x2>
    27c2:	31 97       	sbiw	r30, 0x01	; 1
    27c4:	af 01       	movw	r20, r30
    27c6:	46 1b       	sub	r20, r22
    27c8:	57 0b       	sbc	r21, r23
    27ca:	dc 01       	movw	r26, r24
    27cc:	ed 91       	ld	r30, X+
    27ce:	fc 91       	ld	r31, X
    27d0:	02 80       	ldd	r0, Z+2	; 0x02
    27d2:	f3 81       	ldd	r31, Z+3	; 0x03
    27d4:	e0 2d       	mov	r30, r0
    27d6:	09 94       	ijmp

000027d8 <Print::print(char const*)>:
    27d8:	61 15       	cp	r22, r1
    27da:	71 05       	cpc	r23, r1
    27dc:	11 f0       	breq	.+4      	; 0x27e2 <Print::print(char const*)+0xa>
    27de:	0c 94 dd 13 	jmp	0x27ba	; 0x27ba <Print::write(char const*) [clone .part.2]>
_ZN5Print5printEPKc():
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	80 e0       	ldi	r24, 0x00	; 0
    27e6:	08 95       	ret

000027e8 <Print::print(char)>:
_ZN5Print5printEc():
    27e8:	dc 01       	movw	r26, r24
    27ea:	ed 91       	ld	r30, X+
    27ec:	fc 91       	ld	r31, X
    27ee:	01 90       	ld	r0, Z+
    27f0:	f0 81       	ld	r31, Z
    27f2:	e0 2d       	mov	r30, r0
    27f4:	09 94       	ijmp

000027f6 <Print::println()>:
_ZN5Print5writeEPKc():
    27f6:	6c e6       	ldi	r22, 0x6C	; 108
    27f8:	72 e0       	ldi	r23, 0x02	; 2
    27fa:	0c 94 dd 13 	jmp	0x27ba	; 0x27ba <Print::write(char const*) [clone .part.2]>

000027fe <Print::println(char const*)>:
_ZN5Print7printlnEPKc():
    27fe:	0f 93       	push	r16
    2800:	1f 93       	push	r17
    2802:	cf 93       	push	r28
    2804:	df 93       	push	r29
    2806:	8c 01       	movw	r16, r24
_ZN5Print5writeEPKc():
    2808:	d0 e0       	ldi	r29, 0x00	; 0
    280a:	c0 e0       	ldi	r28, 0x00	; 0
    280c:	61 15       	cp	r22, r1
    280e:	71 05       	cpc	r23, r1
    2810:	19 f0       	breq	.+6      	; 0x2818 <Print::println(char const*)+0x1a>
    2812:	0e 94 dd 13 	call	0x27ba	; 0x27ba <Print::write(char const*) [clone .part.2]>
    2816:	ec 01       	movw	r28, r24
_ZN5Print7printlnEPKc():
    2818:	c8 01       	movw	r24, r16
    281a:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <Print::println()>
    281e:	8c 0f       	add	r24, r28
    2820:	9d 1f       	adc	r25, r29
    2822:	df 91       	pop	r29
    2824:	cf 91       	pop	r28
    2826:	1f 91       	pop	r17
    2828:	0f 91       	pop	r16
    282a:	08 95       	ret

0000282c <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
    282c:	8f 92       	push	r8
    282e:	9f 92       	push	r9
    2830:	af 92       	push	r10
    2832:	bf 92       	push	r11
    2834:	ef 92       	push	r14
    2836:	ff 92       	push	r15
    2838:	0f 93       	push	r16
    283a:	1f 93       	push	r17
    283c:	cf 93       	push	r28
    283e:	df 93       	push	r29
    2840:	cd b7       	in	r28, 0x3d	; 61
    2842:	de b7       	in	r29, 0x3e	; 62
    2844:	a1 97       	sbiw	r28, 0x21	; 33
    2846:	0f b6       	in	r0, 0x3f	; 63
    2848:	f8 94       	cli
    284a:	de bf       	out	0x3e, r29	; 62
    284c:	0f be       	out	0x3f, r0	; 63
    284e:	cd bf       	out	0x3d, r28	; 61
    2850:	7c 01       	movw	r14, r24
    2852:	fa 01       	movw	r30, r20
    2854:	cb 01       	movw	r24, r22
    2856:	19 a2       	std	Y+33, r1	; 0x21
    2858:	22 30       	cpi	r18, 0x02	; 2
    285a:	08 f4       	brcc	.+2      	; 0x285e <Print::printNumber(unsigned long, unsigned char)+0x32>
    285c:	2a e0       	ldi	r18, 0x0A	; 10
    285e:	8e 01       	movw	r16, r28
    2860:	0f 5d       	subi	r16, 0xDF	; 223
    2862:	1f 4f       	sbci	r17, 0xFF	; 255
    2864:	82 2e       	mov	r8, r18
    2866:	91 2c       	mov	r9, r1
    2868:	b1 2c       	mov	r11, r1
    286a:	a1 2c       	mov	r10, r1
    286c:	bf 01       	movw	r22, r30
    286e:	a5 01       	movw	r20, r10
    2870:	94 01       	movw	r18, r8
    2872:	0e 94 19 1a 	call	0x3432	; 0x3432 <__udivmodsi4>
    2876:	f9 01       	movw	r30, r18
    2878:	ca 01       	movw	r24, r20
    287a:	6a 30       	cpi	r22, 0x0A	; 10
    287c:	0c f5       	brge	.+66     	; 0x28c0 <Print::printNumber(unsigned long, unsigned char)+0x94>
    287e:	60 5d       	subi	r22, 0xD0	; 208
    2880:	d8 01       	movw	r26, r16
    2882:	6e 93       	st	-X, r22
    2884:	8d 01       	movw	r16, r26
    2886:	23 2b       	or	r18, r19
    2888:	24 2b       	or	r18, r20
    288a:	25 2b       	or	r18, r21
    288c:	79 f7       	brne	.-34     	; 0x286c <Print::printNumber(unsigned long, unsigned char)+0x40>
_ZN5Print5writeEPKc():
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	80 e0       	ldi	r24, 0x00	; 0
    2892:	10 97       	sbiw	r26, 0x00	; 0
    2894:	21 f0       	breq	.+8      	; 0x289e <Print::printNumber(unsigned long, unsigned char)+0x72>
    2896:	bd 01       	movw	r22, r26
    2898:	c7 01       	movw	r24, r14
    289a:	0e 94 dd 13 	call	0x27ba	; 0x27ba <Print::write(char const*) [clone .part.2]>
_ZN5Print11printNumberEmh():
    289e:	a1 96       	adiw	r28, 0x21	; 33
    28a0:	0f b6       	in	r0, 0x3f	; 63
    28a2:	f8 94       	cli
    28a4:	de bf       	out	0x3e, r29	; 62
    28a6:	0f be       	out	0x3f, r0	; 63
    28a8:	cd bf       	out	0x3d, r28	; 61
    28aa:	df 91       	pop	r29
    28ac:	cf 91       	pop	r28
    28ae:	1f 91       	pop	r17
    28b0:	0f 91       	pop	r16
    28b2:	ff 90       	pop	r15
    28b4:	ef 90       	pop	r14
    28b6:	bf 90       	pop	r11
    28b8:	af 90       	pop	r10
    28ba:	9f 90       	pop	r9
    28bc:	8f 90       	pop	r8
    28be:	08 95       	ret
    28c0:	69 5c       	subi	r22, 0xC9	; 201
    28c2:	de cf       	rjmp	.-68     	; 0x2880 <Print::printNumber(unsigned long, unsigned char)+0x54>

000028c4 <Print::print(unsigned long, int)>:
_ZN5Print5printEmi():
    28c4:	21 15       	cp	r18, r1
    28c6:	31 05       	cpc	r19, r1
    28c8:	41 f4       	brne	.+16     	; 0x28da <Print::print(unsigned long, int)+0x16>
    28ca:	dc 01       	movw	r26, r24
    28cc:	ed 91       	ld	r30, X+
    28ce:	fc 91       	ld	r31, X
    28d0:	01 90       	ld	r0, Z+
    28d2:	f0 81       	ld	r31, Z
    28d4:	e0 2d       	mov	r30, r0
    28d6:	64 2f       	mov	r22, r20
    28d8:	09 94       	ijmp
    28da:	0c 94 16 14 	jmp	0x282c	; 0x282c <Print::printNumber(unsigned long, unsigned char)>

000028de <Print::print(unsigned int, int)>:
_ZN5Print5printEji():
    28de:	9a 01       	movw	r18, r20
    28e0:	ab 01       	movw	r20, r22
    28e2:	70 e0       	ldi	r23, 0x00	; 0
    28e4:	60 e0       	ldi	r22, 0x00	; 0
    28e6:	0c 94 62 14 	jmp	0x28c4	; 0x28c4 <Print::print(unsigned long, int)>

000028ea <Print::printFloat(double, unsigned char)>:
_ZN5Print10printFloatEdh():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:253

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    28ea:	2f 92       	push	r2
    28ec:	3f 92       	push	r3
    28ee:	4f 92       	push	r4
    28f0:	5f 92       	push	r5
    28f2:	6f 92       	push	r6
    28f4:	7f 92       	push	r7
    28f6:	8f 92       	push	r8
    28f8:	9f 92       	push	r9
    28fa:	af 92       	push	r10
    28fc:	bf 92       	push	r11
    28fe:	cf 92       	push	r12
    2900:	df 92       	push	r13
    2902:	ef 92       	push	r14
    2904:	ff 92       	push	r15
    2906:	1f 93       	push	r17
    2908:	cf 93       	push	r28
    290a:	df 93       	push	r29
    290c:	ec 01       	movw	r28, r24
    290e:	6a 01       	movw	r12, r20
    2910:	7b 01       	movw	r14, r22
    2912:	72 2e       	mov	r7, r18
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:256
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    2914:	ab 01       	movw	r20, r22
    2916:	96 01       	movw	r18, r12
    2918:	cb 01       	movw	r24, r22
    291a:	b6 01       	movw	r22, r12
    291c:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <__unordsf2>
_ZN5Print5writeEPKc():
    2920:	6f e6       	ldi	r22, 0x6F	; 111
    2922:	72 e0       	ldi	r23, 0x02	; 2
_ZN5Print10printFloatEdh():
    2924:	81 11       	cpse	r24, r1
    2926:	26 c0       	rjmp	.+76     	; 0x2974 <Print::printFloat(double, unsigned char)+0x8a>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:257
  if (isinf(number)) return print("inf");
    2928:	46 01       	movw	r8, r12
    292a:	57 01       	movw	r10, r14
    292c:	e8 94       	clt
    292e:	b7 f8       	bld	r11, 7
    2930:	2f ef       	ldi	r18, 0xFF	; 255
    2932:	3f ef       	ldi	r19, 0xFF	; 255
    2934:	4f e7       	ldi	r20, 0x7F	; 127
    2936:	5f e7       	ldi	r21, 0x7F	; 127
    2938:	c5 01       	movw	r24, r10
    293a:	b4 01       	movw	r22, r8
    293c:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <__unordsf2>
    2940:	81 11       	cpse	r24, r1
    2942:	0c c0       	rjmp	.+24     	; 0x295c <Print::printFloat(double, unsigned char)+0x72>
    2944:	2f ef       	ldi	r18, 0xFF	; 255
    2946:	3f ef       	ldi	r19, 0xFF	; 255
    2948:	4f e7       	ldi	r20, 0x7F	; 127
    294a:	5f e7       	ldi	r21, 0x7F	; 127
    294c:	c5 01       	movw	r24, r10
    294e:	b4 01       	movw	r22, r8
    2950:	0e 94 1f 18 	call	0x303e	; 0x303e <__cmpsf2>
_ZN5Print5writeEPKc():
    2954:	63 e7       	ldi	r22, 0x73	; 115
    2956:	72 e0       	ldi	r23, 0x02	; 2
_ZN5Print10printFloatEdh():
    2958:	18 16       	cp	r1, r24
    295a:	64 f0       	brlt	.+24     	; 0x2974 <Print::printFloat(double, unsigned char)+0x8a>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:258
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    295c:	2f ef       	ldi	r18, 0xFF	; 255
    295e:	3f ef       	ldi	r19, 0xFF	; 255
    2960:	4f e7       	ldi	r20, 0x7F	; 127
    2962:	5f e4       	ldi	r21, 0x4F	; 79
    2964:	c7 01       	movw	r24, r14
    2966:	b6 01       	movw	r22, r12
    2968:	0e 94 7e 19 	call	0x32fc	; 0x32fc <__gesf2>
    296c:	18 16       	cp	r1, r24
    296e:	b4 f4       	brge	.+44     	; 0x299c <Print::printFloat(double, unsigned char)+0xb2>
_ZN5Print5writeEPKc():
    2970:	67 e7       	ldi	r22, 0x77	; 119
    2972:	72 e0       	ldi	r23, 0x02	; 2
    2974:	ce 01       	movw	r24, r28
_ZN5Print10printFloatEdh():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:295
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    2976:	df 91       	pop	r29
    2978:	cf 91       	pop	r28
    297a:	1f 91       	pop	r17
    297c:	ff 90       	pop	r15
    297e:	ef 90       	pop	r14
    2980:	df 90       	pop	r13
    2982:	cf 90       	pop	r12
    2984:	bf 90       	pop	r11
    2986:	af 90       	pop	r10
    2988:	9f 90       	pop	r9
    298a:	8f 90       	pop	r8
    298c:	7f 90       	pop	r7
    298e:	6f 90       	pop	r6
    2990:	5f 90       	pop	r5
    2992:	4f 90       	pop	r4
    2994:	3f 90       	pop	r3
    2996:	2f 90       	pop	r2
_ZN5Print5writeEPKc():
    2998:	0c 94 dd 13 	jmp	0x27ba	; 0x27ba <Print::write(char const*) [clone .part.2]>
_ZN5Print10printFloatEdh():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:259
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    299c:	2f ef       	ldi	r18, 0xFF	; 255
    299e:	3f ef       	ldi	r19, 0xFF	; 255
    29a0:	4f e7       	ldi	r20, 0x7F	; 127
    29a2:	5f ec       	ldi	r21, 0xCF	; 207
    29a4:	c7 01       	movw	r24, r14
    29a6:	b6 01       	movw	r22, r12
    29a8:	0e 94 1f 18 	call	0x303e	; 0x303e <__cmpsf2>
    29ac:	87 fd       	sbrc	r24, 7
    29ae:	e0 cf       	rjmp	.-64     	; 0x2970 <Print::printFloat(double, unsigned char)+0x86>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:262
  
  // Handle negative numbers
  if (number < 0.0)
    29b0:	20 e0       	ldi	r18, 0x00	; 0
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	a9 01       	movw	r20, r18
    29b6:	c7 01       	movw	r24, r14
    29b8:	b6 01       	movw	r22, r12
    29ba:	0e 94 1f 18 	call	0x303e	; 0x303e <__cmpsf2>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:254
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    29be:	31 2c       	mov	r3, r1
    29c0:	21 2c       	mov	r2, r1
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:262
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
  
  // Handle negative numbers
  if (number < 0.0)
    29c2:	87 ff       	sbrs	r24, 7
    29c4:	09 c0       	rjmp	.+18     	; 0x29d8 <Print::printFloat(double, unsigned char)+0xee>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:264
  {
     n += print('-');
    29c6:	6d e2       	ldi	r22, 0x2D	; 45
    29c8:	ce 01       	movw	r24, r28
    29ca:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <Print::print(char)>
    29ce:	1c 01       	movw	r2, r24
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:265
     number = -number;
    29d0:	f7 fa       	bst	r15, 7
    29d2:	f0 94       	com	r15
    29d4:	f7 f8       	bld	r15, 7
    29d6:	f0 94       	com	r15
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:270
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    29d8:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:269
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    29da:	60 e0       	ldi	r22, 0x00	; 0
    29dc:	70 e0       	ldi	r23, 0x00	; 0
    29de:	80 e0       	ldi	r24, 0x00	; 0
    29e0:	9f e3       	ldi	r25, 0x3F	; 63
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:270
  for (uint8_t i=0; i<digits; ++i)
    29e2:	71 16       	cp	r7, r17
    29e4:	41 f0       	breq	.+16     	; 0x29f6 <Print::printFloat(double, unsigned char)+0x10c>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:271
    rounding /= 10.0;
    29e6:	20 e0       	ldi	r18, 0x00	; 0
    29e8:	30 e0       	ldi	r19, 0x00	; 0
    29ea:	40 e2       	ldi	r20, 0x20	; 32
    29ec:	51 e4       	ldi	r21, 0x41	; 65
    29ee:	0e 94 24 18 	call	0x3048	; 0x3048 <__divsf3>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:270
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    29f2:	1f 5f       	subi	r17, 0xFF	; 255
    29f4:	f6 cf       	rjmp	.-20     	; 0x29e2 <Print::printFloat(double, unsigned char)+0xf8>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:273
    rounding /= 10.0;
  
  number += rounding;
    29f6:	a7 01       	movw	r20, r14
    29f8:	96 01       	movw	r18, r12
    29fa:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__addsf3>
    29fe:	2b 01       	movw	r4, r22
    2a00:	3c 01       	movw	r6, r24
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:276

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    2a02:	0e 94 9d 18 	call	0x313a	; 0x313a <__fixunssfsi>
    2a06:	4b 01       	movw	r8, r22
    2a08:	5c 01       	movw	r10, r24
_ZN5Print5printEmi():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    2a0a:	2a e0       	ldi	r18, 0x0A	; 10
    2a0c:	bc 01       	movw	r22, r24
    2a0e:	a4 01       	movw	r20, r8
    2a10:	ce 01       	movw	r24, r28
    2a12:	0e 94 16 14 	call	0x282c	; 0x282c <Print::printNumber(unsigned long, unsigned char)>
_ZN5Print10printFloatEdh():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:278
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    2a16:	7c 01       	movw	r14, r24
    2a18:	e2 0c       	add	r14, r2
    2a1a:	f3 1c       	adc	r15, r3
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:281

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    2a1c:	11 23       	and	r17, r17
    2a1e:	b1 f1       	breq	.+108    	; 0x2a8c <Print::printFloat(double, unsigned char)+0x1a2>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:277
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    2a20:	c5 01       	movw	r24, r10
    2a22:	b4 01       	movw	r22, r8
    2a24:	0e 94 cc 18 	call	0x3198	; 0x3198 <__floatunsisf>
    2a28:	9b 01       	movw	r18, r22
    2a2a:	ac 01       	movw	r20, r24
    2a2c:	c3 01       	movw	r24, r6
    2a2e:	b2 01       	movw	r22, r4
    2a30:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <__subsf3>
    2a34:	4b 01       	movw	r8, r22
    2a36:	5c 01       	movw	r10, r24
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:282
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    2a38:	6e e2       	ldi	r22, 0x2E	; 46
    2a3a:	ce 01       	movw	r24, r28
    2a3c:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <Print::print(char)>
    2a40:	e8 0e       	add	r14, r24
    2a42:	f9 1e       	adc	r15, r25
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:286
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    2a44:	11 50       	subi	r17, 0x01	; 1
    2a46:	10 f1       	brcs	.+68     	; 0x2a8c <Print::printFloat(double, unsigned char)+0x1a2>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:288
  {
    remainder *= 10.0;
    2a48:	20 e0       	ldi	r18, 0x00	; 0
    2a4a:	30 e0       	ldi	r19, 0x00	; 0
    2a4c:	40 e2       	ldi	r20, 0x20	; 32
    2a4e:	51 e4       	ldi	r21, 0x41	; 65
    2a50:	c5 01       	movw	r24, r10
    2a52:	b4 01       	movw	r22, r8
    2a54:	0e 94 83 19 	call	0x3306	; 0x3306 <__mulsf3>
    2a58:	2b 01       	movw	r4, r22
    2a5a:	3c 01       	movw	r6, r24
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:289
    unsigned int toPrint = (unsigned int)(remainder);
    2a5c:	0e 94 9d 18 	call	0x313a	; 0x313a <__fixunssfsi>
    2a60:	4b 01       	movw	r8, r22
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:290
    n += print(toPrint);
    2a62:	4a e0       	ldi	r20, 0x0A	; 10
    2a64:	50 e0       	ldi	r21, 0x00	; 0
    2a66:	ce 01       	movw	r24, r28
    2a68:	0e 94 6f 14 	call	0x28de	; 0x28de <Print::print(unsigned int, int)>
    2a6c:	e8 0e       	add	r14, r24
    2a6e:	f9 1e       	adc	r15, r25
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:291
    remainder -= toPrint; 
    2a70:	b4 01       	movw	r22, r8
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	80 e0       	ldi	r24, 0x00	; 0
    2a76:	0e 94 cc 18 	call	0x3198	; 0x3198 <__floatunsisf>
    2a7a:	9b 01       	movw	r18, r22
    2a7c:	ac 01       	movw	r20, r24
    2a7e:	c3 01       	movw	r24, r6
    2a80:	b2 01       	movw	r22, r4
    2a82:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <__subsf3>
    2a86:	4b 01       	movw	r8, r22
    2a88:	5c 01       	movw	r10, r24
    2a8a:	dc cf       	rjmp	.-72     	; 0x2a44 <Print::printFloat(double, unsigned char)+0x15a>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:295
  } 
  
  return n;
}
    2a8c:	c7 01       	movw	r24, r14
    2a8e:	df 91       	pop	r29
    2a90:	cf 91       	pop	r28
    2a92:	1f 91       	pop	r17
    2a94:	ff 90       	pop	r15
    2a96:	ef 90       	pop	r14
    2a98:	df 90       	pop	r13
    2a9a:	cf 90       	pop	r12
    2a9c:	bf 90       	pop	r11
    2a9e:	af 90       	pop	r10
    2aa0:	9f 90       	pop	r9
    2aa2:	8f 90       	pop	r8
    2aa4:	7f 90       	pop	r7
    2aa6:	6f 90       	pop	r6
    2aa8:	5f 90       	pop	r5
    2aaa:	4f 90       	pop	r4
    2aac:	3f 90       	pop	r3
    2aae:	2f 90       	pop	r2
    2ab0:	08 95       	ret

00002ab2 <Print::print(double, int)>:
_ZN5Print5printEdi():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:111
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    2ab2:	0c 94 75 14 	jmp	0x28ea	; 0x28ea <Print::printFloat(double, unsigned char)>

00002ab6 <map(long, long, long, long, long)>:
_Z3maplllll():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WMath.cpp:53
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    2ab6:	4f 92       	push	r4
    2ab8:	5f 92       	push	r5
    2aba:	6f 92       	push	r6
    2abc:	7f 92       	push	r7
    2abe:	af 92       	push	r10
    2ac0:	bf 92       	push	r11
    2ac2:	cf 92       	push	r12
    2ac4:	df 92       	push	r13
    2ac6:	ef 92       	push	r14
    2ac8:	ff 92       	push	r15
    2aca:	0f 93       	push	r16
    2acc:	1f 93       	push	r17
    2ace:	cf 93       	push	r28
    2ad0:	df 93       	push	r29
    2ad2:	cd b7       	in	r28, 0x3d	; 61
    2ad4:	de b7       	in	r29, 0x3e	; 62
    2ad6:	29 01       	movw	r4, r18
    2ad8:	3a 01       	movw	r6, r20
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WMath.cpp:54
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    2ada:	9b 01       	movw	r18, r22
    2adc:	ac 01       	movw	r20, r24
    2ade:	24 19       	sub	r18, r4
    2ae0:	35 09       	sbc	r19, r5
    2ae2:	46 09       	sbc	r20, r6
    2ae4:	57 09       	sbc	r21, r7
    2ae6:	89 89       	ldd	r24, Y+17	; 0x11
    2ae8:	9a 89       	ldd	r25, Y+18	; 0x12
    2aea:	ab 89       	ldd	r26, Y+19	; 0x13
    2aec:	bc 89       	ldd	r27, Y+20	; 0x14
    2aee:	bc 01       	movw	r22, r24
    2af0:	cd 01       	movw	r24, r26
    2af2:	6a 19       	sub	r22, r10
    2af4:	7b 09       	sbc	r23, r11
    2af6:	8c 09       	sbc	r24, r12
    2af8:	9d 09       	sbc	r25, r13
    2afa:	0e 94 f5 19 	call	0x33ea	; 0x33ea <__mulsi3>
    2afe:	a8 01       	movw	r20, r16
    2b00:	97 01       	movw	r18, r14
    2b02:	24 19       	sub	r18, r4
    2b04:	35 09       	sbc	r19, r5
    2b06:	46 09       	sbc	r20, r6
    2b08:	57 09       	sbc	r21, r7
    2b0a:	0e 94 3b 1a 	call	0x3476	; 0x3476 <__divmodsi4>
    2b0e:	ca 01       	movw	r24, r20
    2b10:	b9 01       	movw	r22, r18
    2b12:	6a 0d       	add	r22, r10
    2b14:	7b 1d       	adc	r23, r11
    2b16:	8c 1d       	adc	r24, r12
    2b18:	9d 1d       	adc	r25, r13
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/WMath.cpp:55
}
    2b1a:	df 91       	pop	r29
    2b1c:	cf 91       	pop	r28
    2b1e:	1f 91       	pop	r17
    2b20:	0f 91       	pop	r16
    2b22:	ff 90       	pop	r15
    2b24:	ef 90       	pop	r14
    2b26:	df 90       	pop	r13
    2b28:	cf 90       	pop	r12
    2b2a:	bf 90       	pop	r11
    2b2c:	af 90       	pop	r10
    2b2e:	7f 90       	pop	r7
    2b30:	6f 90       	pop	r6
    2b32:	5f 90       	pop	r5
    2b34:	4f 90       	pop	r4
    2b36:	08 95       	ret

00002b38 <initVariant>:
initVariant():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    2b38:	08 95       	ret

00002b3a <main>:
main():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    2b3a:	0e 94 77 16 	call	0x2cee	; 0x2cee <init>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/main.cpp:37

  initVariant();
    2b3e:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <initVariant>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    2b42:	0e 94 55 0b 	call	0x16aa	; 0x16aa <setup>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    2b46:	c5 e2       	ldi	r28, 0x25	; 37
    2b48:	d2 e1       	ldi	r29, 0x12	; 18
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    2b4a:	0e 94 cc 0a 	call	0x1598	; 0x1598 <loop>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    2b4e:	20 97       	sbiw	r28, 0x00	; 0
    2b50:	e1 f3       	breq	.-8      	; 0x2b4a <main+0x10>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/main.cpp:47 (discriminator 1)
    2b52:	0e 94 25 12 	call	0x244a	; 0x244a <serialEventRun()>
    2b56:	f9 cf       	rjmp	.-14     	; 0x2b4a <main+0x10>

00002b58 <operator new(unsigned int)>:
_Znwj():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/new.cpp:82

void * operator new(std::size_t size, void *place) noexcept {
  // Nothing to do
  (void)size; // unused
  return place;
}
    2b58:	00 97       	sbiw	r24, 0x00	; 0
    2b5a:	11 f4       	brne	.+4      	; 0x2b60 <operator new(unsigned int)+0x8>
    2b5c:	81 e0       	ldi	r24, 0x01	; 1
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	0c 94 8e 1a 	jmp	0x351c	; 0x351c <malloc>

00002b64 <operator new[](unsigned int)>:
_Znaj():
    2b64:	0c 94 ac 15 	jmp	0x2b58	; 0x2b58 <operator new(unsigned int)>

00002b68 <operator delete(void*)>:
_ZdlPv():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/new.cpp:88
void * operator new[](std::size_t size, void *place) noexcept {
  return operator new(size, place);
}

[[gnu::weak]] void operator delete(void * ptr) noexcept {
  free(ptr);
    2b68:	0c 94 2a 1b 	jmp	0x3654	; 0x3654 <free>

00002b6c <operator delete[](void*)>:
_ZdaPv():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/new.cpp:91
}
[[gnu::weak]] void operator delete[](void * ptr) noexcept {
  operator delete(ptr);
    2b6c:	0c 94 b4 15 	jmp	0x2b68	; 0x2b68 <operator delete(void*)>

00002b70 <__vector_16>:
__vector_16():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    2b70:	1f 92       	push	r1
    2b72:	0f 92       	push	r0
    2b74:	0f b6       	in	r0, 0x3f	; 63
    2b76:	0f 92       	push	r0
    2b78:	11 24       	eor	r1, r1
    2b7a:	2f 93       	push	r18
    2b7c:	3f 93       	push	r19
    2b7e:	8f 93       	push	r24
    2b80:	9f 93       	push	r25
    2b82:	af 93       	push	r26
    2b84:	bf 93       	push	r27
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
    2b86:	80 91 e0 03 	lds	r24, 0x03E0	; 0x8003e0 <timer0_millis>
    2b8a:	90 91 e1 03 	lds	r25, 0x03E1	; 0x8003e1 <timer0_millis+0x1>
    2b8e:	a0 91 e2 03 	lds	r26, 0x03E2	; 0x8003e2 <timer0_millis+0x2>
    2b92:	b0 91 e3 03 	lds	r27, 0x03E3	; 0x8003e3 <timer0_millis+0x3>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
    2b96:	30 91 df 03 	lds	r19, 0x03DF	; 0x8003df <timer0_fract>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
    2b9a:	26 e0       	ldi	r18, 0x06	; 6
    2b9c:	23 0f       	add	r18, r19
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
    2b9e:	2d 37       	cpi	r18, 0x7D	; 125
    2ba0:	68 f1       	brcs	.+90     	; 0x2bfc <__vector_16+0x8c>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
    2ba2:	29 e8       	ldi	r18, 0x89	; 137
    2ba4:	23 0f       	add	r18, r19
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
    2ba6:	03 96       	adiw	r24, 0x03	; 3
    2ba8:	a1 1d       	adc	r26, r1
    2baa:	b1 1d       	adc	r27, r1
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
    2bac:	20 93 df 03 	sts	0x03DF, r18	; 0x8003df <timer0_fract>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
    2bb0:	80 93 e0 03 	sts	0x03E0, r24	; 0x8003e0 <timer0_millis>
    2bb4:	90 93 e1 03 	sts	0x03E1, r25	; 0x8003e1 <timer0_millis+0x1>
    2bb8:	a0 93 e2 03 	sts	0x03E2, r26	; 0x8003e2 <timer0_millis+0x2>
    2bbc:	b0 93 e3 03 	sts	0x03E3, r27	; 0x8003e3 <timer0_millis+0x3>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
    2bc0:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <timer0_overflow_count>
    2bc4:	90 91 dc 03 	lds	r25, 0x03DC	; 0x8003dc <timer0_overflow_count+0x1>
    2bc8:	a0 91 dd 03 	lds	r26, 0x03DD	; 0x8003dd <timer0_overflow_count+0x2>
    2bcc:	b0 91 de 03 	lds	r27, 0x03DE	; 0x8003de <timer0_overflow_count+0x3>
    2bd0:	01 96       	adiw	r24, 0x01	; 1
    2bd2:	a1 1d       	adc	r26, r1
    2bd4:	b1 1d       	adc	r27, r1
    2bd6:	80 93 db 03 	sts	0x03DB, r24	; 0x8003db <timer0_overflow_count>
    2bda:	90 93 dc 03 	sts	0x03DC, r25	; 0x8003dc <timer0_overflow_count+0x1>
    2bde:	a0 93 dd 03 	sts	0x03DD, r26	; 0x8003dd <timer0_overflow_count+0x2>
    2be2:	b0 93 de 03 	sts	0x03DE, r27	; 0x8003de <timer0_overflow_count+0x3>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:213
#endif
}
    2be6:	bf 91       	pop	r27
    2be8:	af 91       	pop	r26
    2bea:	9f 91       	pop	r25
    2bec:	8f 91       	pop	r24
    2bee:	3f 91       	pop	r19
    2bf0:	2f 91       	pop	r18
    2bf2:	0f 90       	pop	r0
    2bf4:	0f be       	out	0x3f, r0	; 63
    2bf6:	0f 90       	pop	r0
    2bf8:	1f 90       	pop	r1
    2bfa:	18 95       	reti
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
    2bfc:	02 96       	adiw	r24, 0x02	; 2
    2bfe:	a1 1d       	adc	r26, r1
    2c00:	b1 1d       	adc	r27, r1
    2c02:	d4 cf       	rjmp	.-88     	; 0x2bac <__vector_16+0x3c>

00002c04 <millis>:
millis():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
    2c04:	2f b7       	in	r18, 0x3f	; 63
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
    2c06:	f8 94       	cli
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
    2c08:	60 91 e0 03 	lds	r22, 0x03E0	; 0x8003e0 <timer0_millis>
    2c0c:	70 91 e1 03 	lds	r23, 0x03E1	; 0x8003e1 <timer0_millis+0x1>
    2c10:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <timer0_millis+0x2>
    2c14:	90 91 e3 03 	lds	r25, 0x03E3	; 0x8003e3 <timer0_millis+0x3>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
    2c18:	2f bf       	out	0x3f, r18	; 63
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:227

  return m;
}
    2c1a:	08 95       	ret

00002c1c <micros>:
micros():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
    2c1c:	3f b7       	in	r19, 0x3f	; 63
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
    2c1e:	f8 94       	cli
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
    2c20:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <timer0_overflow_count>
    2c24:	90 91 dc 03 	lds	r25, 0x03DC	; 0x8003dc <timer0_overflow_count+0x1>
    2c28:	a0 91 dd 03 	lds	r26, 0x03DD	; 0x8003dd <timer0_overflow_count+0x2>
    2c2c:	b0 91 de 03 	lds	r27, 0x03DE	; 0x8003de <timer0_overflow_count+0x3>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
    2c30:	26 b5       	in	r18, 0x26	; 38
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
    2c32:	a8 9b       	sbis	0x15, 0	; 21
    2c34:	05 c0       	rjmp	.+10     	; 0x2c40 <micros+0x24>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:261 (discriminator 1)
    2c36:	2f 3f       	cpi	r18, 0xFF	; 255
    2c38:	19 f0       	breq	.+6      	; 0x2c40 <micros+0x24>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
    2c3a:	01 96       	adiw	r24, 0x01	; 1
    2c3c:	a1 1d       	adc	r26, r1
    2c3e:	b1 1d       	adc	r27, r1
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
    2c40:	3f bf       	out	0x3f, r19	; 63
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
    2c42:	ba 2f       	mov	r27, r26
    2c44:	a9 2f       	mov	r26, r25
    2c46:	98 2f       	mov	r25, r24
    2c48:	88 27       	eor	r24, r24
    2c4a:	bc 01       	movw	r22, r24
    2c4c:	cd 01       	movw	r24, r26
    2c4e:	62 0f       	add	r22, r18
    2c50:	71 1d       	adc	r23, r1
    2c52:	81 1d       	adc	r24, r1
    2c54:	91 1d       	adc	r25, r1
    2c56:	43 e0       	ldi	r20, 0x03	; 3
    2c58:	66 0f       	add	r22, r22
    2c5a:	77 1f       	adc	r23, r23
    2c5c:	88 1f       	adc	r24, r24
    2c5e:	99 1f       	adc	r25, r25
    2c60:	4a 95       	dec	r20
    2c62:	d1 f7       	brne	.-12     	; 0x2c58 <micros+0x3c>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
    2c64:	08 95       	ret

00002c66 <delay>:
delay():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
    2c66:	8f 92       	push	r8
    2c68:	9f 92       	push	r9
    2c6a:	af 92       	push	r10
    2c6c:	bf 92       	push	r11
    2c6e:	cf 92       	push	r12
    2c70:	df 92       	push	r13
    2c72:	ef 92       	push	r14
    2c74:	ff 92       	push	r15
    2c76:	6b 01       	movw	r12, r22
    2c78:	7c 01       	movw	r14, r24
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
    2c7a:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <micros>
    2c7e:	4b 01       	movw	r8, r22
    2c80:	5c 01       	movw	r10, r24
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:399

  while (ms > 0UL) {
    2c82:	c1 14       	cp	r12, r1
    2c84:	d1 04       	cpc	r13, r1
    2c86:	e1 04       	cpc	r14, r1
    2c88:	f1 04       	cpc	r15, r1
    2c8a:	e9 f0       	breq	.+58     	; 0x2cc6 <delay+0x60>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:400
    yield();
    2c8c:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <yield>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:401 (discriminator 1)
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    2c90:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <micros>
    2c94:	68 19       	sub	r22, r8
    2c96:	79 09       	sbc	r23, r9
    2c98:	8a 09       	sbc	r24, r10
    2c9a:	9b 09       	sbc	r25, r11
    2c9c:	68 3e       	cpi	r22, 0xE8	; 232
    2c9e:	73 40       	sbci	r23, 0x03	; 3
    2ca0:	81 05       	cpc	r24, r1
    2ca2:	91 05       	cpc	r25, r1
    2ca4:	70 f3       	brcs	.-36     	; 0x2c82 <delay+0x1c>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:402
      ms--;
    2ca6:	21 e0       	ldi	r18, 0x01	; 1
    2ca8:	c2 1a       	sub	r12, r18
    2caa:	d1 08       	sbc	r13, r1
    2cac:	e1 08       	sbc	r14, r1
    2cae:	f1 08       	sbc	r15, r1
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:403
      start += 1000UL;
    2cb0:	88 ee       	ldi	r24, 0xE8	; 232
    2cb2:	88 0e       	add	r8, r24
    2cb4:	83 e0       	ldi	r24, 0x03	; 3
    2cb6:	98 1e       	adc	r9, r24
    2cb8:	a1 1c       	adc	r10, r1
    2cba:	b1 1c       	adc	r11, r1
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    2cbc:	c1 14       	cp	r12, r1
    2cbe:	d1 04       	cpc	r13, r1
    2cc0:	e1 04       	cpc	r14, r1
    2cc2:	f1 04       	cpc	r15, r1
    2cc4:	29 f7       	brne	.-54     	; 0x2c90 <delay+0x2a>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
    2cc6:	ff 90       	pop	r15
    2cc8:	ef 90       	pop	r14
    2cca:	df 90       	pop	r13
    2ccc:	cf 90       	pop	r12
    2cce:	bf 90       	pop	r11
    2cd0:	af 90       	pop	r10
    2cd2:	9f 90       	pop	r9
    2cd4:	8f 90       	pop	r8
    2cd6:	08 95       	ret

00002cd8 <delayMicroseconds>:
delayMicroseconds():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:761
              // 2 cycles to jump back to delay cycle.
  }

#elif F_CPU >= 8000000L
  // for the 8 MHz clock
  __asm__ __volatile__ (
    2cd8:	00 00       	nop
    2cda:	00 00       	nop
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:767
    "nop" "\n\t"
    "nop"); //just waiting 2 cycles

  // for a 1 and 2 microsecond delay, simply return.  the overhead
  // of the function call takes 16 (18) cycles, which is 2us
  if (us <= 2) return; // = 3 cycles, (4 when true)
    2cdc:	83 30       	cpi	r24, 0x03	; 3
    2cde:	91 05       	cpc	r25, r1
    2ce0:	28 f0       	brcs	.+10     	; 0x2cec <delayMicroseconds+0x14>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:772

  // the following loop takes 1/2 of a microsecond (4 cycles)
  // per iteration, so execute it twice for each microsecond of
  // delay requested.
  us <<= 1; //x2 us, = 2 cycles
    2ce2:	88 0f       	add	r24, r24
    2ce4:	99 1f       	adc	r25, r25
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:777

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // us is at least 6 so we can substract 5
  us -= 5; // = 2 cycles
    2ce6:	05 97       	sbiw	r24, 0x05	; 5
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
    2ce8:	01 97       	sbiw	r24, 0x01	; 1
    2cea:	f1 f7       	brne	.-4      	; 0x2ce8 <delayMicroseconds+0x10>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    2cec:	08 95       	ret

00002cee <init>:
init():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    2cee:	78 94       	sei
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    2cf0:	84 b5       	in	r24, 0x24	; 36
    2cf2:	83 60       	ori	r24, 0x03	; 3
    2cf4:	84 bd       	out	0x24, r24	; 36
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    2cf6:	85 b5       	in	r24, 0x25	; 37
    2cf8:	83 60       	ori	r24, 0x03	; 3
    2cfa:	85 bd       	out	0x25, r24	; 37
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    2cfc:	ee e6       	ldi	r30, 0x6E	; 110
    2cfe:	f0 e0       	ldi	r31, 0x00	; 0
    2d00:	80 81       	ld	r24, Z
    2d02:	81 60       	ori	r24, 0x01	; 1
    2d04:	80 83       	st	Z, r24
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    2d06:	e1 e8       	ldi	r30, 0x81	; 129
    2d08:	f0 e0       	ldi	r31, 0x00	; 0
    2d0a:	82 e0       	ldi	r24, 0x02	; 2
    2d0c:	80 83       	st	Z, r24
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    2d0e:	80 81       	ld	r24, Z
    2d10:	81 60       	ori	r24, 0x01	; 1
    2d12:	80 83       	st	Z, r24
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    2d14:	e0 e8       	ldi	r30, 0x80	; 128
    2d16:	f0 e0       	ldi	r31, 0x00	; 0
    2d18:	80 81       	ld	r24, Z
    2d1a:	81 60       	ori	r24, 0x01	; 1
    2d1c:	80 83       	st	Z, r24
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    2d1e:	e1 eb       	ldi	r30, 0xB1	; 177
    2d20:	f0 e0       	ldi	r31, 0x00	; 0
    2d22:	80 81       	ld	r24, Z
    2d24:	84 60       	ori	r24, 0x04	; 4
    2d26:	80 83       	st	Z, r24
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    2d28:	e0 eb       	ldi	r30, 0xB0	; 176
    2d2a:	f0 e0       	ldi	r31, 0x00	; 0
    2d2c:	80 81       	ld	r24, Z
    2d2e:	81 60       	ori	r24, 0x01	; 1
    2d30:	80 83       	st	Z, r24
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
    2d32:	e1 e9       	ldi	r30, 0x91	; 145
    2d34:	f0 e0       	ldi	r31, 0x00	; 0
    2d36:	80 81       	ld	r24, Z
    2d38:	83 60       	ori	r24, 0x03	; 3
    2d3a:	80 83       	st	Z, r24
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
    2d3c:	e0 e9       	ldi	r30, 0x90	; 144
    2d3e:	f0 e0       	ldi	r31, 0x00	; 0
    2d40:	80 81       	ld	r24, Z
    2d42:	81 60       	ori	r24, 0x01	; 1
    2d44:	80 83       	st	Z, r24
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:1038
  TCCR4B |= _BV(CS42) | _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
  TCCR4D |= _BV(WGM40);                        // Put timer 4 in phase- and frequency-correct PWM mode
  TCCR4A |= _BV(PWM4A);                        // Enable PWM mode for comparator OCR4A
  TCCR4C |= _BV(PWM4D);                        // Enable PWM mode for comparator OCR4D
#elif defined(TCCR4B) && defined(CS41) && defined(WGM40)
  TCCR4B |= _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
    2d46:	e1 ea       	ldi	r30, 0xA1	; 161
    2d48:	f0 e0       	ldi	r31, 0x00	; 0
    2d4a:	80 81       	ld	r24, Z
    2d4c:	83 60       	ori	r24, 0x03	; 3
    2d4e:	80 83       	st	Z, r24
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:1039
  TCCR4A |= _BV(WGM40);            // Put timer 4 in 8-bit phase correct pwm mode
    2d50:	e0 ea       	ldi	r30, 0xA0	; 160
    2d52:	f0 e0       	ldi	r31, 0x00	; 0
    2d54:	80 81       	ld	r24, Z
    2d56:	81 60       	ori	r24, 0x01	; 1
    2d58:	80 83       	st	Z, r24
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:1052
#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
  #elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADEN);
    2d5a:	86 e8       	ldi	r24, 0x86	; 134
    2d5c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    2d60:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:1072
#endif
}
    2d64:	08 95       	ret

00002d66 <analogRead>:
analogRead():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_analog.c:49
int analogRead(uint8_t pin)
{

// Macro located in the pins_arduino.h file
#ifdef analogPinToChannel
  pin = analogPinToChannel(pin);
    2d66:	88 30       	cpi	r24, 0x08	; 8
    2d68:	38 f0       	brcs	.+14     	; 0x2d78 <analogRead+0x12>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_analog.c:49 (discriminator 1)
    2d6a:	92 ef       	ldi	r25, 0xF2	; 242
    2d6c:	98 0f       	add	r25, r24
    2d6e:	9b 30       	cpi	r25, 0x0B	; 11
    2d70:	d8 f0       	brcs	.+54     	; 0x2da8 <analogRead+0x42>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_analog.c:49 (discriminator 4)
    2d72:	89 31       	cpi	r24, 0x19	; 25
    2d74:	d8 f0       	brcs	.+54     	; 0x2dac <analogRead+0x46>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_analog.c:49 (discriminator 6)
    2d76:	83 51       	subi	r24, 0x13	; 19
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_analog.c:68 (discriminator 12)
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
    2d78:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <analog_reference>
    2d7c:	90 e4       	ldi	r25, 0x40	; 64
    2d7e:	29 9f       	mul	r18, r25
    2d80:	90 01       	movw	r18, r0
    2d82:	11 24       	eor	r1, r1
    2d84:	87 70       	andi	r24, 0x07	; 7
    2d86:	82 2b       	or	r24, r18
    2d88:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_analog.c:76 (discriminator 12)
  // without a delay, we seem to read from the wrong channel
  //delay(1);

#if defined(ADCSRA) && defined(ADC)
  // start the conversion
  ADCSRA |= _BV(ADSC);
    2d8c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    2d90:	80 64       	ori	r24, 0x40	; 64
    2d92:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_analog.c:79 (discriminator 1)

  // ADSC is cleared when the conversion finishes
  while (ADCSRA & _BV(ADSC)) {};
    2d96:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    2d9a:	86 fd       	sbrc	r24, 6
    2d9c:	fc cf       	rjmp	.-8      	; 0x2d96 <analogRead+0x30>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_analog.c:83

  // ADC macro takes care of reading ADC register.
 	// avr-gcc implements the proper reading order: ADCL is read first.
 	return ADC;
    2d9e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    2da2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_analog.c:87
#else
  return 0;
#endif
}
    2da6:	08 95       	ret
    2da8:	89 2f       	mov	r24, r25
    2daa:	e6 cf       	rjmp	.-52     	; 0x2d78 <analogRead+0x12>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_analog.c:49
int analogRead(uint8_t pin)
{

// Macro located in the pins_arduino.h file
#ifdef analogPinToChannel
  pin = analogPinToChannel(pin);
    2dac:	8f ef       	ldi	r24, 0xFF	; 255
    2dae:	e4 cf       	rjmp	.-56     	; 0x2d78 <analogRead+0x12>

00002db0 <turnOffPWM>:
turnOffPWM():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    2db0:	82 50       	subi	r24, 0x02	; 2
    2db2:	8d 30       	cpi	r24, 0x0D	; 13
    2db4:	08 f0       	brcs	.+2      	; 0x2db8 <turnOffPWM+0x8>
    2db6:	3e c0       	rjmp	.+124    	; 0x2e34 <turnOffPWM+0x84>
    2db8:	e8 2f       	mov	r30, r24
    2dba:	f0 e0       	ldi	r31, 0x00	; 0
    2dbc:	ee 51       	subi	r30, 0x1E	; 30
    2dbe:	f9 4e       	sbci	r31, 0xE9	; 233
    2dc0:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__tablejump2__>
    2dc4:	17 17       	cp	r17, r23
    2dc6:	1b 17       	cp	r17, r27
    2dc8:	ef 16       	cp	r14, r31
    2dca:	f5 16       	cp	r15, r21
    2dcc:	1a 17       	cp	r17, r26
    2dce:	1a 17       	cp	r17, r26
    2dd0:	f9 16       	cp	r15, r25
    2dd2:	ff 16       	cp	r15, r31
    2dd4:	03 17       	cp	r16, r19
    2dd6:	09 17       	cp	r16, r25
    2dd8:	1a 17       	cp	r17, r26
    2dda:	0d 17       	cp	r16, r29
    2ddc:	13 17       	cp	r17, r19
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    2dde:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    2de2:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    2de4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:88
        break;
    2de8:	08 95       	ret
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    2dea:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    2dee:	8f 7d       	andi	r24, 0xDF	; 223
    2df0:	f9 cf       	rjmp	.-14     	; 0x2de4 <turnOffPWM+0x34>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
    2df2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    2df6:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    2df8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:110
        break;
    2dfc:	08 95       	ret
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    2dfe:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    2e02:	8f 7d       	andi	r24, 0xDF	; 223
    2e04:	f9 cf       	rjmp	.-14     	; 0x2df8 <turnOffPWM+0x48>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
    2e06:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
    2e0a:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:121
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    2e0c:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:122
        break;
    2e10:	08 95       	ret
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    2e12:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
    2e16:	8f 7d       	andi	r24, 0xDF	; 223
    2e18:	f9 cf       	rjmp	.-14     	; 0x2e0c <turnOffPWM+0x5c>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:133
    #endif

    // Timer4
    #if defined(TCCR4A) && defined(COM4A1)
      case TIMER4A:
        TCCR4A &= ~_BV(COM4A1);
    2e1a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
    2e1e:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:138
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4B1)
      case  TIMER4B:
        TCCR4A &= ~_BV(COM4B1);
    2e20:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:139
        break;
    2e24:	08 95       	ret
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:138
        TCCR4A &= ~_BV(COM4A1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4B1)
      case  TIMER4B:
        TCCR4A &= ~_BV(COM4B1);
    2e26:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
    2e2a:	8f 7d       	andi	r24, 0xDF	; 223
    2e2c:	f9 cf       	rjmp	.-14     	; 0x2e20 <turnOffPWM+0x70>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
    2e2e:	84 b5       	in	r24, 0x24	; 36
    2e30:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    2e32:	84 bd       	out	0x24, r24	; 36
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
    2e34:	08 95       	ret
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    2e36:	84 b5       	in	r24, 0x24	; 36
    2e38:	8f 7d       	andi	r24, 0xDF	; 223
    2e3a:	fb cf       	rjmp	.-10     	; 0x2e32 <turnOffPWM+0x82>

00002e3c <pinMode>:
pinMode():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    2e3c:	cf 93       	push	r28
    2e3e:	df 93       	push	r29
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	fc 01       	movw	r30, r24
    2e44:	e1 53       	subi	r30, 0x31	; 49
    2e46:	fe 4f       	sbci	r31, 0xFE	; 254
    2e48:	24 91       	lpm	r18, Z
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    2e4a:	86 51       	subi	r24, 0x16	; 22
    2e4c:	9e 4f       	sbci	r25, 0xFE	; 254
    2e4e:	fc 01       	movw	r30, r24
    2e50:	84 91       	lpm	r24, Z
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    2e52:	88 23       	and	r24, r24
    2e54:	c9 f0       	breq	.+50     	; 0x2e88 <pinMode+0x4c>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    2e56:	90 e0       	ldi	r25, 0x00	; 0
    2e58:	88 0f       	add	r24, r24
    2e5a:	99 1f       	adc	r25, r25
    2e5c:	fc 01       	movw	r30, r24
    2e5e:	e3 5e       	subi	r30, 0xE3	; 227
    2e60:	fd 4f       	sbci	r31, 0xFD	; 253
    2e62:	a5 91       	lpm	r26, Z+
    2e64:	b4 91       	lpm	r27, Z
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    2e66:	fc 01       	movw	r30, r24
    2e68:	ef 5e       	subi	r30, 0xEF	; 239
    2e6a:	fd 4f       	sbci	r31, 0xFD	; 253
    2e6c:	c5 91       	lpm	r28, Z+
    2e6e:	d4 91       	lpm	r29, Z
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    2e70:	61 11       	cpse	r22, r1
    2e72:	0d c0       	rjmp	.+26     	; 0x2e8e <pinMode+0x52>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    2e74:	9f b7       	in	r25, 0x3f	; 63
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
    2e76:	f8 94       	cli
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    2e78:	8c 91       	ld	r24, X
    2e7a:	20 95       	com	r18
    2e7c:	82 23       	and	r24, r18
    2e7e:	8c 93       	st	X, r24
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    2e80:	88 81       	ld	r24, Y
    2e82:	28 23       	and	r18, r24
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    2e84:	28 83       	st	Y, r18
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    2e86:	9f bf       	out	0x3f, r25	; 63
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    2e88:	df 91       	pop	r29
    2e8a:	cf 91       	pop	r28
    2e8c:	08 95       	ret
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    2e8e:	62 30       	cpi	r22, 0x02	; 2
    2e90:	51 f4       	brne	.+20     	; 0x2ea6 <pinMode+0x6a>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    2e92:	9f b7       	in	r25, 0x3f	; 63
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
    2e94:	f8 94       	cli
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    2e96:	3c 91       	ld	r19, X
    2e98:	82 2f       	mov	r24, r18
    2e9a:	80 95       	com	r24
    2e9c:	83 23       	and	r24, r19
    2e9e:	8c 93       	st	X, r24
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    2ea0:	e8 81       	ld	r30, Y
    2ea2:	2e 2b       	or	r18, r30
    2ea4:	ef cf       	rjmp	.-34     	; 0x2e84 <pinMode+0x48>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    2ea6:	8f b7       	in	r24, 0x3f	; 63
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
    2ea8:	f8 94       	cli
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    2eaa:	ec 91       	ld	r30, X
    2eac:	2e 2b       	or	r18, r30
    2eae:	2c 93       	st	X, r18
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    2eb0:	8f bf       	out	0x3f, r24	; 63
    2eb2:	ea cf       	rjmp	.-44     	; 0x2e88 <pinMode+0x4c>

00002eb4 <digitalWrite>:
digitalWrite():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2eb4:	1f 93       	push	r17
    2eb6:	cf 93       	push	r28
    2eb8:	df 93       	push	r29
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    2eba:	28 2f       	mov	r18, r24
    2ebc:	30 e0       	ldi	r19, 0x00	; 0
    2ebe:	f9 01       	movw	r30, r18
    2ec0:	ec 54       	subi	r30, 0x4C	; 76
    2ec2:	fe 4f       	sbci	r31, 0xFE	; 254
    2ec4:	84 91       	lpm	r24, Z
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    2ec6:	f9 01       	movw	r30, r18
    2ec8:	e1 53       	subi	r30, 0x31	; 49
    2eca:	fe 4f       	sbci	r31, 0xFE	; 254
    2ecc:	d4 91       	lpm	r29, Z
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    2ece:	f9 01       	movw	r30, r18
    2ed0:	e6 51       	subi	r30, 0x16	; 22
    2ed2:	fe 4f       	sbci	r31, 0xFE	; 254
    2ed4:	c4 91       	lpm	r28, Z
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    2ed6:	cc 23       	and	r28, r28
    2ed8:	a9 f0       	breq	.+42     	; 0x2f04 <digitalWrite+0x50>
    2eda:	16 2f       	mov	r17, r22
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2edc:	81 11       	cpse	r24, r1
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
    2ede:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <turnOffPWM>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    2ee2:	ec 2f       	mov	r30, r28
    2ee4:	f0 e0       	ldi	r31, 0x00	; 0
    2ee6:	ee 0f       	add	r30, r30
    2ee8:	ff 1f       	adc	r31, r31
    2eea:	ef 5e       	subi	r30, 0xEF	; 239
    2eec:	fd 4f       	sbci	r31, 0xFD	; 253
    2eee:	a5 91       	lpm	r26, Z+
    2ef0:	b4 91       	lpm	r27, Z
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    2ef2:	8f b7       	in	r24, 0x3f	; 63
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
    2ef4:	f8 94       	cli
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    2ef6:	ec 91       	ld	r30, X
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    2ef8:	11 11       	cpse	r17, r1
    2efa:	08 c0       	rjmp	.+16     	; 0x2f0c <digitalWrite+0x58>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    2efc:	d0 95       	com	r29
    2efe:	de 23       	and	r29, r30
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    2f00:	dc 93       	st	X, r29
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    2f02:	8f bf       	out	0x3f, r24	; 63
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:212
}
    2f04:	df 91       	pop	r29
    2f06:	cf 91       	pop	r28
    2f08:	1f 91       	pop	r17
    2f0a:	08 95       	ret
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    2f0c:	de 2b       	or	r29, r30
    2f0e:	f8 cf       	rjmp	.-16     	; 0x2f00 <digitalWrite+0x4c>

00002f10 <digitalRead>:
digitalRead():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
    2f10:	cf 93       	push	r28
    2f12:	df 93       	push	r29
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
    2f14:	28 2f       	mov	r18, r24
    2f16:	30 e0       	ldi	r19, 0x00	; 0
    2f18:	f9 01       	movw	r30, r18
    2f1a:	ec 54       	subi	r30, 0x4C	; 76
    2f1c:	fe 4f       	sbci	r31, 0xFE	; 254
    2f1e:	84 91       	lpm	r24, Z
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
    2f20:	f9 01       	movw	r30, r18
    2f22:	e1 53       	subi	r30, 0x31	; 49
    2f24:	fe 4f       	sbci	r31, 0xFE	; 254
    2f26:	d4 91       	lpm	r29, Z
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
    2f28:	f9 01       	movw	r30, r18
    2f2a:	e6 51       	subi	r30, 0x16	; 22
    2f2c:	fe 4f       	sbci	r31, 0xFE	; 254
    2f2e:	c4 91       	lpm	r28, Z
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
    2f30:	cc 23       	and	r28, r28
    2f32:	a1 f0       	breq	.+40     	; 0x2f5c <digitalRead+0x4c>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2f34:	81 11       	cpse	r24, r1
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:224 (discriminator 1)
    2f36:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <turnOffPWM>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
    2f3a:	ec 2f       	mov	r30, r28
    2f3c:	f0 e0       	ldi	r31, 0x00	; 0
    2f3e:	ee 0f       	add	r30, r30
    2f40:	ff 1f       	adc	r31, r31
    2f42:	eb 5f       	subi	r30, 0xFB	; 251
    2f44:	fd 4f       	sbci	r31, 0xFD	; 253
    2f46:	a5 91       	lpm	r26, Z+
    2f48:	b4 91       	lpm	r27, Z
    2f4a:	ec 91       	ld	r30, X
    2f4c:	ed 23       	and	r30, r29
    2f4e:	81 e0       	ldi	r24, 0x01	; 1
    2f50:	90 e0       	ldi	r25, 0x00	; 0
    2f52:	09 f4       	brne	.+2      	; 0x2f56 <digitalRead+0x46>
    2f54:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
    2f56:	df 91       	pop	r29
    2f58:	cf 91       	pop	r28
    2f5a:	08 95       	ret
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
    2f5c:	80 e0       	ldi	r24, 0x00	; 0
    2f5e:	90 e0       	ldi	r25, 0x00	; 0
    2f60:	fa cf       	rjmp	.-12     	; 0x2f56 <digitalRead+0x46>

00002f62 <yield>:
__empty():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
    2f62:	08 95       	ret

00002f64 <__subsf3>:
__subsf3():
    2f64:	50 58       	subi	r21, 0x80	; 128

00002f66 <__addsf3>:
    2f66:	bb 27       	eor	r27, r27
    2f68:	aa 27       	eor	r26, r26
    2f6a:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <__addsf3x>
    2f6e:	0c 94 44 19 	jmp	0x3288	; 0x3288 <__fp_round>
__addsf3():
    2f72:	0e 94 36 19 	call	0x326c	; 0x326c <__fp_pscA>
    2f76:	38 f0       	brcs	.+14     	; 0x2f86 <__addsf3+0x20>
    2f78:	0e 94 3d 19 	call	0x327a	; 0x327a <__fp_pscB>
    2f7c:	20 f0       	brcs	.+8      	; 0x2f86 <__addsf3+0x20>
    2f7e:	39 f4       	brne	.+14     	; 0x2f8e <__addsf3+0x28>
    2f80:	9f 3f       	cpi	r25, 0xFF	; 255
    2f82:	19 f4       	brne	.+6      	; 0x2f8a <__addsf3+0x24>
    2f84:	26 f4       	brtc	.+8      	; 0x2f8e <__addsf3+0x28>
    2f86:	0c 94 33 19 	jmp	0x3266	; 0x3266 <__fp_nan>
    2f8a:	0e f4       	brtc	.+2      	; 0x2f8e <__addsf3+0x28>
    2f8c:	e0 95       	com	r30
    2f8e:	e7 fb       	bst	r30, 7
    2f90:	0c 94 2d 19 	jmp	0x325a	; 0x325a <__fp_inf>

00002f94 <__addsf3x>:
__addsf3x():
    2f94:	e9 2f       	mov	r30, r25
    2f96:	0e 94 55 19 	call	0x32aa	; 0x32aa <__fp_split3>
    2f9a:	58 f3       	brcs	.-42     	; 0x2f72 <__addsf3+0xc>
    2f9c:	ba 17       	cp	r27, r26
    2f9e:	62 07       	cpc	r22, r18
    2fa0:	73 07       	cpc	r23, r19
    2fa2:	84 07       	cpc	r24, r20
    2fa4:	95 07       	cpc	r25, r21
    2fa6:	20 f0       	brcs	.+8      	; 0x2fb0 <__addsf3x+0x1c>
    2fa8:	79 f4       	brne	.+30     	; 0x2fc8 <__addsf3x+0x34>
    2faa:	a6 f5       	brtc	.+104    	; 0x3014 <__addsf3x+0x80>
    2fac:	0c 94 77 19 	jmp	0x32ee	; 0x32ee <__fp_zero>
    2fb0:	0e f4       	brtc	.+2      	; 0x2fb4 <__addsf3x+0x20>
    2fb2:	e0 95       	com	r30
    2fb4:	0b 2e       	mov	r0, r27
    2fb6:	ba 2f       	mov	r27, r26
    2fb8:	a0 2d       	mov	r26, r0
    2fba:	0b 01       	movw	r0, r22
    2fbc:	b9 01       	movw	r22, r18
    2fbe:	90 01       	movw	r18, r0
    2fc0:	0c 01       	movw	r0, r24
    2fc2:	ca 01       	movw	r24, r20
    2fc4:	a0 01       	movw	r20, r0
    2fc6:	11 24       	eor	r1, r1
    2fc8:	ff 27       	eor	r31, r31
    2fca:	59 1b       	sub	r21, r25
    2fcc:	99 f0       	breq	.+38     	; 0x2ff4 <__addsf3x+0x60>
    2fce:	59 3f       	cpi	r21, 0xF9	; 249
    2fd0:	50 f4       	brcc	.+20     	; 0x2fe6 <__addsf3x+0x52>
    2fd2:	50 3e       	cpi	r21, 0xE0	; 224
    2fd4:	68 f1       	brcs	.+90     	; 0x3030 <__addsf3x+0x9c>
    2fd6:	1a 16       	cp	r1, r26
    2fd8:	f0 40       	sbci	r31, 0x00	; 0
    2fda:	a2 2f       	mov	r26, r18
    2fdc:	23 2f       	mov	r18, r19
    2fde:	34 2f       	mov	r19, r20
    2fe0:	44 27       	eor	r20, r20
    2fe2:	58 5f       	subi	r21, 0xF8	; 248
    2fe4:	f3 cf       	rjmp	.-26     	; 0x2fcc <__addsf3x+0x38>
    2fe6:	46 95       	lsr	r20
    2fe8:	37 95       	ror	r19
    2fea:	27 95       	ror	r18
    2fec:	a7 95       	ror	r26
    2fee:	f0 40       	sbci	r31, 0x00	; 0
    2ff0:	53 95       	inc	r21
    2ff2:	c9 f7       	brne	.-14     	; 0x2fe6 <__addsf3x+0x52>
    2ff4:	7e f4       	brtc	.+30     	; 0x3014 <__addsf3x+0x80>
    2ff6:	1f 16       	cp	r1, r31
    2ff8:	ba 0b       	sbc	r27, r26
    2ffa:	62 0b       	sbc	r22, r18
    2ffc:	73 0b       	sbc	r23, r19
    2ffe:	84 0b       	sbc	r24, r20
    3000:	ba f0       	brmi	.+46     	; 0x3030 <__addsf3x+0x9c>
    3002:	91 50       	subi	r25, 0x01	; 1
    3004:	a1 f0       	breq	.+40     	; 0x302e <__addsf3x+0x9a>
    3006:	ff 0f       	add	r31, r31
    3008:	bb 1f       	adc	r27, r27
    300a:	66 1f       	adc	r22, r22
    300c:	77 1f       	adc	r23, r23
    300e:	88 1f       	adc	r24, r24
    3010:	c2 f7       	brpl	.-16     	; 0x3002 <__addsf3x+0x6e>
    3012:	0e c0       	rjmp	.+28     	; 0x3030 <__addsf3x+0x9c>
    3014:	ba 0f       	add	r27, r26
    3016:	62 1f       	adc	r22, r18
    3018:	73 1f       	adc	r23, r19
    301a:	84 1f       	adc	r24, r20
    301c:	48 f4       	brcc	.+18     	; 0x3030 <__addsf3x+0x9c>
    301e:	87 95       	ror	r24
    3020:	77 95       	ror	r23
    3022:	67 95       	ror	r22
    3024:	b7 95       	ror	r27
    3026:	f7 95       	ror	r31
    3028:	9e 3f       	cpi	r25, 0xFE	; 254
    302a:	08 f0       	brcs	.+2      	; 0x302e <__addsf3x+0x9a>
    302c:	b0 cf       	rjmp	.-160    	; 0x2f8e <__addsf3+0x28>
    302e:	93 95       	inc	r25
    3030:	88 0f       	add	r24, r24
    3032:	08 f0       	brcs	.+2      	; 0x3036 <__addsf3x+0xa2>
    3034:	99 27       	eor	r25, r25
    3036:	ee 0f       	add	r30, r30
    3038:	97 95       	ror	r25
    303a:	87 95       	ror	r24
    303c:	08 95       	ret

0000303e <__cmpsf2>:
    303e:	0e 94 09 19 	call	0x3212	; 0x3212 <__fp_cmp>
    3042:	08 f4       	brcc	.+2      	; 0x3046 <__cmpsf2+0x8>
    3044:	81 e0       	ldi	r24, 0x01	; 1
    3046:	08 95       	ret

00003048 <__divsf3>:
    3048:	0e 94 38 18 	call	0x3070	; 0x3070 <__divsf3x>
    304c:	0c 94 44 19 	jmp	0x3288	; 0x3288 <__fp_round>
    3050:	0e 94 3d 19 	call	0x327a	; 0x327a <__fp_pscB>
    3054:	58 f0       	brcs	.+22     	; 0x306c <__divsf3+0x24>
    3056:	0e 94 36 19 	call	0x326c	; 0x326c <__fp_pscA>
    305a:	40 f0       	brcs	.+16     	; 0x306c <__divsf3+0x24>
    305c:	29 f4       	brne	.+10     	; 0x3068 <__divsf3+0x20>
    305e:	5f 3f       	cpi	r21, 0xFF	; 255
__divsf3():
    3060:	29 f0       	breq	.+10     	; 0x306c <__divsf3+0x24>
    3062:	0c 94 2d 19 	jmp	0x325a	; 0x325a <__fp_inf>
    3066:	51 11       	cpse	r21, r1
    3068:	0c 94 78 19 	jmp	0x32f0	; 0x32f0 <__fp_szero>
    306c:	0c 94 33 19 	jmp	0x3266	; 0x3266 <__fp_nan>

00003070 <__divsf3x>:
__divsf3x():
    3070:	0e 94 55 19 	call	0x32aa	; 0x32aa <__fp_split3>
    3074:	68 f3       	brcs	.-38     	; 0x3050 <__divsf3+0x8>

00003076 <__divsf3_pse>:
    3076:	99 23       	and	r25, r25
    3078:	b1 f3       	breq	.-20     	; 0x3066 <__divsf3+0x1e>
    307a:	55 23       	and	r21, r21
    307c:	91 f3       	breq	.-28     	; 0x3062 <__divsf3+0x1a>
    307e:	95 1b       	sub	r25, r21
    3080:	55 0b       	sbc	r21, r21
    3082:	bb 27       	eor	r27, r27
    3084:	aa 27       	eor	r26, r26
    3086:	62 17       	cp	r22, r18
    3088:	73 07       	cpc	r23, r19
    308a:	84 07       	cpc	r24, r20
    308c:	38 f0       	brcs	.+14     	; 0x309c <__divsf3_pse+0x26>
    308e:	9f 5f       	subi	r25, 0xFF	; 255
    3090:	5f 4f       	sbci	r21, 0xFF	; 255
    3092:	22 0f       	add	r18, r18
    3094:	33 1f       	adc	r19, r19
    3096:	44 1f       	adc	r20, r20
    3098:	aa 1f       	adc	r26, r26
    309a:	a9 f3       	breq	.-22     	; 0x3086 <__divsf3_pse+0x10>
    309c:	35 d0       	rcall	.+106    	; 0x3108 <__divsf3_pse+0x92>
    309e:	0e 2e       	mov	r0, r30
    30a0:	3a f0       	brmi	.+14     	; 0x30b0 <__divsf3_pse+0x3a>
    30a2:	e0 e8       	ldi	r30, 0x80	; 128
    30a4:	32 d0       	rcall	.+100    	; 0x310a <__divsf3_pse+0x94>
    30a6:	91 50       	subi	r25, 0x01	; 1
    30a8:	50 40       	sbci	r21, 0x00	; 0
    30aa:	e6 95       	lsr	r30
    30ac:	00 1c       	adc	r0, r0
    30ae:	ca f7       	brpl	.-14     	; 0x30a2 <__divsf3_pse+0x2c>
    30b0:	2b d0       	rcall	.+86     	; 0x3108 <__divsf3_pse+0x92>
    30b2:	fe 2f       	mov	r31, r30
    30b4:	29 d0       	rcall	.+82     	; 0x3108 <__divsf3_pse+0x92>
    30b6:	66 0f       	add	r22, r22
    30b8:	77 1f       	adc	r23, r23
    30ba:	88 1f       	adc	r24, r24
    30bc:	bb 1f       	adc	r27, r27
    30be:	26 17       	cp	r18, r22
    30c0:	37 07       	cpc	r19, r23
    30c2:	48 07       	cpc	r20, r24
    30c4:	ab 07       	cpc	r26, r27
    30c6:	b0 e8       	ldi	r27, 0x80	; 128
    30c8:	09 f0       	breq	.+2      	; 0x30cc <__divsf3_pse+0x56>
    30ca:	bb 0b       	sbc	r27, r27
    30cc:	80 2d       	mov	r24, r0
    30ce:	bf 01       	movw	r22, r30
    30d0:	ff 27       	eor	r31, r31
    30d2:	93 58       	subi	r25, 0x83	; 131
    30d4:	5f 4f       	sbci	r21, 0xFF	; 255
    30d6:	3a f0       	brmi	.+14     	; 0x30e6 <__divsf3_pse+0x70>
    30d8:	9e 3f       	cpi	r25, 0xFE	; 254
    30da:	51 05       	cpc	r21, r1
    30dc:	78 f0       	brcs	.+30     	; 0x30fc <__divsf3_pse+0x86>
    30de:	0c 94 2d 19 	jmp	0x325a	; 0x325a <__fp_inf>
    30e2:	0c 94 78 19 	jmp	0x32f0	; 0x32f0 <__fp_szero>
    30e6:	5f 3f       	cpi	r21, 0xFF	; 255
    30e8:	e4 f3       	brlt	.-8      	; 0x30e2 <__divsf3_pse+0x6c>
    30ea:	98 3e       	cpi	r25, 0xE8	; 232
    30ec:	d4 f3       	brlt	.-12     	; 0x30e2 <__divsf3_pse+0x6c>
    30ee:	86 95       	lsr	r24
    30f0:	77 95       	ror	r23
    30f2:	67 95       	ror	r22
    30f4:	b7 95       	ror	r27
    30f6:	f7 95       	ror	r31
    30f8:	9f 5f       	subi	r25, 0xFF	; 255
    30fa:	c9 f7       	brne	.-14     	; 0x30ee <__divsf3_pse+0x78>
    30fc:	88 0f       	add	r24, r24
    30fe:	91 1d       	adc	r25, r1
    3100:	96 95       	lsr	r25
    3102:	87 95       	ror	r24
    3104:	97 f9       	bld	r25, 7
    3106:	08 95       	ret
    3108:	e1 e0       	ldi	r30, 0x01	; 1
    310a:	66 0f       	add	r22, r22
    310c:	77 1f       	adc	r23, r23
    310e:	88 1f       	adc	r24, r24
    3110:	bb 1f       	adc	r27, r27
    3112:	62 17       	cp	r22, r18
    3114:	73 07       	cpc	r23, r19
    3116:	84 07       	cpc	r24, r20
    3118:	ba 07       	cpc	r27, r26
    311a:	20 f0       	brcs	.+8      	; 0x3124 <__divsf3_pse+0xae>
    311c:	62 1b       	sub	r22, r18
    311e:	73 0b       	sbc	r23, r19
    3120:	84 0b       	sbc	r24, r20
    3122:	ba 0b       	sbc	r27, r26
    3124:	ee 1f       	adc	r30, r30
    3126:	88 f7       	brcc	.-30     	; 0x310a <__divsf3_pse+0x94>
    3128:	e0 95       	com	r30
    312a:	08 95       	ret

0000312c <__fixsfsi>:
    312c:	0e 94 9d 18 	call	0x313a	; 0x313a <__fixunssfsi>
    3130:	68 94       	set
    3132:	b1 11       	cpse	r27, r1
    3134:	0c 94 78 19 	jmp	0x32f0	; 0x32f0 <__fp_szero>
    3138:	08 95       	ret

0000313a <__fixunssfsi>:
    313a:	0e 94 5d 19 	call	0x32ba	; 0x32ba <__fp_splitA>
    313e:	88 f0       	brcs	.+34     	; 0x3162 <__fixunssfsi+0x28>
    3140:	9f 57       	subi	r25, 0x7F	; 127
    3142:	98 f0       	brcs	.+38     	; 0x316a <__fixunssfsi+0x30>
    3144:	b9 2f       	mov	r27, r25
    3146:	99 27       	eor	r25, r25
    3148:	b7 51       	subi	r27, 0x17	; 23
    314a:	b0 f0       	brcs	.+44     	; 0x3178 <__fixunssfsi+0x3e>
__fixunssfsi():
    314c:	e1 f0       	breq	.+56     	; 0x3186 <__fixunssfsi+0x4c>
    314e:	66 0f       	add	r22, r22
    3150:	77 1f       	adc	r23, r23
    3152:	88 1f       	adc	r24, r24
    3154:	99 1f       	adc	r25, r25
    3156:	1a f0       	brmi	.+6      	; 0x315e <__fixunssfsi+0x24>
    3158:	ba 95       	dec	r27
    315a:	c9 f7       	brne	.-14     	; 0x314e <__fixunssfsi+0x14>
    315c:	14 c0       	rjmp	.+40     	; 0x3186 <__fixunssfsi+0x4c>
    315e:	b1 30       	cpi	r27, 0x01	; 1
    3160:	91 f0       	breq	.+36     	; 0x3186 <__fixunssfsi+0x4c>
    3162:	0e 94 77 19 	call	0x32ee	; 0x32ee <__fp_zero>
    3166:	b1 e0       	ldi	r27, 0x01	; 1
    3168:	08 95       	ret
    316a:	0c 94 77 19 	jmp	0x32ee	; 0x32ee <__fp_zero>
    316e:	67 2f       	mov	r22, r23
    3170:	78 2f       	mov	r23, r24
    3172:	88 27       	eor	r24, r24
    3174:	b8 5f       	subi	r27, 0xF8	; 248
    3176:	39 f0       	breq	.+14     	; 0x3186 <__fixunssfsi+0x4c>
    3178:	b9 3f       	cpi	r27, 0xF9	; 249
    317a:	cc f3       	brlt	.-14     	; 0x316e <__fixunssfsi+0x34>
    317c:	86 95       	lsr	r24
    317e:	77 95       	ror	r23
    3180:	67 95       	ror	r22
    3182:	b3 95       	inc	r27
    3184:	d9 f7       	brne	.-10     	; 0x317c <__fixunssfsi+0x42>
    3186:	3e f4       	brtc	.+14     	; 0x3196 <__fixunssfsi+0x5c>
    3188:	90 95       	com	r25
    318a:	80 95       	com	r24
    318c:	70 95       	com	r23
    318e:	61 95       	neg	r22
    3190:	7f 4f       	sbci	r23, 0xFF	; 255
    3192:	8f 4f       	sbci	r24, 0xFF	; 255
    3194:	9f 4f       	sbci	r25, 0xFF	; 255
    3196:	08 95       	ret

00003198 <__floatunsisf>:
__floatunsisf():
    3198:	e8 94       	clt
    319a:	09 c0       	rjmp	.+18     	; 0x31ae <__floatsisf+0x12>

0000319c <__floatsisf>:
    319c:	97 fb       	bst	r25, 7
    319e:	3e f4       	brtc	.+14     	; 0x31ae <__floatsisf+0x12>
    31a0:	90 95       	com	r25
    31a2:	80 95       	com	r24
    31a4:	70 95       	com	r23
    31a6:	61 95       	neg	r22
    31a8:	7f 4f       	sbci	r23, 0xFF	; 255
    31aa:	8f 4f       	sbci	r24, 0xFF	; 255
    31ac:	9f 4f       	sbci	r25, 0xFF	; 255
    31ae:	99 23       	and	r25, r25
    31b0:	a9 f0       	breq	.+42     	; 0x31dc <__floatsisf+0x40>
    31b2:	f9 2f       	mov	r31, r25
    31b4:	96 e9       	ldi	r25, 0x96	; 150
    31b6:	bb 27       	eor	r27, r27
    31b8:	93 95       	inc	r25
    31ba:	f6 95       	lsr	r31
    31bc:	87 95       	ror	r24
    31be:	77 95       	ror	r23
    31c0:	67 95       	ror	r22
    31c2:	b7 95       	ror	r27
    31c4:	f1 11       	cpse	r31, r1
    31c6:	f8 cf       	rjmp	.-16     	; 0x31b8 <__floatsisf+0x1c>
    31c8:	fa f4       	brpl	.+62     	; 0x3208 <__floatsisf+0x6c>
    31ca:	bb 0f       	add	r27, r27
    31cc:	11 f4       	brne	.+4      	; 0x31d2 <__floatsisf+0x36>
    31ce:	60 ff       	sbrs	r22, 0
    31d0:	1b c0       	rjmp	.+54     	; 0x3208 <__floatsisf+0x6c>
    31d2:	6f 5f       	subi	r22, 0xFF	; 255
    31d4:	7f 4f       	sbci	r23, 0xFF	; 255
    31d6:	8f 4f       	sbci	r24, 0xFF	; 255
    31d8:	9f 4f       	sbci	r25, 0xFF	; 255
    31da:	16 c0       	rjmp	.+44     	; 0x3208 <__floatsisf+0x6c>
    31dc:	88 23       	and	r24, r24
    31de:	11 f0       	breq	.+4      	; 0x31e4 <__floatsisf+0x48>
    31e0:	96 e9       	ldi	r25, 0x96	; 150
    31e2:	11 c0       	rjmp	.+34     	; 0x3206 <__floatsisf+0x6a>
    31e4:	77 23       	and	r23, r23
    31e6:	21 f0       	breq	.+8      	; 0x31f0 <__floatsisf+0x54>
    31e8:	9e e8       	ldi	r25, 0x8E	; 142
    31ea:	87 2f       	mov	r24, r23
    31ec:	76 2f       	mov	r23, r22
    31ee:	05 c0       	rjmp	.+10     	; 0x31fa <__floatsisf+0x5e>
    31f0:	66 23       	and	r22, r22
    31f2:	71 f0       	breq	.+28     	; 0x3210 <__floatsisf+0x74>
    31f4:	96 e8       	ldi	r25, 0x86	; 134
    31f6:	86 2f       	mov	r24, r22
    31f8:	70 e0       	ldi	r23, 0x00	; 0
    31fa:	60 e0       	ldi	r22, 0x00	; 0
    31fc:	2a f0       	brmi	.+10     	; 0x3208 <__floatsisf+0x6c>
    31fe:	9a 95       	dec	r25
    3200:	66 0f       	add	r22, r22
    3202:	77 1f       	adc	r23, r23
    3204:	88 1f       	adc	r24, r24
    3206:	da f7       	brpl	.-10     	; 0x31fe <__floatsisf+0x62>
    3208:	88 0f       	add	r24, r24
    320a:	96 95       	lsr	r25
    320c:	87 95       	ror	r24
    320e:	97 f9       	bld	r25, 7
    3210:	08 95       	ret

00003212 <__fp_cmp>:
__fp_cmp():
    3212:	99 0f       	add	r25, r25
    3214:	00 08       	sbc	r0, r0
    3216:	55 0f       	add	r21, r21
    3218:	aa 0b       	sbc	r26, r26
    321a:	e0 e8       	ldi	r30, 0x80	; 128
    321c:	fe ef       	ldi	r31, 0xFE	; 254
    321e:	16 16       	cp	r1, r22
    3220:	17 06       	cpc	r1, r23
    3222:	e8 07       	cpc	r30, r24
    3224:	f9 07       	cpc	r31, r25
    3226:	c0 f0       	brcs	.+48     	; 0x3258 <__fp_cmp+0x46>
    3228:	12 16       	cp	r1, r18
    322a:	13 06       	cpc	r1, r19
    322c:	e4 07       	cpc	r30, r20
    322e:	f5 07       	cpc	r31, r21
    3230:	98 f0       	brcs	.+38     	; 0x3258 <__fp_cmp+0x46>
    3232:	62 1b       	sub	r22, r18
    3234:	73 0b       	sbc	r23, r19
    3236:	84 0b       	sbc	r24, r20
    3238:	95 0b       	sbc	r25, r21
    323a:	39 f4       	brne	.+14     	; 0x324a <__fp_cmp+0x38>
    323c:	0a 26       	eor	r0, r26
    323e:	61 f0       	breq	.+24     	; 0x3258 <__fp_cmp+0x46>
    3240:	23 2b       	or	r18, r19
    3242:	24 2b       	or	r18, r20
    3244:	25 2b       	or	r18, r21
    3246:	21 f4       	brne	.+8      	; 0x3250 <__fp_cmp+0x3e>
    3248:	08 95       	ret
    324a:	0a 26       	eor	r0, r26
    324c:	09 f4       	brne	.+2      	; 0x3250 <__fp_cmp+0x3e>
    324e:	a1 40       	sbci	r26, 0x01	; 1
    3250:	a6 95       	lsr	r26
    3252:	8f ef       	ldi	r24, 0xFF	; 255
    3254:	81 1d       	adc	r24, r1
    3256:	81 1d       	adc	r24, r1
    3258:	08 95       	ret

0000325a <__fp_inf>:
__fp_inf():
    325a:	97 f9       	bld	r25, 7
    325c:	9f 67       	ori	r25, 0x7F	; 127
    325e:	80 e8       	ldi	r24, 0x80	; 128
    3260:	70 e0       	ldi	r23, 0x00	; 0
    3262:	60 e0       	ldi	r22, 0x00	; 0
    3264:	08 95       	ret

00003266 <__fp_nan>:
__fp_nan():
    3266:	9f ef       	ldi	r25, 0xFF	; 255
    3268:	80 ec       	ldi	r24, 0xC0	; 192
    326a:	08 95       	ret

0000326c <__fp_pscA>:
__fp_pscA():
    326c:	00 24       	eor	r0, r0
    326e:	0a 94       	dec	r0
    3270:	16 16       	cp	r1, r22
    3272:	17 06       	cpc	r1, r23
    3274:	18 06       	cpc	r1, r24
    3276:	09 06       	cpc	r0, r25
    3278:	08 95       	ret

0000327a <__fp_pscB>:
__fp_pscB():
    327a:	00 24       	eor	r0, r0
    327c:	0a 94       	dec	r0
    327e:	12 16       	cp	r1, r18
    3280:	13 06       	cpc	r1, r19
    3282:	14 06       	cpc	r1, r20
    3284:	05 06       	cpc	r0, r21
    3286:	08 95       	ret

00003288 <__fp_round>:
__fp_round():
    3288:	09 2e       	mov	r0, r25
    328a:	03 94       	inc	r0
    328c:	00 0c       	add	r0, r0
    328e:	11 f4       	brne	.+4      	; 0x3294 <__fp_round+0xc>
    3290:	88 23       	and	r24, r24
    3292:	52 f0       	brmi	.+20     	; 0x32a8 <__fp_round+0x20>
    3294:	bb 0f       	add	r27, r27
    3296:	40 f4       	brcc	.+16     	; 0x32a8 <__fp_round+0x20>
    3298:	bf 2b       	or	r27, r31
    329a:	11 f4       	brne	.+4      	; 0x32a0 <__fp_round+0x18>
    329c:	60 ff       	sbrs	r22, 0
    329e:	04 c0       	rjmp	.+8      	; 0x32a8 <__fp_round+0x20>
    32a0:	6f 5f       	subi	r22, 0xFF	; 255
    32a2:	7f 4f       	sbci	r23, 0xFF	; 255
    32a4:	8f 4f       	sbci	r24, 0xFF	; 255
    32a6:	9f 4f       	sbci	r25, 0xFF	; 255
    32a8:	08 95       	ret

000032aa <__fp_split3>:
__fp_split3():
    32aa:	57 fd       	sbrc	r21, 7
    32ac:	90 58       	subi	r25, 0x80	; 128
    32ae:	44 0f       	add	r20, r20
    32b0:	55 1f       	adc	r21, r21
    32b2:	59 f0       	breq	.+22     	; 0x32ca <__fp_splitA+0x10>
    32b4:	5f 3f       	cpi	r21, 0xFF	; 255
    32b6:	71 f0       	breq	.+28     	; 0x32d4 <__fp_splitA+0x1a>
    32b8:	47 95       	ror	r20

000032ba <__fp_splitA>:
    32ba:	88 0f       	add	r24, r24
    32bc:	97 fb       	bst	r25, 7
    32be:	99 1f       	adc	r25, r25
    32c0:	61 f0       	breq	.+24     	; 0x32da <__fp_splitA+0x20>
    32c2:	9f 3f       	cpi	r25, 0xFF	; 255
    32c4:	79 f0       	breq	.+30     	; 0x32e4 <__fp_splitA+0x2a>
    32c6:	87 95       	ror	r24
    32c8:	08 95       	ret
    32ca:	12 16       	cp	r1, r18
    32cc:	13 06       	cpc	r1, r19
    32ce:	14 06       	cpc	r1, r20
    32d0:	55 1f       	adc	r21, r21
    32d2:	f2 cf       	rjmp	.-28     	; 0x32b8 <__fp_split3+0xe>
    32d4:	46 95       	lsr	r20
    32d6:	f1 df       	rcall	.-30     	; 0x32ba <__fp_splitA>
    32d8:	08 c0       	rjmp	.+16     	; 0x32ea <__fp_splitA+0x30>
    32da:	16 16       	cp	r1, r22
    32dc:	17 06       	cpc	r1, r23
    32de:	18 06       	cpc	r1, r24
    32e0:	99 1f       	adc	r25, r25
    32e2:	f1 cf       	rjmp	.-30     	; 0x32c6 <__fp_splitA+0xc>
    32e4:	86 95       	lsr	r24
    32e6:	71 05       	cpc	r23, r1
    32e8:	61 05       	cpc	r22, r1
    32ea:	08 94       	sec
    32ec:	08 95       	ret

000032ee <__fp_zero>:
__fp_zero():
    32ee:	e8 94       	clt

000032f0 <__fp_szero>:
    32f0:	bb 27       	eor	r27, r27
    32f2:	66 27       	eor	r22, r22
    32f4:	77 27       	eor	r23, r23
    32f6:	cb 01       	movw	r24, r22
    32f8:	97 f9       	bld	r25, 7
    32fa:	08 95       	ret

000032fc <__gesf2>:
__gesf2():
    32fc:	0e 94 09 19 	call	0x3212	; 0x3212 <__fp_cmp>
    3300:	08 f4       	brcc	.+2      	; 0x3304 <__gesf2+0x8>
    3302:	8f ef       	ldi	r24, 0xFF	; 255
    3304:	08 95       	ret

00003306 <__mulsf3>:
__mulsf3():
    3306:	0e 94 96 19 	call	0x332c	; 0x332c <__mulsf3x>
    330a:	0c 94 44 19 	jmp	0x3288	; 0x3288 <__fp_round>
    330e:	0e 94 36 19 	call	0x326c	; 0x326c <__fp_pscA>
    3312:	38 f0       	brcs	.+14     	; 0x3322 <__mulsf3+0x1c>
    3314:	0e 94 3d 19 	call	0x327a	; 0x327a <__fp_pscB>
    3318:	20 f0       	brcs	.+8      	; 0x3322 <__mulsf3+0x1c>
    331a:	95 23       	and	r25, r21
    331c:	11 f0       	breq	.+4      	; 0x3322 <__mulsf3+0x1c>
    331e:	0c 94 2d 19 	jmp	0x325a	; 0x325a <__fp_inf>
    3322:	0c 94 33 19 	jmp	0x3266	; 0x3266 <__fp_nan>
    3326:	11 24       	eor	r1, r1
    3328:	0c 94 78 19 	jmp	0x32f0	; 0x32f0 <__fp_szero>

0000332c <__mulsf3x>:
__mulsf3x():
    332c:	0e 94 55 19 	call	0x32aa	; 0x32aa <__fp_split3>
    3330:	70 f3       	brcs	.-36     	; 0x330e <__mulsf3+0x8>

00003332 <__mulsf3_pse>:
    3332:	95 9f       	mul	r25, r21
    3334:	c1 f3       	breq	.-16     	; 0x3326 <__mulsf3+0x20>
    3336:	95 0f       	add	r25, r21
    3338:	50 e0       	ldi	r21, 0x00	; 0
    333a:	55 1f       	adc	r21, r21
    333c:	62 9f       	mul	r22, r18
    333e:	f0 01       	movw	r30, r0
    3340:	72 9f       	mul	r23, r18
    3342:	bb 27       	eor	r27, r27
    3344:	f0 0d       	add	r31, r0
    3346:	b1 1d       	adc	r27, r1
    3348:	63 9f       	mul	r22, r19
    334a:	aa 27       	eor	r26, r26
    334c:	f0 0d       	add	r31, r0
    334e:	b1 1d       	adc	r27, r1
    3350:	aa 1f       	adc	r26, r26
    3352:	64 9f       	mul	r22, r20
    3354:	66 27       	eor	r22, r22
    3356:	b0 0d       	add	r27, r0
    3358:	a1 1d       	adc	r26, r1
    335a:	66 1f       	adc	r22, r22
    335c:	82 9f       	mul	r24, r18
    335e:	22 27       	eor	r18, r18
    3360:	b0 0d       	add	r27, r0
    3362:	a1 1d       	adc	r26, r1
    3364:	62 1f       	adc	r22, r18
    3366:	73 9f       	mul	r23, r19
    3368:	b0 0d       	add	r27, r0
    336a:	a1 1d       	adc	r26, r1
    336c:	62 1f       	adc	r22, r18
    336e:	83 9f       	mul	r24, r19
    3370:	a0 0d       	add	r26, r0
    3372:	61 1d       	adc	r22, r1
    3374:	22 1f       	adc	r18, r18
    3376:	74 9f       	mul	r23, r20
    3378:	33 27       	eor	r19, r19
    337a:	a0 0d       	add	r26, r0
    337c:	61 1d       	adc	r22, r1
    337e:	23 1f       	adc	r18, r19
    3380:	84 9f       	mul	r24, r20
    3382:	60 0d       	add	r22, r0
    3384:	21 1d       	adc	r18, r1
    3386:	82 2f       	mov	r24, r18
    3388:	76 2f       	mov	r23, r22
    338a:	6a 2f       	mov	r22, r26
    338c:	11 24       	eor	r1, r1
    338e:	9f 57       	subi	r25, 0x7F	; 127
    3390:	50 40       	sbci	r21, 0x00	; 0
    3392:	9a f0       	brmi	.+38     	; 0x33ba <__mulsf3_pse+0x88>
    3394:	f1 f0       	breq	.+60     	; 0x33d2 <__mulsf3_pse+0xa0>
    3396:	88 23       	and	r24, r24
    3398:	4a f0       	brmi	.+18     	; 0x33ac <__mulsf3_pse+0x7a>
    339a:	ee 0f       	add	r30, r30
    339c:	ff 1f       	adc	r31, r31
    339e:	bb 1f       	adc	r27, r27
    33a0:	66 1f       	adc	r22, r22
    33a2:	77 1f       	adc	r23, r23
    33a4:	88 1f       	adc	r24, r24
    33a6:	91 50       	subi	r25, 0x01	; 1
    33a8:	50 40       	sbci	r21, 0x00	; 0
    33aa:	a9 f7       	brne	.-22     	; 0x3396 <__mulsf3_pse+0x64>
    33ac:	9e 3f       	cpi	r25, 0xFE	; 254
    33ae:	51 05       	cpc	r21, r1
    33b0:	80 f0       	brcs	.+32     	; 0x33d2 <__mulsf3_pse+0xa0>
    33b2:	0c 94 2d 19 	jmp	0x325a	; 0x325a <__fp_inf>
    33b6:	0c 94 78 19 	jmp	0x32f0	; 0x32f0 <__fp_szero>
    33ba:	5f 3f       	cpi	r21, 0xFF	; 255
    33bc:	e4 f3       	brlt	.-8      	; 0x33b6 <__mulsf3_pse+0x84>
    33be:	98 3e       	cpi	r25, 0xE8	; 232
    33c0:	d4 f3       	brlt	.-12     	; 0x33b6 <__mulsf3_pse+0x84>
    33c2:	86 95       	lsr	r24
    33c4:	77 95       	ror	r23
    33c6:	67 95       	ror	r22
    33c8:	b7 95       	ror	r27
    33ca:	f7 95       	ror	r31
    33cc:	e7 95       	ror	r30
    33ce:	9f 5f       	subi	r25, 0xFF	; 255
    33d0:	c1 f7       	brne	.-16     	; 0x33c2 <__mulsf3_pse+0x90>
    33d2:	fe 2b       	or	r31, r30
    33d4:	88 0f       	add	r24, r24
    33d6:	91 1d       	adc	r25, r1
    33d8:	96 95       	lsr	r25
    33da:	87 95       	ror	r24
    33dc:	97 f9       	bld	r25, 7
    33de:	08 95       	ret

000033e0 <__unordsf2>:
    33e0:	0e 94 09 19 	call	0x3212	; 0x3212 <__fp_cmp>
    33e4:	88 0b       	sbc	r24, r24
    33e6:	99 0b       	sbc	r25, r25
    33e8:	08 95       	ret

000033ea <__mulsi3>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:648
    33ea:	db 01       	movw	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:649
    33ec:	8f 93       	push	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:650
    33ee:	9f 93       	push	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:651
    33f0:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <__muluhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:652
    33f4:	bf 91       	pop	r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:653
    33f6:	af 91       	pop	r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:655
    33f8:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:656
    33fa:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:657
    33fc:	91 1d       	adc	r25, r1
__mulsi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:658
    33fe:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:659
    3400:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:660
    3402:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:661
    3404:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:662
    3406:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:663
    3408:	08 95       	ret

0000340a <__divmodhi4>:
__divmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
    340a:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
    340c:	07 2e       	mov	r0, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
    340e:	16 f4       	brtc	.+4      	; 0x3414 <__divmodhi4+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
    3410:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
    3412:	07 d0       	rcall	.+14     	; 0x3422 <__divmodhi4_neg1>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
    3414:	77 fd       	sbrc	r23, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
    3416:	09 d0       	rcall	.+18     	; 0x342a <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
    3418:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <__udivmodhi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
    341c:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
    341e:	05 d0       	rcall	.+10     	; 0x342a <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
    3420:	3e f4       	brtc	.+14     	; 0x3430 <__divmodhi4_exit>

00003422 <__divmodhi4_neg1>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
    3422:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
    3424:	81 95       	neg	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
    3426:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
    3428:	08 95       	ret

0000342a <__divmodhi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
    342a:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
    342c:	61 95       	neg	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
    342e:	7f 4f       	sbci	r23, 0xFF	; 255

00003430 <__divmodhi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
    3430:	08 95       	ret

00003432 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    3432:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    3434:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    3436:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    3438:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    343a:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    343c:	0d c0       	rjmp	.+26     	; 0x3458 <__udivmodsi4_ep>

0000343e <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    343e:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    3440:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    3442:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    3444:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    3446:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    3448:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    344a:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    344c:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    344e:	20 f0       	brcs	.+8      	; 0x3458 <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    3450:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    3452:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    3454:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    3456:	f5 0b       	sbc	r31, r21

00003458 <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    3458:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    345a:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    345c:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    345e:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    3460:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    3462:	69 f7       	brne	.-38     	; 0x343e <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    3464:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    3466:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    3468:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    346a:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    346c:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    346e:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    3470:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    3472:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    3474:	08 95       	ret

00003476 <__divmodsi4>:
__divmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    3476:	05 2e       	mov	r0, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    3478:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    347a:	1e f4       	brtc	.+6      	; 0x3482 <__divmodsi4+0xc>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    347c:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    347e:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <__negsi2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    3482:	57 fd       	sbrc	r21, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
    3484:	07 d0       	rcall	.+14     	; 0x3494 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    3486:	0e 94 19 1a 	call	0x3432	; 0x3432 <__udivmodsi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    348a:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
    348c:	03 d0       	rcall	.+6      	; 0x3494 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    348e:	4e f4       	brtc	.+18     	; 0x34a2 <__divmodsi4_exit>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    3490:	0c 94 52 1a 	jmp	0x34a4	; 0x34a4 <__negsi2>

00003494 <__divmodsi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    3494:	50 95       	com	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    3496:	40 95       	com	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    3498:	30 95       	com	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    349a:	21 95       	neg	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    349c:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    349e:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    34a0:	5f 4f       	sbci	r21, 0xFF	; 255

000034a2 <__divmodsi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    34a2:	08 95       	ret

000034a4 <__negsi2>:
__negsi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    34a4:	90 95       	com	r25
    34a6:	80 95       	com	r24
    34a8:	70 95       	com	r23
    34aa:	61 95       	neg	r22
    34ac:	7f 4f       	sbci	r23, 0xFF	; 255
    34ae:	8f 4f       	sbci	r24, 0xFF	; 255
    34b0:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    34b2:	08 95       	ret

000034b4 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    34b4:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    34b6:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    34b8:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    34ba:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    34bc:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    34be:	09 94       	ijmp

000034c0 <__muluhisi3>:
__muluhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    34c0:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__umulhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    34c4:	a5 9f       	mul	r26, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    34c6:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    34c8:	b4 9f       	mul	r27, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    34ca:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    34cc:	a4 9f       	mul	r26, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    34ce:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    34d0:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    34d2:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    34d4:	08 95       	ret

000034d6 <__udivmodhi4>:
__udivmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    34d6:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    34d8:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    34da:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    34dc:	07 c0       	rjmp	.+14     	; 0x34ec <__udivmodhi4_ep>

000034de <__udivmodhi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    34de:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    34e0:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    34e2:	a6 17       	cp	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    34e4:	b7 07       	cpc	r27, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    34e6:	10 f0       	brcs	.+4      	; 0x34ec <__udivmodhi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    34e8:	a6 1b       	sub	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    34ea:	b7 0b       	sbc	r27, r23

000034ec <__udivmodhi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    34ec:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    34ee:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    34f0:	5a 95       	dec	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    34f2:	a9 f7       	brne	.-22     	; 0x34de <__udivmodhi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    34f4:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    34f6:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    34f8:	bc 01       	movw	r22, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    34fa:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    34fc:	08 95       	ret

000034fe <__umulhisi3>:
__umulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    34fe:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    3500:	b0 01       	movw	r22, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    3502:	b3 9f       	mul	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    3504:	c0 01       	movw	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    3506:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    3508:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    350a:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    350c:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    350e:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    3510:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    3512:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    3514:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    3516:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    3518:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    351a:	08 95       	ret

0000351c <malloc>:
malloc():
    351c:	0f 93       	push	r16
    351e:	1f 93       	push	r17
    3520:	cf 93       	push	r28
    3522:	df 93       	push	r29
    3524:	82 30       	cpi	r24, 0x02	; 2
    3526:	91 05       	cpc	r25, r1
    3528:	10 f4       	brcc	.+4      	; 0x352e <malloc+0x12>
    352a:	82 e0       	ldi	r24, 0x02	; 2
    352c:	90 e0       	ldi	r25, 0x00	; 0
    352e:	e0 91 e6 03 	lds	r30, 0x03E6	; 0x8003e6 <__flp>
    3532:	f0 91 e7 03 	lds	r31, 0x03E7	; 0x8003e7 <__flp+0x1>
    3536:	30 e0       	ldi	r19, 0x00	; 0
    3538:	20 e0       	ldi	r18, 0x00	; 0
    353a:	b0 e0       	ldi	r27, 0x00	; 0
    353c:	a0 e0       	ldi	r26, 0x00	; 0
    353e:	30 97       	sbiw	r30, 0x00	; 0
    3540:	99 f4       	brne	.+38     	; 0x3568 <malloc+0x4c>
    3542:	21 15       	cp	r18, r1
    3544:	31 05       	cpc	r19, r1
    3546:	09 f4       	brne	.+2      	; 0x354a <malloc+0x2e>
    3548:	4a c0       	rjmp	.+148    	; 0x35de <malloc+0xc2>
    354a:	28 1b       	sub	r18, r24
    354c:	39 0b       	sbc	r19, r25
    354e:	24 30       	cpi	r18, 0x04	; 4
    3550:	31 05       	cpc	r19, r1
    3552:	d8 f5       	brcc	.+118    	; 0x35ca <malloc+0xae>
    3554:	8a 81       	ldd	r24, Y+2	; 0x02
    3556:	9b 81       	ldd	r25, Y+3	; 0x03
    3558:	61 15       	cp	r22, r1
    355a:	71 05       	cpc	r23, r1
    355c:	89 f1       	breq	.+98     	; 0x35c0 <malloc+0xa4>
    355e:	fb 01       	movw	r30, r22
    3560:	93 83       	std	Z+3, r25	; 0x03
    3562:	82 83       	std	Z+2, r24	; 0x02
    3564:	fe 01       	movw	r30, r28
    3566:	11 c0       	rjmp	.+34     	; 0x358a <malloc+0x6e>
    3568:	40 81       	ld	r20, Z
    356a:	51 81       	ldd	r21, Z+1	; 0x01
    356c:	02 81       	ldd	r16, Z+2	; 0x02
    356e:	13 81       	ldd	r17, Z+3	; 0x03
    3570:	48 17       	cp	r20, r24
    3572:	59 07       	cpc	r21, r25
    3574:	e0 f0       	brcs	.+56     	; 0x35ae <malloc+0x92>
    3576:	48 17       	cp	r20, r24
    3578:	59 07       	cpc	r21, r25
    357a:	99 f4       	brne	.+38     	; 0x35a2 <malloc+0x86>
    357c:	10 97       	sbiw	r26, 0x00	; 0
    357e:	61 f0       	breq	.+24     	; 0x3598 <malloc+0x7c>
    3580:	12 96       	adiw	r26, 0x02	; 2
    3582:	0c 93       	st	X, r16
    3584:	12 97       	sbiw	r26, 0x02	; 2
    3586:	13 96       	adiw	r26, 0x03	; 3
    3588:	1c 93       	st	X, r17
    358a:	32 96       	adiw	r30, 0x02	; 2
    358c:	cf 01       	movw	r24, r30
    358e:	df 91       	pop	r29
    3590:	cf 91       	pop	r28
    3592:	1f 91       	pop	r17
    3594:	0f 91       	pop	r16
    3596:	08 95       	ret
    3598:	00 93 e6 03 	sts	0x03E6, r16	; 0x8003e6 <__flp>
    359c:	10 93 e7 03 	sts	0x03E7, r17	; 0x8003e7 <__flp+0x1>
    35a0:	f4 cf       	rjmp	.-24     	; 0x358a <malloc+0x6e>
    35a2:	21 15       	cp	r18, r1
    35a4:	31 05       	cpc	r19, r1
    35a6:	51 f0       	breq	.+20     	; 0x35bc <malloc+0xa0>
    35a8:	42 17       	cp	r20, r18
    35aa:	53 07       	cpc	r21, r19
    35ac:	38 f0       	brcs	.+14     	; 0x35bc <malloc+0xa0>
    35ae:	a9 01       	movw	r20, r18
    35b0:	db 01       	movw	r26, r22
    35b2:	9a 01       	movw	r18, r20
    35b4:	bd 01       	movw	r22, r26
    35b6:	df 01       	movw	r26, r30
    35b8:	f8 01       	movw	r30, r16
    35ba:	c1 cf       	rjmp	.-126    	; 0x353e <malloc+0x22>
    35bc:	ef 01       	movw	r28, r30
    35be:	f9 cf       	rjmp	.-14     	; 0x35b2 <malloc+0x96>
    35c0:	90 93 e7 03 	sts	0x03E7, r25	; 0x8003e7 <__flp+0x1>
    35c4:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <__flp>
    35c8:	cd cf       	rjmp	.-102    	; 0x3564 <malloc+0x48>
    35ca:	fe 01       	movw	r30, r28
    35cc:	e2 0f       	add	r30, r18
    35ce:	f3 1f       	adc	r31, r19
    35d0:	81 93       	st	Z+, r24
    35d2:	91 93       	st	Z+, r25
    35d4:	22 50       	subi	r18, 0x02	; 2
    35d6:	31 09       	sbc	r19, r1
    35d8:	39 83       	std	Y+1, r19	; 0x01
    35da:	28 83       	st	Y, r18
    35dc:	d7 cf       	rjmp	.-82     	; 0x358c <malloc+0x70>
    35de:	20 91 e4 03 	lds	r18, 0x03E4	; 0x8003e4 <__brkval>
    35e2:	30 91 e5 03 	lds	r19, 0x03E5	; 0x8003e5 <__brkval+0x1>
    35e6:	23 2b       	or	r18, r19
    35e8:	41 f4       	brne	.+16     	; 0x35fa <malloc+0xde>
    35ea:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    35ee:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    35f2:	30 93 e5 03 	sts	0x03E5, r19	; 0x8003e5 <__brkval+0x1>
    35f6:	20 93 e4 03 	sts	0x03E4, r18	; 0x8003e4 <__brkval>
    35fa:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    35fe:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    3602:	21 15       	cp	r18, r1
    3604:	31 05       	cpc	r19, r1
    3606:	41 f4       	brne	.+16     	; 0x3618 <malloc+0xfc>
    3608:	2d b7       	in	r18, 0x3d	; 61
    360a:	3e b7       	in	r19, 0x3e	; 62
    360c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3610:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3614:	24 1b       	sub	r18, r20
    3616:	35 0b       	sbc	r19, r21
    3618:	e0 91 e4 03 	lds	r30, 0x03E4	; 0x8003e4 <__brkval>
    361c:	f0 91 e5 03 	lds	r31, 0x03E5	; 0x8003e5 <__brkval+0x1>
    3620:	e2 17       	cp	r30, r18
    3622:	f3 07       	cpc	r31, r19
    3624:	a0 f4       	brcc	.+40     	; 0x364e <malloc+0x132>
    3626:	2e 1b       	sub	r18, r30
    3628:	3f 0b       	sbc	r19, r31
    362a:	28 17       	cp	r18, r24
    362c:	39 07       	cpc	r19, r25
    362e:	78 f0       	brcs	.+30     	; 0x364e <malloc+0x132>
    3630:	ac 01       	movw	r20, r24
    3632:	4e 5f       	subi	r20, 0xFE	; 254
    3634:	5f 4f       	sbci	r21, 0xFF	; 255
    3636:	24 17       	cp	r18, r20
    3638:	35 07       	cpc	r19, r21
    363a:	48 f0       	brcs	.+18     	; 0x364e <malloc+0x132>
    363c:	4e 0f       	add	r20, r30
    363e:	5f 1f       	adc	r21, r31
    3640:	50 93 e5 03 	sts	0x03E5, r21	; 0x8003e5 <__brkval+0x1>
    3644:	40 93 e4 03 	sts	0x03E4, r20	; 0x8003e4 <__brkval>
    3648:	81 93       	st	Z+, r24
    364a:	91 93       	st	Z+, r25
    364c:	9f cf       	rjmp	.-194    	; 0x358c <malloc+0x70>
    364e:	f0 e0       	ldi	r31, 0x00	; 0
    3650:	e0 e0       	ldi	r30, 0x00	; 0
    3652:	9c cf       	rjmp	.-200    	; 0x358c <malloc+0x70>

00003654 <free>:
free():
    3654:	cf 93       	push	r28
    3656:	df 93       	push	r29
    3658:	00 97       	sbiw	r24, 0x00	; 0
    365a:	e9 f0       	breq	.+58     	; 0x3696 <free+0x42>
    365c:	fc 01       	movw	r30, r24
    365e:	32 97       	sbiw	r30, 0x02	; 2
    3660:	13 82       	std	Z+3, r1	; 0x03
    3662:	12 82       	std	Z+2, r1	; 0x02
    3664:	a0 91 e6 03 	lds	r26, 0x03E6	; 0x8003e6 <__flp>
    3668:	b0 91 e7 03 	lds	r27, 0x03E7	; 0x8003e7 <__flp+0x1>
    366c:	ed 01       	movw	r28, r26
    366e:	30 e0       	ldi	r19, 0x00	; 0
    3670:	20 e0       	ldi	r18, 0x00	; 0
    3672:	10 97       	sbiw	r26, 0x00	; 0
    3674:	a1 f4       	brne	.+40     	; 0x369e <free+0x4a>
    3676:	20 81       	ld	r18, Z
    3678:	31 81       	ldd	r19, Z+1	; 0x01
    367a:	82 0f       	add	r24, r18
    367c:	93 1f       	adc	r25, r19
    367e:	20 91 e4 03 	lds	r18, 0x03E4	; 0x8003e4 <__brkval>
    3682:	30 91 e5 03 	lds	r19, 0x03E5	; 0x8003e5 <__brkval+0x1>
    3686:	28 17       	cp	r18, r24
    3688:	39 07       	cpc	r19, r25
    368a:	09 f0       	breq	.+2      	; 0x368e <free+0x3a>
    368c:	61 c0       	rjmp	.+194    	; 0x3750 <free+0xfc>
    368e:	f0 93 e5 03 	sts	0x03E5, r31	; 0x8003e5 <__brkval+0x1>
    3692:	e0 93 e4 03 	sts	0x03E4, r30	; 0x8003e4 <__brkval>
    3696:	df 91       	pop	r29
    3698:	cf 91       	pop	r28
    369a:	08 95       	ret
    369c:	ea 01       	movw	r28, r20
    369e:	ce 17       	cp	r28, r30
    36a0:	df 07       	cpc	r29, r31
    36a2:	e8 f5       	brcc	.+122    	; 0x371e <free+0xca>
    36a4:	4a 81       	ldd	r20, Y+2	; 0x02
    36a6:	5b 81       	ldd	r21, Y+3	; 0x03
    36a8:	9e 01       	movw	r18, r28
    36aa:	41 15       	cp	r20, r1
    36ac:	51 05       	cpc	r21, r1
    36ae:	b1 f7       	brne	.-20     	; 0x369c <free+0x48>
    36b0:	e9 01       	movw	r28, r18
    36b2:	fb 83       	std	Y+3, r31	; 0x03
    36b4:	ea 83       	std	Y+2, r30	; 0x02
    36b6:	49 91       	ld	r20, Y+
    36b8:	59 91       	ld	r21, Y+
    36ba:	c4 0f       	add	r28, r20
    36bc:	d5 1f       	adc	r29, r21
    36be:	ec 17       	cp	r30, r28
    36c0:	fd 07       	cpc	r31, r29
    36c2:	61 f4       	brne	.+24     	; 0x36dc <free+0x88>
    36c4:	80 81       	ld	r24, Z
    36c6:	91 81       	ldd	r25, Z+1	; 0x01
    36c8:	02 96       	adiw	r24, 0x02	; 2
    36ca:	84 0f       	add	r24, r20
    36cc:	95 1f       	adc	r25, r21
    36ce:	e9 01       	movw	r28, r18
    36d0:	99 83       	std	Y+1, r25	; 0x01
    36d2:	88 83       	st	Y, r24
    36d4:	82 81       	ldd	r24, Z+2	; 0x02
    36d6:	93 81       	ldd	r25, Z+3	; 0x03
    36d8:	9b 83       	std	Y+3, r25	; 0x03
    36da:	8a 83       	std	Y+2, r24	; 0x02
    36dc:	f0 e0       	ldi	r31, 0x00	; 0
    36de:	e0 e0       	ldi	r30, 0x00	; 0
    36e0:	12 96       	adiw	r26, 0x02	; 2
    36e2:	8d 91       	ld	r24, X+
    36e4:	9c 91       	ld	r25, X
    36e6:	13 97       	sbiw	r26, 0x03	; 3
    36e8:	00 97       	sbiw	r24, 0x00	; 0
    36ea:	b9 f5       	brne	.+110    	; 0x375a <free+0x106>
    36ec:	2d 91       	ld	r18, X+
    36ee:	3c 91       	ld	r19, X
    36f0:	11 97       	sbiw	r26, 0x01	; 1
    36f2:	cd 01       	movw	r24, r26
    36f4:	02 96       	adiw	r24, 0x02	; 2
    36f6:	82 0f       	add	r24, r18
    36f8:	93 1f       	adc	r25, r19
    36fa:	20 91 e4 03 	lds	r18, 0x03E4	; 0x8003e4 <__brkval>
    36fe:	30 91 e5 03 	lds	r19, 0x03E5	; 0x8003e5 <__brkval+0x1>
    3702:	28 17       	cp	r18, r24
    3704:	39 07       	cpc	r19, r25
    3706:	39 f6       	brne	.-114    	; 0x3696 <free+0x42>
    3708:	30 97       	sbiw	r30, 0x00	; 0
    370a:	51 f5       	brne	.+84     	; 0x3760 <free+0x10c>
    370c:	10 92 e7 03 	sts	0x03E7, r1	; 0x8003e7 <__flp+0x1>
    3710:	10 92 e6 03 	sts	0x03E6, r1	; 0x8003e6 <__flp>
    3714:	b0 93 e5 03 	sts	0x03E5, r27	; 0x8003e5 <__brkval+0x1>
    3718:	a0 93 e4 03 	sts	0x03E4, r26	; 0x8003e4 <__brkval>
    371c:	bc cf       	rjmp	.-136    	; 0x3696 <free+0x42>
    371e:	d3 83       	std	Z+3, r29	; 0x03
    3720:	c2 83       	std	Z+2, r28	; 0x02
    3722:	40 81       	ld	r20, Z
    3724:	51 81       	ldd	r21, Z+1	; 0x01
    3726:	84 0f       	add	r24, r20
    3728:	95 1f       	adc	r25, r21
    372a:	c8 17       	cp	r28, r24
    372c:	d9 07       	cpc	r29, r25
    372e:	61 f4       	brne	.+24     	; 0x3748 <free+0xf4>
    3730:	4e 5f       	subi	r20, 0xFE	; 254
    3732:	5f 4f       	sbci	r21, 0xFF	; 255
    3734:	88 81       	ld	r24, Y
    3736:	99 81       	ldd	r25, Y+1	; 0x01
    3738:	48 0f       	add	r20, r24
    373a:	59 1f       	adc	r21, r25
    373c:	51 83       	std	Z+1, r21	; 0x01
    373e:	40 83       	st	Z, r20
    3740:	8a 81       	ldd	r24, Y+2	; 0x02
    3742:	9b 81       	ldd	r25, Y+3	; 0x03
    3744:	93 83       	std	Z+3, r25	; 0x03
    3746:	82 83       	std	Z+2, r24	; 0x02
    3748:	21 15       	cp	r18, r1
    374a:	31 05       	cpc	r19, r1
    374c:	09 f0       	breq	.+2      	; 0x3750 <free+0xfc>
    374e:	b0 cf       	rjmp	.-160    	; 0x36b0 <free+0x5c>
    3750:	f0 93 e7 03 	sts	0x03E7, r31	; 0x8003e7 <__flp+0x1>
    3754:	e0 93 e6 03 	sts	0x03E6, r30	; 0x8003e6 <__flp>
    3758:	9e cf       	rjmp	.-196    	; 0x3696 <free+0x42>
    375a:	fd 01       	movw	r30, r26
    375c:	dc 01       	movw	r26, r24
    375e:	c0 cf       	rjmp	.-128    	; 0x36e0 <free+0x8c>
    3760:	13 82       	std	Z+3, r1	; 0x03
    3762:	12 82       	std	Z+2, r1	; 0x02
    3764:	d7 cf       	rjmp	.-82     	; 0x3714 <free+0xc0>

00003766 <__do_global_dtors>:
__do_global_dtors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    3766:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    3768:	c8 e1       	ldi	r28, 0x18	; 24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    376a:	d1 e0       	ldi	r29, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    376c:	04 c0       	rjmp	.+8      	; 0x3776 <__do_global_dtors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    376e:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    3770:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    3774:	21 96       	adiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    3776:	c9 31       	cpi	r28, 0x19	; 25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    3778:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    377a:	c9 f7       	brne	.-14     	; 0x376e <__do_global_dtors+0x8>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    377c:	f8 94       	cli

0000377e <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    377e:	ff cf       	rjmp	.-2      	; 0x377e <__stop_program>
