
C:\Users\DELL\AppData\Local\Temp\arduino\sketches\4D9B6495A15C522C23E7A05AFA2E1675/Blink.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
../../../../crt1/gcrt1.S:65
   0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__ctors_end>
../../../../crt1/gcrt1.S:67
   4:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
../../../../crt1/gcrt1.S:68
   8:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
../../../../crt1/gcrt1.S:69
   c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
../../../../crt1/gcrt1.S:70
  10:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
../../../../crt1/gcrt1.S:71
  14:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
../../../../crt1/gcrt1.S:72
  18:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
../../../../crt1/gcrt1.S:73
  1c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
../../../../crt1/gcrt1.S:74
  20:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
../../../../crt1/gcrt1.S:75
  24:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
../../../../crt1/gcrt1.S:76
  28:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
../../../../crt1/gcrt1.S:77
  2c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
../../../../crt1/gcrt1.S:78
  30:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
../../../../crt1/gcrt1.S:79
  34:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
../../../../crt1/gcrt1.S:80
  38:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
../../../../crt1/gcrt1.S:81
  3c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
../../../../crt1/gcrt1.S:82
  40:	0c 94 cb 00 	jmp	0x196	; 0x196 <__vector_16>
../../../../crt1/gcrt1.S:83
  44:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
../../../../crt1/gcrt1.S:84
  48:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
../../../../crt1/gcrt1.S:85
  4c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
../../../../crt1/gcrt1.S:86
  50:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
../../../../crt1/gcrt1.S:87
  54:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
../../../../crt1/gcrt1.S:88
  58:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
../../../../crt1/gcrt1.S:89
  5c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
../../../../crt1/gcrt1.S:90
  60:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
../../../../crt1/gcrt1.S:91
  64:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
../../../../crt1/gcrt1.S:92
  68:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
../../../../crt1/gcrt1.S:93
  6c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
../../../../crt1/gcrt1.S:94
  70:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
../../../../crt1/gcrt1.S:95
  74:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
../../../../crt1/gcrt1.S:96
  78:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
../../../../crt1/gcrt1.S:97
  7c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
../../../../crt1/gcrt1.S:98
  80:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
../../../../crt1/gcrt1.S:99
  84:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
../../../../crt1/gcrt1.S:100
  88:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
../../../../crt1/gcrt1.S:101
  8c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
../../../../crt1/gcrt1.S:102
  90:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
../../../../crt1/gcrt1.S:103
  94:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
../../../../crt1/gcrt1.S:104
  98:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
../../../../crt1/gcrt1.S:105
  9c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
../../../../crt1/gcrt1.S:106
  a0:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
../../../../crt1/gcrt1.S:107
  a4:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
../../../../crt1/gcrt1.S:108
  a8:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
../../../../crt1/gcrt1.S:109
  ac:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
../../../../crt1/gcrt1.S:110
  b0:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>

000000b4 <__trampolines_end>:
__trampolines_start():
  b4:	0a 0d       	add	r16, r10
  b6:	0e 09       	sbc	r16, r14
  b8:	00 03       	mulsu	r16, r16
  ba:	02 00       	.word	0x0002	; ????
  bc:	00 04       	cpc	r0, r0
  be:	05 08       	sbc	r0, r5
	...

000000cf <digital_pin_to_bit_mask_PGM>:
  cf:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  df:	04 08 10 20 40 80 40 01 02 04 08                    ... @.@....

000000ea <digital_pin_to_port_PGM>:
  ea:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  fa:	03 03 03 03 02 02 03 05 05 05 05                    ...........

00000105 <port_to_output_PGM>:
 105:	00 00 00 00 25 00 28 00 2b 00 2e 00                 ....%.(.+...

00000111 <port_to_mode_PGM>:
 111:	00 00 00 00 24 00 27 00 2a 00 2d 00 00              ....$.'.*.-..

0000011e <__ctors_end>:
__dtors_end():
../../../../crt1/gcrt1.S:230
 11e:	11 24       	eor	r1, r1
../../../../crt1/gcrt1.S:231
 120:	1f be       	out	0x3f, r1	; 63
../../../../crt1/gcrt1.S:232
 122:	cf ef       	ldi	r28, 0xFF	; 255
../../../../crt1/gcrt1.S:241
 124:	d8 e0       	ldi	r29, 0x08	; 8
../../../../crt1/gcrt1.S:242
 126:	de bf       	out	0x3e, r29	; 62
../../../../crt1/gcrt1.S:244
 128:	cd bf       	out	0x3d, r28	; 61

0000012a <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
 12a:	21 e0       	ldi	r18, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
 12c:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
 12e:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
 130:	01 c0       	rjmp	.+2      	; 0x134 <.do_clear_bss_start>

00000132 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
 132:	1d 92       	st	X+, r1

00000134 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
 134:	a9 30       	cpi	r26, 0x09	; 9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
 136:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
 138:	e1 f7       	brne	.-8      	; 0x132 <.do_clear_bss_loop>
.do_clear_bss_start():
../../../../crt1/gcrt1.S:314
 13a:	0e 94 bc 00 	call	0x178	; 0x178 <main>
../../../../crt1/gcrt1.S:315
 13e:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <_exit>

00000142 <__bad_interrupt>:
__vector_38():
../../../../crt1/gcrt1.S:209
 142:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000146 <setup>:
setup():
C:\Users\DELL\AppData\Local\Temp\.arduinoIDE-unsaved2023816-6708-1yo3bdp.h6nr\Blink/Blink.ino:28
*/

// the setup function runs once when you press reset or power the board
void setup() {
  // initialize digital pin LED_BUILTIN as an output.
  pinMode(LED_BUILTIN, OUTPUT);
 146:	61 e0       	ldi	r22, 0x01	; 1
 148:	8d e0       	ldi	r24, 0x0D	; 13
 14a:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <pinMode>

0000014e <loop>:
loop():
C:\Users\DELL\AppData\Local\Temp\.arduinoIDE-unsaved2023816-6708-1yo3bdp.h6nr\Blink/Blink.ino:33
}

// the loop function runs over and over again forever
void loop() {
  digitalWrite(LED_BUILTIN, HIGH);  // turn the LED on (HIGH is the voltage level)
 14e:	61 e0       	ldi	r22, 0x01	; 1
 150:	8d e0       	ldi	r24, 0x0D	; 13
 152:	0e 94 31 02 	call	0x462	; 0x462 <digitalWrite>
C:\Users\DELL\AppData\Local\Temp\.arduinoIDE-unsaved2023816-6708-1yo3bdp.h6nr\Blink/Blink.ino:34
  delay(1000);                      // wait for a second
 156:	68 ee       	ldi	r22, 0xE8	; 232
 158:	73 e0       	ldi	r23, 0x03	; 3
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 3a 01 	call	0x274	; 0x274 <delay>
C:\Users\DELL\AppData\Local\Temp\.arduinoIDE-unsaved2023816-6708-1yo3bdp.h6nr\Blink/Blink.ino:35
  digitalWrite(LED_BUILTIN, LOW);   // turn the LED off by making the voltage LOW
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	8d e0       	ldi	r24, 0x0D	; 13
 166:	0e 94 31 02 	call	0x462	; 0x462 <digitalWrite>
C:\Users\DELL\AppData\Local\Temp\.arduinoIDE-unsaved2023816-6708-1yo3bdp.h6nr\Blink/Blink.ino:36
  delay(1000);                      // wait for a second
 16a:	68 ee       	ldi	r22, 0xE8	; 232
 16c:	73 e0       	ldi	r23, 0x03	; 3
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0c 94 3a 01 	jmp	0x274	; 0x274 <delay>

00000176 <initVariant>:
initVariant():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
 176:	08 95       	ret

00000178 <main>:
main():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
 178:	0e 94 73 01 	call	0x2e6	; 0x2e6 <init>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/main.cpp:37

  initVariant();
 17c:	0e 94 bb 00 	call	0x176	; 0x176 <initVariant>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
 180:	0e 94 a3 00 	call	0x146	; 0x146 <setup>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
 184:	c0 e0       	ldi	r28, 0x00	; 0
 186:	d0 e0       	ldi	r29, 0x00	; 0
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
 188:	0e 94 a7 00 	call	0x14e	; 0x14e <loop>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
 18c:	20 97       	sbiw	r28, 0x00	; 0
 18e:	e1 f3       	breq	.-8      	; 0x188 <main+0x10>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/main.cpp:47 (discriminator 1)
 190:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 194:	f9 cf       	rjmp	.-14     	; 0x188 <main+0x10>

00000196 <__vector_16>:
__vector_16():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
 196:	1f 92       	push	r1
 198:	0f 92       	push	r0
 19a:	0f b6       	in	r0, 0x3f	; 63
 19c:	0f 92       	push	r0
 19e:	11 24       	eor	r1, r1
 1a0:	2f 93       	push	r18
 1a2:	3f 93       	push	r19
 1a4:	8f 93       	push	r24
 1a6:	9f 93       	push	r25
 1a8:	af 93       	push	r26
 1aa:	bf 93       	push	r27
 1ac:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <timer0_millis>
 1b0:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <timer0_millis+0x1>
 1b4:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <timer0_millis+0x2>
 1b8:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <timer0_millis+0x3>
 1bc:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <timer0_fract>
 1c0:	26 e0       	ldi	r18, 0x06	; 6
 1c2:	23 0f       	add	r18, r19
 1c4:	2d 37       	cpi	r18, 0x7D	; 125
 1c6:	68 f1       	brcs	.+90     	; 0x222 <__vector_16+0x8c>
 1c8:	29 e8       	ldi	r18, 0x89	; 137
 1ca:	23 0f       	add	r18, r19
 1cc:	03 96       	adiw	r24, 0x03	; 3
 1ce:	a1 1d       	adc	r26, r1
 1d0:	b1 1d       	adc	r27, r1
 1d2:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <timer0_fract>
 1d6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <timer0_millis>
 1da:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <timer0_millis+0x1>
 1de:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <timer0_millis+0x2>
 1e2:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <timer0_millis+0x3>
 1e6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ea:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1ee:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1f2:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 1f6:	01 96       	adiw	r24, 0x01	; 1
 1f8:	a1 1d       	adc	r26, r1
 1fa:	b1 1d       	adc	r27, r1
 1fc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 200:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 204:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 208:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 20c:	bf 91       	pop	r27
 20e:	af 91       	pop	r26
 210:	9f 91       	pop	r25
 212:	8f 91       	pop	r24
 214:	3f 91       	pop	r19
 216:	2f 91       	pop	r18
 218:	0f 90       	pop	r0
 21a:	0f be       	out	0x3f, r0	; 63
 21c:	0f 90       	pop	r0
 21e:	1f 90       	pop	r1
 220:	18 95       	reti
 222:	02 96       	adiw	r24, 0x02	; 2
 224:	a1 1d       	adc	r26, r1
 226:	b1 1d       	adc	r27, r1
 228:	d4 cf       	rjmp	.-88     	; 0x1d2 <__vector_16+0x3c>

0000022a <micros>:
micros():
 22a:	3f b7       	in	r19, 0x3f	; 63
 22c:	f8 94       	cli
 22e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 232:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 236:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 23a:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 23e:	26 b5       	in	r18, 0x26	; 38
 240:	a8 9b       	sbis	0x15, 0	; 21
 242:	05 c0       	rjmp	.+10     	; 0x24e <micros+0x24>
 244:	2f 3f       	cpi	r18, 0xFF	; 255
 246:	19 f0       	breq	.+6      	; 0x24e <micros+0x24>
 248:	01 96       	adiw	r24, 0x01	; 1
 24a:	a1 1d       	adc	r26, r1
 24c:	b1 1d       	adc	r27, r1
 24e:	3f bf       	out	0x3f, r19	; 63
 250:	ba 2f       	mov	r27, r26
 252:	a9 2f       	mov	r26, r25
 254:	98 2f       	mov	r25, r24
 256:	88 27       	eor	r24, r24
 258:	bc 01       	movw	r22, r24
 25a:	cd 01       	movw	r24, r26
 25c:	62 0f       	add	r22, r18
 25e:	71 1d       	adc	r23, r1
 260:	81 1d       	adc	r24, r1
 262:	91 1d       	adc	r25, r1
 264:	43 e0       	ldi	r20, 0x03	; 3
 266:	66 0f       	add	r22, r22
 268:	77 1f       	adc	r23, r23
 26a:	88 1f       	adc	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	4a 95       	dec	r20
 270:	d1 f7       	brne	.-12     	; 0x266 <micros+0x3c>
 272:	08 95       	ret

00000274 <delay>:
delay():
 274:	8f 92       	push	r8
 276:	9f 92       	push	r9
 278:	af 92       	push	r10
 27a:	bf 92       	push	r11
 27c:	cf 92       	push	r12
 27e:	df 92       	push	r13
 280:	ef 92       	push	r14
 282:	ff 92       	push	r15
 284:	6b 01       	movw	r12, r22
 286:	7c 01       	movw	r14, r24
 288:	0e 94 15 01 	call	0x22a	; 0x22a <micros>
 28c:	4b 01       	movw	r8, r22
 28e:	5c 01       	movw	r10, r24
 290:	c1 14       	cp	r12, r1
 292:	d1 04       	cpc	r13, r1
 294:	e1 04       	cpc	r14, r1
 296:	f1 04       	cpc	r15, r1
 298:	e9 f0       	breq	.+58     	; 0x2d4 <delay+0x60>
 29a:	0e 94 5f 02 	call	0x4be	; 0x4be <yield>
 29e:	0e 94 15 01 	call	0x22a	; 0x22a <micros>
 2a2:	68 19       	sub	r22, r8
 2a4:	79 09       	sbc	r23, r9
 2a6:	8a 09       	sbc	r24, r10
 2a8:	9b 09       	sbc	r25, r11
 2aa:	68 3e       	cpi	r22, 0xE8	; 232
 2ac:	73 40       	sbci	r23, 0x03	; 3
 2ae:	81 05       	cpc	r24, r1
 2b0:	91 05       	cpc	r25, r1
 2b2:	70 f3       	brcs	.-36     	; 0x290 <delay+0x1c>
 2b4:	21 e0       	ldi	r18, 0x01	; 1
 2b6:	c2 1a       	sub	r12, r18
 2b8:	d1 08       	sbc	r13, r1
 2ba:	e1 08       	sbc	r14, r1
 2bc:	f1 08       	sbc	r15, r1
 2be:	88 ee       	ldi	r24, 0xE8	; 232
 2c0:	88 0e       	add	r8, r24
 2c2:	83 e0       	ldi	r24, 0x03	; 3
 2c4:	98 1e       	adc	r9, r24
 2c6:	a1 1c       	adc	r10, r1
 2c8:	b1 1c       	adc	r11, r1
 2ca:	c1 14       	cp	r12, r1
 2cc:	d1 04       	cpc	r13, r1
 2ce:	e1 04       	cpc	r14, r1
 2d0:	f1 04       	cpc	r15, r1
 2d2:	29 f7       	brne	.-54     	; 0x29e <delay+0x2a>
 2d4:	ff 90       	pop	r15
 2d6:	ef 90       	pop	r14
 2d8:	df 90       	pop	r13
 2da:	cf 90       	pop	r12
 2dc:	bf 90       	pop	r11
 2de:	af 90       	pop	r10
 2e0:	9f 90       	pop	r9
 2e2:	8f 90       	pop	r8
 2e4:	08 95       	ret

000002e6 <init>:
init():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
 2e6:	78 94       	sei
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
 2e8:	84 b5       	in	r24, 0x24	; 36
 2ea:	83 60       	ori	r24, 0x03	; 3
 2ec:	84 bd       	out	0x24, r24	; 36
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
 2ee:	85 b5       	in	r24, 0x25	; 37
 2f0:	83 60       	ori	r24, 0x03	; 3
 2f2:	85 bd       	out	0x25, r24	; 37
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
 2f4:	ee e6       	ldi	r30, 0x6E	; 110
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	80 81       	ld	r24, Z
 2fa:	81 60       	ori	r24, 0x01	; 1
 2fc:	80 83       	st	Z, r24
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
 2fe:	e1 e8       	ldi	r30, 0x81	; 129
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	82 e0       	ldi	r24, 0x02	; 2
 304:	80 83       	st	Z, r24
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
 306:	80 81       	ld	r24, Z
 308:	81 60       	ori	r24, 0x01	; 1
 30a:	80 83       	st	Z, r24
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
 30c:	e0 e8       	ldi	r30, 0x80	; 128
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	80 81       	ld	r24, Z
 312:	81 60       	ori	r24, 0x01	; 1
 314:	80 83       	st	Z, r24
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
 316:	e1 eb       	ldi	r30, 0xB1	; 177
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	80 81       	ld	r24, Z
 31c:	84 60       	ori	r24, 0x04	; 4
 31e:	80 83       	st	Z, r24
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
 320:	e0 eb       	ldi	r30, 0xB0	; 176
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	80 81       	ld	r24, Z
 326:	81 60       	ori	r24, 0x01	; 1
 328:	80 83       	st	Z, r24
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
 32a:	e1 e9       	ldi	r30, 0x91	; 145
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	80 81       	ld	r24, Z
 330:	83 60       	ori	r24, 0x03	; 3
 332:	80 83       	st	Z, r24
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
 334:	e0 e9       	ldi	r30, 0x90	; 144
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	80 81       	ld	r24, Z
 33a:	81 60       	ori	r24, 0x01	; 1
 33c:	80 83       	st	Z, r24
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:1038
  TCCR4B |= _BV(CS42) | _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
  TCCR4D |= _BV(WGM40);                        // Put timer 4 in phase- and frequency-correct PWM mode
  TCCR4A |= _BV(PWM4A);                        // Enable PWM mode for comparator OCR4A
  TCCR4C |= _BV(PWM4D);                        // Enable PWM mode for comparator OCR4D
#elif defined(TCCR4B) && defined(CS41) && defined(WGM40)
  TCCR4B |= _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
 33e:	e1 ea       	ldi	r30, 0xA1	; 161
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	80 81       	ld	r24, Z
 344:	83 60       	ori	r24, 0x03	; 3
 346:	80 83       	st	Z, r24
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:1039
  TCCR4A |= _BV(WGM40);            // Put timer 4 in 8-bit phase correct pwm mode
 348:	e0 ea       	ldi	r30, 0xA0	; 160
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	80 81       	ld	r24, Z
 34e:	81 60       	ori	r24, 0x01	; 1
 350:	80 83       	st	Z, r24
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:1052
#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
  #elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADEN);
 352:	86 e8       	ldi	r24, 0x86	; 134
 354:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
 358:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:1072
#endif
}
 35c:	08 95       	ret

0000035e <turnOffPWM>:
turnOffPWM():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
 35e:	82 50       	subi	r24, 0x02	; 2
 360:	8d 30       	cpi	r24, 0x0D	; 13
 362:	08 f0       	brcs	.+2      	; 0x366 <turnOffPWM+0x8>
 364:	3e c0       	rjmp	.+124    	; 0x3e2 <turnOffPWM+0x84>
 366:	e8 2f       	mov	r30, r24
 368:	f0 e0       	ldi	r31, 0x00	; 0
 36a:	e7 54       	subi	r30, 0x47	; 71
 36c:	fe 4f       	sbci	r31, 0xFE	; 254
 36e:	0c 94 60 02 	jmp	0x4c0	; 0x4c0 <__tablejump2__>
 372:	ee 01       	movw	r28, r28
 374:	f2 01       	movw	r30, r4
 376:	c6 01       	movw	r24, r12
 378:	cc 01       	movw	r24, r24
 37a:	f1 01       	movw	r30, r2
 37c:	f1 01       	movw	r30, r2
 37e:	d0 01       	movw	r26, r0
 380:	d6 01       	movw	r26, r12
 382:	da 01       	movw	r26, r20
 384:	e0 01       	movw	r28, r0
 386:	f1 01       	movw	r30, r2
 388:	e4 01       	movw	r28, r8
 38a:	ea 01       	movw	r28, r20
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
 38c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 390:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
 392:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:88
        break;
 396:	08 95       	ret
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
 398:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 39c:	8f 7d       	andi	r24, 0xDF	; 223
 39e:	f9 cf       	rjmp	.-14     	; 0x392 <turnOffPWM+0x34>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
 3a0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
 3a4:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
 3a6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:110
        break;
 3aa:	08 95       	ret
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
 3ac:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
 3b0:	8f 7d       	andi	r24, 0xDF	; 223
 3b2:	f9 cf       	rjmp	.-14     	; 0x3a6 <turnOffPWM+0x48>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
 3b4:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
 3b8:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:121
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
 3ba:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:122
        break;
 3be:	08 95       	ret
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
 3c0:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
 3c4:	8f 7d       	andi	r24, 0xDF	; 223
 3c6:	f9 cf       	rjmp	.-14     	; 0x3ba <turnOffPWM+0x5c>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:133
    #endif

    // Timer4
    #if defined(TCCR4A) && defined(COM4A1)
      case TIMER4A:
        TCCR4A &= ~_BV(COM4A1);
 3c8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
 3cc:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:138
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4B1)
      case  TIMER4B:
        TCCR4A &= ~_BV(COM4B1);
 3ce:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:139
        break;
 3d2:	08 95       	ret
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:138
        TCCR4A &= ~_BV(COM4A1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4B1)
      case  TIMER4B:
        TCCR4A &= ~_BV(COM4B1);
 3d4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
 3d8:	8f 7d       	andi	r24, 0xDF	; 223
 3da:	f9 cf       	rjmp	.-14     	; 0x3ce <turnOffPWM+0x70>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
 3dc:	84 b5       	in	r24, 0x24	; 36
 3de:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
 3e0:	84 bd       	out	0x24, r24	; 36
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
 3e2:	08 95       	ret
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
 3e4:	84 b5       	in	r24, 0x24	; 36
 3e6:	8f 7d       	andi	r24, 0xDF	; 223
 3e8:	fb cf       	rjmp	.-10     	; 0x3e0 <turnOffPWM+0x82>

000003ea <pinMode>:
pinMode():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 3ea:	cf 93       	push	r28
 3ec:	df 93       	push	r29
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	fc 01       	movw	r30, r24
 3f2:	e1 53       	subi	r30, 0x31	; 49
 3f4:	ff 4f       	sbci	r31, 0xFF	; 255
 3f6:	24 91       	lpm	r18, Z
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
 3f8:	86 51       	subi	r24, 0x16	; 22
 3fa:	9f 4f       	sbci	r25, 0xFF	; 255
 3fc:	fc 01       	movw	r30, r24
 3fe:	84 91       	lpm	r24, Z
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
 400:	88 23       	and	r24, r24
 402:	c9 f0       	breq	.+50     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	88 0f       	add	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	fc 01       	movw	r30, r24
 40c:	ef 5e       	subi	r30, 0xEF	; 239
 40e:	fe 4f       	sbci	r31, 0xFE	; 254
 410:	a5 91       	lpm	r26, Z+
 412:	b4 91       	lpm	r27, Z
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
 414:	fc 01       	movw	r30, r24
 416:	eb 5f       	subi	r30, 0xFB	; 251
 418:	fe 4f       	sbci	r31, 0xFE	; 254
 41a:	c5 91       	lpm	r28, Z+
 41c:	d4 91       	lpm	r29, Z
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
 41e:	61 11       	cpse	r22, r1
 420:	0d c0       	rjmp	.+26     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
 422:	9f b7       	in	r25, 0x3f	; 63
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
 424:	f8 94       	cli
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
 426:	8c 91       	ld	r24, X
 428:	20 95       	com	r18
 42a:	82 23       	and	r24, r18
 42c:	8c 93       	st	X, r24
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
 42e:	88 81       	ld	r24, Y
 430:	28 23       	and	r18, r24
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
 432:	28 83       	st	Y, r18
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
 434:	9f bf       	out	0x3f, r25	; 63
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
 436:	df 91       	pop	r29
 438:	cf 91       	pop	r28
 43a:	08 95       	ret
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
 43c:	62 30       	cpi	r22, 0x02	; 2
 43e:	51 f4       	brne	.+20     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
 440:	9f b7       	in	r25, 0x3f	; 63
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
 442:	f8 94       	cli
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
 444:	3c 91       	ld	r19, X
 446:	82 2f       	mov	r24, r18
 448:	80 95       	com	r24
 44a:	83 23       	and	r24, r19
 44c:	8c 93       	st	X, r24
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
 44e:	e8 81       	ld	r30, Y
 450:	2e 2b       	or	r18, r30
 452:	ef cf       	rjmp	.-34     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
 454:	8f b7       	in	r24, 0x3f	; 63
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
 456:	f8 94       	cli
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
 458:	ec 91       	ld	r30, X
 45a:	2e 2b       	or	r18, r30
 45c:	2c 93       	st	X, r18
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
 45e:	8f bf       	out	0x3f, r24	; 63
 460:	ea cf       	rjmp	.-44     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>

00000462 <digitalWrite>:
digitalWrite():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 462:	1f 93       	push	r17
 464:	cf 93       	push	r28
 466:	df 93       	push	r29
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
 468:	28 2f       	mov	r18, r24
 46a:	30 e0       	ldi	r19, 0x00	; 0
 46c:	f9 01       	movw	r30, r18
 46e:	ec 54       	subi	r30, 0x4C	; 76
 470:	ff 4f       	sbci	r31, 0xFF	; 255
 472:	84 91       	lpm	r24, Z
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
 474:	f9 01       	movw	r30, r18
 476:	e1 53       	subi	r30, 0x31	; 49
 478:	ff 4f       	sbci	r31, 0xFF	; 255
 47a:	d4 91       	lpm	r29, Z
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
 47c:	f9 01       	movw	r30, r18
 47e:	e6 51       	subi	r30, 0x16	; 22
 480:	ff 4f       	sbci	r31, 0xFF	; 255
 482:	c4 91       	lpm	r28, Z
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
 484:	cc 23       	and	r28, r28
 486:	a9 f0       	breq	.+42     	; 0x4b2 <digitalWrite+0x50>
 488:	16 2f       	mov	r17, r22
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 48a:	81 11       	cpse	r24, r1
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
 48c:	0e 94 af 01 	call	0x35e	; 0x35e <turnOffPWM>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
 490:	ec 2f       	mov	r30, r28
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	ee 0f       	add	r30, r30
 496:	ff 1f       	adc	r31, r31
 498:	eb 5f       	subi	r30, 0xFB	; 251
 49a:	fe 4f       	sbci	r31, 0xFE	; 254
 49c:	a5 91       	lpm	r26, Z+
 49e:	b4 91       	lpm	r27, Z
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
 4a0:	8f b7       	in	r24, 0x3f	; 63
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
 4a2:	f8 94       	cli
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
 4a4:	ec 91       	ld	r30, X
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
 4a6:	11 11       	cpse	r17, r1
 4a8:	08 c0       	rjmp	.+16     	; 0x4ba <digitalWrite+0x58>
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
 4aa:	d0 95       	com	r29
 4ac:	de 23       	and	r29, r30
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
 4ae:	dc 93       	st	X, r29
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
 4b0:	8f bf       	out	0x3f, r24	; 63
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:212
}
 4b2:	df 91       	pop	r29
 4b4:	cf 91       	pop	r28
 4b6:	1f 91       	pop	r17
 4b8:	08 95       	ret
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
 4ba:	de 2b       	or	r29, r30
 4bc:	f8 cf       	rjmp	.-16     	; 0x4ae <digitalWrite+0x4c>

000004be <yield>:
__empty():
C:\Users\DELL\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
 4be:	08 95       	ret

000004c0 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
 4c0:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
 4c2:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
 4c4:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
 4c6:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
 4c8:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
 4ca:	09 94       	ijmp

000004cc <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
 4cc:	f8 94       	cli

000004ce <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
 4ce:	ff cf       	rjmp	.-2      	; 0x4ce <__stop_program>
